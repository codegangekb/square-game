!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=13)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.GameObject=class{constructor(t,e,i,s){this.transform=t,this.drawer=e,this.collider=i,this.animation=s}render(t,e){this.drawer.draw(t,e)}update(t){this.animation&&this.animation.update(t)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(6);e.Drawer=class{constructor(t){this.transform=t,this.assets=s.Assets.getInstance()}draw(t,e){e.xView-this.transform.position.x>100&&e.yView-this.transform.position.y>100||(t.translate(-e.xView+this.transform.position.x,-e.yView+this.transform.position.y),t.rotate(this.transform.angle),this.render(t),t.setTransform(1,0,0,1,0,0))}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(t,e){this.x=t,this.y=e}add(t){return new s(this.x+t.x,this.y+t.y)}sub(t){return new s(this.x-t.x,this.y-t.y)}multiple(t,e){return new s(this.x*t,this.y*(null!=e?e:t))}normalize(){const t=Math.sqrt(this.x*this.x+this.y*this.y);return t?new s(this.x/t,this.y/t):this}static zero(){return new s(0,0)}static angle(t,e){return Math.atan2(t.x-e.x,-(t.y-e.y))}static distance(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}static clone(t){return new s(t.x,t.y)}static turnAround(t){return new s(-t.x,-t.y)}}e.Vector=s},function(t,e,i){const s=i(21),n=i(23),o=i(10),r=i(24),a=i(8),h=i(9);class c{constructor(){this._bvh=new s}createCircle(t=0,e=0,i=0,s=1,o=0){const r=new n(t,e,i,s,o);return this._bvh.insert(r),r}createPolygon(t=0,e=0,i=[[0,0]],s=0,n=1,r=1,a=0){const h=new o(t,e,i,s,n,r,a);return this._bvh.insert(h),h}createPoint(t=0,e=0,i=0){const s=new r(t,e,i);return this._bvh.insert(s),s}createResult(){return new a}static createResult(){return new a}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,i=null,s=!0){return h(t,e,i,s)}}t.exports={default:c,Collisions:c,Result:a,Circle:n,Polygon:o,Point:r}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(2);class n{constructor(t,e,i,s,n){this._position=t,this._angle=e,this.collider=i,this._scale=s,this._size=n}get position(){return this._position}get angle(){return this._angle}get size(){return this._size}rotate(t){this._angle=t}lookAt(t){this._angle=s.Vector.angle(t,this.position)}setPosition(t){t=new s.Vector(Math.floor(t.x),Math.floor(t.y)),this._position=t}static clone(t){return new n(s.Vector.clone(t.position),t.angle,t._scale,t._size)}}e.Transform=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WALL_HEIGHT=42,e.WALL_WIDTH=120,e.WALL_X=2235,e.TOWN_HEIGHT=42,e.TOWN_START=900,e.WALL_START=918},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(){this.assetsMap={},this.assetsList=["boss.svg","cosmonaut.svg","ded.svg","deva-vesna.svg","dodo.svg","house.svg","maxim_menailo.svg","mer.svg","naum-blik.svg","pizza.svg","player.svg","rinat.svg","roizman.svg","salsa.svg","shahrin.svg","sheremet.svg","square.png","ten-gubernatora.svg","titushki.svg","town.svg","tsarikov.svg","wall.svg","wall1.svg","wall2.svg","wall3.svg","wall4.svg","wall5.svg","yandex-eda.svg","yandex-eda2.svg","yandex-eda3.svg","devi-u-popa.svg","grupa2.svg","human.svg","we.svg","yandex-eda-tri-parnya.svg"]}static getInstance(){return s.instance||(s.instance=new s),s.instance}get(t){return this.assetsMap[t]}loadOne(t){return new Promise(e=>{const i=new Image;i.src="public/"+t,i.onload=(()=>{this.assetsMap[t]=i,e()})})}load(){return Promise.all(this.assetsList.map(this.loadOne.bind(this)))}}e.Assets=s},function(t,e,i){const s=i(8),n=i(9);t.exports=class{constructor(t=0,e=0,i=0){this.x=t,this.y=e,this.padding=i,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=i,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,i=!0){return n(this,t,e,i)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new s}static createResult(){return new s}},t.exports.default=t.exports},function(t,e){t.exports=class{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.b_in_a=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}},t.exports.default=t.exports},function(t,e){function i(t,e,i=null,s=!1){const n=t._coords,o=t._edges,r=t._normals,a=e.x,h=e.y,c=e.radius*e.scale,l=2*c,_=c*c,d=n.length;let u=!0,p=!0,f=null,m=0,v=0;if(2===d){const t=a-n[0],e=h-n[1],s=t*t+e*e;if(s>_)return!1;if(i){const i=Math.sqrt(s);f=c-i,m=t/i,v=e/i,p=!1}}else for(let t=0,e=1;t<d;t+=2,e+=2){const s=a-n[t],y=h-n[e],b=o[t],g=o[e],x=s*b+y*g,w=x<0?-1:x>b*b+g*g?1:0;let O=!1,P=0,T=0,j=0;if(i&&u&&s*s+y*y>_&&(u=!1),w){const e=-1===w,r=e?0===t?d-2:t-2:t===d-2?0:t+2,l=r+1,u=a-n[r],f=h-n[l],m=o[r],v=o[l],b=u*m+f*v;if((b<0?-1:b>m*m+v*v?1:0)===-w){const t=e?s:u,n=e?y:f,o=t*t+n*n;if(o>_)return!1;if(i){const e=Math.sqrt(o);O=!0,P=c-e,T=t/e,j=n/e,p=!1}}}else{const n=r[t],o=r[e],a=s*n+y*o,h=a<0?-a:a;if(a>0&&h>c)return!1;i&&(O=!0,P=c-a,T=n,j=o,(p&&a>=0||P<l)&&(p=!1))}O&&(null===f||f>P)&&(f=P,m=T,v=j)}return i&&(i.a_in_b=s?p:u,i.b_in_a=s?u:p,i.overlap=f,i.overlap_x=s?-m:m,i.overlap_y=s?-v:v),!0}function s(t,e,i,s,n=null){const o=t.length,r=e.length;if(!o||!r)return!0;let a=null,h=null,c=null,l=null;for(let e=0,n=1;e<o;e+=2,n+=2){const o=t[e]*i+t[n]*s;(null===a||a>o)&&(a=o),(null===h||h<o)&&(h=o)}for(let t=0,n=1;t<r;t+=2,n+=2){const o=e[t]*i+e[n]*s;(null===c||c>o)&&(c=o),(null===l||l<o)&&(l=o)}if(a>l||h<c)return!0;if(n){let t=0;if(a<c)if(n.a_in_b=!1,h<l)t=h-c,n.b_in_a=!1;else{const e=h-c,i=l-a;t=e<i?e:-i}else if(n.b_in_a=!1,h>l)t=a-l,n.a_in_b=!1;else{const e=h-c,i=l-a;t=e<i?e:-i}const e=n.overlap,o=t<0?-t:t;if(null===e||e>o){const e=t<0?-1:1;n.overlap=o,n.overlap_x=i*e,n.overlap_y=s*e}}return!1}t.exports=function(t,e,n=null,o=!0){const r=t._polygon,a=e._polygon;let h=!1;return n&&(n.a=t,n.b=e,n.a_in_b=!0,n.b_in_a=!0,n.overlap=null,n.overlap_x=0,n.overlap_y=0),r&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),a&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),o&&!function(t,e){const i=t._polygon,s=i?0:t.x,n=i?0:t.y,o=i?0:t.radius*t.scale,r=i?t._min_x:s-o,a=i?t._min_y:n-o,h=i?t._max_x:s+o,c=i?t._max_y:n+o,l=e._polygon,_=l?0:e.x,d=l?0:e.y,u=l?0:e.radius*e.scale,p=l?e._min_x:_-u,f=l?e._min_y:d-u,m=l?e._max_x:_+u,v=l?e._max_y:d+u;return r<m&&a<v&&h>p&&c>f}(t,e)||(r&&t._dirty_normals&&t._calculateNormals(),a&&e._dirty_normals&&e._calculateNormals(),h=r&&a?function(t,e,i=null){const n=t._coords.length,o=e._coords.length;if(2===n&&2===o){const s=t._coords,n=e._coords;return i&&(i.overlap=0),s[0]===n[0]&&s[1]===n[1]}const r=t._coords,a=e._coords,h=t._normals,c=e._normals;if(n>2)for(let t=0,e=1;t<n;t+=2,e+=2)if(s(r,a,h[t],h[e],i))return!1;if(o>2)for(let t=0,e=1;t<o;t+=2,e+=2)if(s(r,a,c[t],c[e],i))return!1;return!0}(t,e,n):r?i(t,e,n,!1):a?i(e,t,n,!0):function(t,e,i=null){const s=t.radius*t.scale,n=e.radius*e.scale,o=e.x-t.x,r=e.y-t.y,a=s+n,h=o*o+r*r;if(h>a*a)return!1;if(i){const t=Math.sqrt(h);i.a_in_b=s<=n&&t<=n-s,i.b_in_a=n<=s&&t<=s-n,i.overlap=a-t,i.overlap_x=o/t,i.overlap_y=r/t}return!0}(t,e,n)),n&&(n.collision=h),h},t.exports.default=t.exports},function(t,e,i){const s=i(7);class n extends s{constructor(t=0,e=0,i=[],s=0,o=1,r=1,a=0){super(t,e,a),this.angle=s,this.scale_x=o,this.scale_y=r,this._polygon=!0,this._x=t,this._y=e,this._angle=s,this._scale_x=o,this._scale_y=r,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,n.prototype.setPoints.call(this,i)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let i=2;i<e.length;i+=2)t.lineTo(e[i],e[i+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const i=this._points;for(let s=0,n=0,o=1;s<e;++s,n+=2,o+=2){const e=t[s];i[n]=e[0],i[o]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,i=this.angle,s=this.scale_x,n=this.scale_y,o=this._points,r=this._coords,a=o.length;let h,c,l,_;for(let d=0,u=1;d<a;d+=2,u+=2){let a=o[d]*s,p=o[u]*n;if(i){const t=Math.cos(i),e=Math.sin(i),s=a;a=s*t-p*e,p=s*e+p*t}a+=t,p+=e,r[d]=a,r[u]=p,0===d?(h=c=a,l=_=p):(a<h?h=a:a>c&&(c=a),p<l?l=p:p>_&&(_=p))}this._x=t,this._y=e,this._angle=i,this._scale_x=s,this._scale_y=n,this._min_x=h,this._min_y=l,this._max_x=c,this._max_y=_,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,i=this._normals,s=t.length;for(let n=0,o=1;n<s;n+=2,o+=2){const r=n+2<s?n+2:0,a=t[r]-t[n],h=t[r+1]-t[o],c=a||h?Math.sqrt(a*a+h*h):0;e[n]=a,e[o]=h,i[n]=c?h/c:0,i[o]=c?-a/c:0}this._dirty_normals=!1}}t.exports=n,t.exports.default=t.exports},function(t,e){var i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(i){var s=new Uint8Array(16);t.exports=function(){return i(s),s}}else{var n=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),n[e]=t>>>((3&e)<<3)&255;return n}}},function(t,e){for(var i=[],s=0;s<256;++s)i[s]=(s+256).toString(16).substr(1);t.exports=function(t,e){var s=e||0,n=i;return[n[t[s++]],n[t[s++]],n[t[s++]],n[t[s++]],"-",n[t[s++]],n[t[s++]],"-",n[t[s++]],n[t[s++]],"-",n[t[s++]],n[t[s++]],"-",n[t[s++]],n[t[s++]],n[t[s++]],n[t[s++]],n[t[s++]],n[t[s++]]].join("")}},function(t,e,i){"use strict";var s=this&&this.__awaiter||function(t,e,i,s){return new(i||(i=Promise))(function(n,o){function r(t){try{h(s.next(t))}catch(t){o(t)}}function a(t){try{h(s.throw(t))}catch(t){o(t)}}function h(t){t.done?n(t.value):new i(function(e){e(t.value)}).then(r,a)}h((s=s.apply(t,e||[])).next())})},n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),i(14);const o=i(19),r=i(42),a=i(6),h=n(i(43)),c=document.createElement("canvas");c.id="display",document.body.style.backgroundColor="#303030";h.default.create({zone:c,color:"blue",multitouch:!0});const l=new r.Config;c.width=l.game.width,c.height=l.game.height,c.classList.add("game-display");const _=c.getContext("2d");if(null==_)throw Error("PNH");document.body.appendChild(c);const d=a.Assets.getInstance(),u=new o.Game(l);(()=>s(this,void 0,void 0,function*(){yield d.load();let t=performance.now();!function e(){const{xView:i,yView:s,wView:n,hView:o}=u.camera;_.clearRect(i,s,n,o);const r=performance.now(),a=(r-t)/1e3;t=r,u.update(a),u.render(_),requestAnimationFrame(e)}()}))()},function(t,e,i){var s=i(15);"string"==typeof s&&(s=[[t.i,s,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};i(17)(s,n);s.locals&&(t.exports=s.locals)},function(t,e,i){(t.exports=i(16)(!1)).push([t.i,"\n@font-face {\n    font-family: 'Press Start 2P';\n    font-style: normal;\n    font-weight: 400;\n    src: url(https://fonts.gstatic.com/s/pressstart2p/v6/e3t4euO8T-267oIAQAu6jDQyK3nVivNm4I81.woff2) format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\nbody, html {\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    height: 100%;\n    font-family: 'Press Start 2P', SansSerif, Arial;\n}\n\nbody {\n    user-select: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\ncanvas {\n    border: 1px solid black;\n    image-rendering: pixelated;\n    cursor: cell;\n}\n\n.game-display {\n    position: relative;\n}\n\n.game-ui-container {\n    pointer-events: none;\n    position: absolute;\n    width: 800px;\n    height: 600px;\n}\n\n.tower-selector-container {\n    pointer-events: all;\n    position: absolute;\n    box-sizing: border-box;\n    justify-content: space-between;\n    align-items: flex-start;\n    padding: 40px 5px 10px;\n    background: url('/public/images/wall.png') repeat;\n    top: 0;\n    right: 0;\n    width: 145px;\n    height: 600px;\n}\n\n.tower-selector-title {\n    color: gold;\n    opacity: 0.75;\n    position: absolute;\n    right: 0;\n    top: 0;\n    background: url(/public/images/chest.png) no-repeat 10px 10px;\n    background-size: 20px 20px;\n    padding: 10px 0 0 30px ;\n    box-sizing: border-box;\n    width: 145px;\n    text-align: left;\n}\n\n.tower-selector {\n    background: url(/public/images/border.png) no-repeat,rgba(255,255,255,0.7);\n    background-size: 60px 60px;\n    display: inline-block;\n    width: 60px;\n    height: 60px;\n    margin-bottom: 15px;\n}\n\n.tower-selector.active {\n    box-shadow: 0 0 15px gold;\n}\n\n.tower-selector:nth-of-type(2n+1) {\n    margin-right: 15px;\n}\n",""])},function(t,e,i){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var i=function(t,e){var i=t[1]||"",s=t[3];if(!s)return i;if(e&&"function"==typeof btoa){var n=(r=s,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),o=s.sources.map(function(t){return"/*# sourceURL="+s.sourceRoot+t+" */"});return[i].concat(o).concat([n]).join("\n")}var r;return[i].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+i+"}":i}).join("")},e.i=function(t,i){"string"==typeof t&&(t=[[null,t,""]]);for(var s={},n=0;n<this.length;n++){var o=this[n][0];null!=o&&(s[o]=!0)}for(n=0;n<t.length;n++){var r=t[n];null!=r[0]&&s[r[0]]||(i&&!r[2]?r[2]=i:i&&(r[2]="("+r[2]+") and ("+i+")"),e.push(r))}},e}},function(t,e,i){var s,n,o={},r=(s=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===n&&(n=s.apply(this,arguments)),n}),a=function(t){var e={};return function(t,i){if("function"==typeof t)return t();if(void 0===e[t]){var s=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,i);if(window.HTMLIFrameElement&&s instanceof window.HTMLIFrameElement)try{s=s.contentDocument.head}catch(t){s=null}e[t]=s}return e[t]}}(),h=null,c=0,l=[],_=i(18);function d(t,e){for(var i=0;i<t.length;i++){var s=t[i],n=o[s.id];if(n){n.refs++;for(var r=0;r<n.parts.length;r++)n.parts[r](s.parts[r]);for(;r<s.parts.length;r++)n.parts.push(y(s.parts[r],e))}else{var a=[];for(r=0;r<s.parts.length;r++)a.push(y(s.parts[r],e));o[s.id]={id:s.id,refs:1,parts:a}}}}function u(t,e){for(var i=[],s={},n=0;n<t.length;n++){var o=t[n],r=e.base?o[0]+e.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};s[r]?s[r].parts.push(a):i.push(s[r]={id:r,parts:[a]})}return i}function p(t,e){var i=a(t.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var s=l[l.length-1];if("top"===t.insertAt)s?s.nextSibling?i.insertBefore(e,s.nextSibling):i.appendChild(e):i.insertBefore(e,i.firstChild),l.push(e);else if("bottom"===t.insertAt)i.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var n=a(t.insertAt.before,i);i.insertBefore(e,n)}}function f(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function m(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var s=function(){0;return i.nc}();s&&(t.attrs.nonce=s)}return v(e,t.attrs),p(t,e),e}function v(t,e){Object.keys(e).forEach(function(i){t.setAttribute(i,e[i])})}function y(t,e){var i,s,n,o;if(e.transform&&t.css){if(!(o="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=o}if(e.singleton){var r=c++;i=h||(h=m(e)),s=x.bind(null,i,r,!1),n=x.bind(null,i,r,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",v(e,t.attrs),p(t,e),e}(e),s=function(t,e,i){var s=i.css,n=i.sourceMap,o=void 0===e.convertToAbsoluteUrls&&n;(e.convertToAbsoluteUrls||o)&&(s=_(s));n&&(s+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */");var r=new Blob([s],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}.bind(null,i,e),n=function(){f(i),i.href&&URL.revokeObjectURL(i.href)}):(i=m(e),s=function(t,e){var i=e.css,s=e.media;s&&t.setAttribute("media",s);if(t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}.bind(null,i),n=function(){f(i)});return s(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;s(t=e)}else n()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=r()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var i=u(t,e);return d(i,e),function(t){for(var s=[],n=0;n<i.length;n++){var r=i[n];(a=o[r.id]).refs--,s.push(a)}t&&d(u(t,e),e);for(n=0;n<s.length;n++){var a;if(0===(a=s[n]).refs){for(var h=0;h<a.parts.length;h++)a.parts[h]();delete o[a.id]}}}};var b,g=(b=[],function(t,e){return b[t]=e,b.filter(Boolean).join("\n")});function x(t,e,i,s){var n=i?"":s.css;if(t.styleSheet)t.styleSheet.cssText=g(e,n);else{var o=document.createTextNode(n),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(o,r[e]):t.appendChild(o)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var i=e.protocol+"//"+e.host,s=i+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var n,o=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(n=0===o.indexOf("//")?o:0===o.indexOf("/")?i+o:s+o.replace(/^\.\//,""),"url("+JSON.stringify(n)+")")})}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(20),n=i(25),o=i(27),r=i(2),a=i(28),h=i(30),c=i(4),l=i(3),_=i(34),d=i(35),u=i(36),p=i(37),f=i(38),m=i(39),v=i(41),y=i(6);e.Game=class{constructor(t){this.config=t,this.riotPolice=[],this.pizzas=[],this.staticObjects=[],this.system=new l.Collisions,this.player=new s.Player(new c.Transform(new r.Vector(2050,1650),0),this),this.room={width:t.world.width,height:t.world.height,map:new o.Map(t.world.width,t.world.height)},this.createRiotPolice(),this.room.map.generate(),this.camera=new n.Camera(0,0,this.config.game.width,this.config.game.height,this.room.width,this.room.height),this.camera.follow(this.player.transform,this.config.game.width/2,this.config.game.height/2),this.createWalls(),this.createTowns(),this.createStatic(),this.boss=new m.Boss(new c.Transform(new r.Vector(3400,1300),1.5*Math.PI),this),this.house=new v.House(new c.Transform(new r.Vector(3540,1320),0),this),this.assets=y.Assets.getInstance()}renderSquare(t){t.drawImage(this.assets.get("square.png"),-this.camera.xView,-this.camera.yView,this.config.world.width,this.config.world.height)}render(t){this.renderSquare(t),this.player.render(t,this.camera),this.house.render(t,this.camera),this.boss.render(t,this.camera),this.renderRiotPolice(t),this.renderPizzas(t),this.renderWalls(t),this.renderTowns(t),this.renderStatic(t)}searchIntersection(){const t=new Map;if(this.pizzas.length&&(this.pizzas.forEach(e=>{this.riotPolice.forEach(i=>{const s=r.Vector.distance(i.transform.position,e.transform.position);r.Vector.distance(i.transform.position,e.transform.position)<800&&!e.isWaitingToEating&&!i.target&&(t.has(e)?t.get(e).push({cosmonaut:i,distance:s}):t.set(e,[{cosmonaut:i,distance:s}]))})}),t.size))for(let[e,i]of t){const t=i.reduce((t,e)=>e.distance<t?e.distance:t,i[0].distance),{cosmonaut:s}=i.find(e=>e.distance===t);s.target=e,e.isWaitingToEating=!0}}update(t){this.system.update(),this.house.update(t),this.player.update(t),this.boss.update(t),this.updateRiotPolice(t),this.camera.update()}renderRiotPolice(t){this.riotPolice.forEach(e=>{e.render(t,this.camera)})}updateRiotPolice(t){this.riotPolice.forEach(e=>{e.update(t)})}renderPizzas(t){this.pizzas.forEach(e=>{e.render(t,this.camera)})}createRiotPolice(){Array.from({length:24}).forEach((t,e)=>{const i=new c.Transform(new r.Vector(2150,760+40*e+1),1.5*Math.PI),s=new a.Cosmonaut(i,this);this.riotPolice.push(s)}),[{x:700,y:800,rotate:.5*Math.PI}].forEach(t=>{const e=new c.Transform(new r.Vector(t.x,t.y),t.rotate),i=new a.Cosmonaut(e,this);this.riotPolice.push(i)})}eatPizza(t){const e=this.pizzas.findIndex(e=>e.id===t.id);-1!==e&&this.pizzas.splice(e,1)}createPizzaObject(t){this.pizzas.length>=5||(this.pizzas.push(new h.Pizza(new c.Transform(new r.Vector(t.x,t.y),0))),this.searchIntersection())}createWalls(){this.walls=d.WALLS_LIST.map((t,e)=>{const i=new r.Vector(t.x,t.y),s=new c.Transform(i,t.rotate);return new _.Wall(s,this)})}renderWalls(t){this.walls.forEach(e=>e.render(t,this.camera))}createTowns(){this.towns=u.TOWN_LIST.map((t,e)=>{const i=new r.Vector(t.x,t.y),s=new c.Transform(i,t.rotate);return new p.Town(s,this)})}renderTowns(t){this.towns.forEach(e=>e.render(t,this.camera))}createStatic(){this.staticObjects.push(new f.StaticObject("salsa.svg",89,89,1.5*Math.PI,new r.Vector(1550,1250),this)),this.staticObjects.push(new f.StaticObject("dodo.svg",50,70,.4*Math.PI,new r.Vector(1350,1420),this)),this.staticObjects.push(new f.StaticObject("sheremet.svg",120,120,0,new r.Vector(1650,1520),this)),this.staticObjects.push(new f.StaticObject("ten-gubernatora.svg",70,70,0,new r.Vector(1380,1660),this)),this.staticObjects.push(new f.StaticObject("maxim_menailo.svg",90,90,0,new r.Vector(1350,980),this)),this.staticObjects.push(new f.StaticObject("devi-u-popa.svg",50,90,.2*Math.PI,new r.Vector(1396,1020),this)),this.staticObjects.push(new f.StaticObject("roizman.svg",120,120,0,new r.Vector(1280,1520),this)),this.staticObjects.push(new f.StaticObject("mer.svg",160,160,0,new r.Vector(1860,1780),this)),this.staticObjects.push(new f.StaticObject("rinat.svg",70,70,0,new r.Vector(1750,1230),this)),this.staticObjects.push(new f.StaticObject("tsarikov.svg",55,85,0,new r.Vector(1780,1130),this)),this.staticObjects.push(new f.StaticObject("naum-blik.svg",55,85,0,new r.Vector(2040,890),this)),this.staticObjects.push(new f.StaticObject("ded.svg",180,130,0,new r.Vector(1895,1450),this)),this.staticObjects.push(new f.StaticObject("deva-vesna.svg",70,90,0,new r.Vector(1895,1250),this)),this.staticObjects.push(new f.StaticObject("shahrin.svg",90,90,0,new r.Vector(1350,650),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,0,new r.Vector(1350,850),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,0,new r.Vector(850,980),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,0,new r.Vector(1780,1450),this)),this.staticObjects.push(new f.StaticObject("devi-u-popa.svg",50,90,.2*Math.PI,new r.Vector(950,980),this)),this.staticObjects.push(new f.StaticObject("titushki.svg",400,400,1.5*Math.PI,new r.Vector(3550,1300),this,!0)),this.staticObjects.push(new f.StaticObject("we.svg",190,215,1.9*Math.PI,new r.Vector(350,1300),this)),this.staticObjects.push(new f.StaticObject("yandex-eda-tri-parnya.svg",200,85,1.9*Math.PI,new r.Vector(550,1300),this)),this.staticObjects.push(new f.StaticObject("yandex-eda-tri-parnya.svg",200,85,1.9*Math.PI,new r.Vector(690,820),this)),this.staticObjects.push(new f.StaticObject("dodo.svg",50,70,.4*Math.PI,new r.Vector(850,720),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,1.15*Math.PI,new r.Vector(940,720),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new r.Vector(940,960),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new r.Vector(1780,1024),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new r.Vector(1880,1144),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new r.Vector(750,1300),this))}renderStatic(t){this.staticObjects.forEach(e=>e.render(t,this.camera))}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),n=i(1),o=i(2),r=i(3);class a extends n.Drawer{render(t){t.drawImage(this.assets.get("player.svg"),-18,-48,52,63)}}class h extends s.GameObject{constructor(t,e){super(t,new a(t),e.system.createCircle(t.position.x,t.position.y,25)),this.game=e,this.speed=400,this.pressedKeys={},this.damageCollider=e.system.createPolygon(t.position.x,t.position.y,[[-10,-30],[-10,30],[0,0]],t.angle),this.listen()}listen(){document.addEventListener("keydown",t=>{this.pressedKeys[t.keyCode]=!0}),document.addEventListener("keyup",t=>{this.pressedKeys[t.keyCode]=!1}),document.addEventListener("mousemove",t=>{const e=this.game.camera,i=new o.Vector(t.pageX+e.xView,t.pageY+e.yView);this.transform.lookAt(i)}),document.addEventListener("click",t=>{const e=this.game.walls.find(t=>{const e=new r.Result;return this.damageCollider.collides(t.collider,e)});e?e.takeDamage():this.game.createPizzaObject(this.transform.position)})}render(t,e){super.render(t,e),this.damageCollider&&(t.rotate(-this.transform.angle),t.translate(-this.transform.position.x,-this.transform.position.y),t.strokeStyle="red",t.beginPath(),this.damageCollider.draw(t),t.stroke(),t.setTransform(1,0,0,1,0,0))}get direction(){let t=o.Vector.zero();return Object.keys(h.directions).forEach(e=>{(this.pressedKeys[e]||!1)&&(t=t.add(new o.Vector(...h.directions[e])))}),t}update(t){super.update(t);const e=this.direction.multiple(this.speed).multiple(t);this.transform.setPosition(this.transform.position.add(e)),this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y,this.damageCollider.x=this.transform.position.x,this.damageCollider.y=this.transform.position.y,this.damageCollider.angle=this.transform.angle,this.game.riotPolice.forEach(t=>{const e=new r.Result;if(this.collider.collides(t.collider,e)){const t=new o.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}}),this.game.walls.forEach(t=>{const e=new r.Result;if(this.collider.collides(t.collider,e)){if(t.hp<=0)return;const i=new o.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(i))}}),this.game.towns.forEach(t=>{const e=new r.Result;if(this.collider.collides(t.collider,e)){const t=new o.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}}),this.game.staticObjects.forEach(t=>{if(t.offColider)return;const e=new r.Result;if(this.collider.collides(t.static.collider,e)){const t=new o.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}})}}h.directions={87:[0,-1],65:[-1,0],83:[0,1],68:[1,0]},e.Player=h},function(t,e,i){const s=i(22);t.exports=class{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const i=t._polygon,n=t.x,o=t.y;i&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const r=t._bvh_padding,a=i?0:t.radius*t.scale,h=(i?t._min_x:n-a)-r,c=(i?t._min_y:o-a)-r,l=(i?t._max_x:n+a)+r,_=(i?t._max_y:o+a)+r;t._bvh_min_x=h,t._bvh_min_y=c,t._bvh_max_x=l,t._bvh_max_y=_;let d=this._hierarchy,u=0;if(d)for(;;){if(!d._bvh_branch){const e=d._bvh_parent,i=d._bvh_min_x,n=d._bvh_min_y,o=d._bvh_max_x,r=d._bvh_max_y,a=d._bvh_parent=t._bvh_parent=s.getBranch();a._bvh_parent=e,a._bvh_left=d,a._bvh_right=t,a._bvh_sort=u++,a._bvh_min_x=h<i?h:i,a._bvh_min_y=c<n?c:n,a._bvh_max_x=l>o?l:o,a._bvh_max_y=_>r?_:r,e?e._bvh_left===d?e._bvh_left=a:e._bvh_right=a:this._hierarchy=a;break}{const t=d._bvh_left,e=t._bvh_min_y,i=t._bvh_max_x,s=t._bvh_max_y,n=h<t._bvh_min_x?h:t._bvh_min_x,o=c<e?c:e,r=l>i?l:i,a=_>s?_:s,p=(r-n)*(a-o)-(i-t._bvh_min_x)*(s-e),f=d._bvh_right,m=f._bvh_min_x,v=f._bvh_min_y,y=f._bvh_max_x,b=f._bvh_max_y,g=h<m?h:m,x=c<v?c:v,w=l>y?l:y,O=_>b?_:b,P=(w-g)*(O-x)-(y-m)*(b-v);d._bvh_sort=u++,d._bvh_min_x=n<g?n:g,d._bvh_min_y=o<x?o:x,d._bvh_max_x=r>w?r:w,d._bvh_max_y=a>O?a:O,d=p<=P?t:f}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const i=t._bvh_parent,n=i._bvh_parent,o=i._bvh_left,r=o===t?i._bvh_right:o;if(r._bvh_parent=n,r._bvh_branch&&(r._bvh_sort=i._bvh_sort),n){n._bvh_left===i?n._bvh_left=r:n._bvh_right=r;let t=n;for(;t;){const e=t._bvh_left,i=e._bvh_min_x,s=e._bvh_min_y,n=e._bvh_max_x,o=e._bvh_max_y,r=t._bvh_right,a=r._bvh_min_x,h=r._bvh_min_y,c=r._bvh_max_x,l=r._bvh_max_y;t._bvh_min_x=i<a?i:a,t._bvh_min_y=s<h?s:h,t._bvh_max_x=n>c?n:c,t._bvh_max_y=o>l?o:l,t=t._bvh_parent}}else this._hierarchy=r;s.releaseBranch(i)}update(){const t=this._bodies,e=t.length;for(let i=0;i<e;++i){const e=t[i];let s=!1;if(s||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,s=!0),!s){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const i=e.x,n=e.y,o=t?0:e.radius*e.scale,r=t?e._min_x:i-o,a=t?e._min_y:n-o,h=t?e._max_x:i+o,c=t?e._max_y:n+o;s=r<e._bvh_min_x||a<e._bvh_min_y||h>e._bvh_max_x||c>e._bvh_max_y}s&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],i=t._bvh_min_x,s=t._bvh_min_y,n=t._bvh_max_x,o=t._bvh_max_y;let r=this._hierarchy,a=!0;if(!r||!r._bvh_branch)return e;for(;r;){if(a){a=!1;let t=r._bvh_branch?r._bvh_left:null;for(;t&&t._bvh_max_x>=i&&t._bvh_max_y>=s&&t._bvh_min_x<=n&&t._bvh_min_y<=o;)t=(r=t)._bvh_branch?r._bvh_left:null}const h=r._bvh_branch,c=h?r._bvh_right:null;if(c&&c._bvh_max_x>i&&c._bvh_max_y>s&&c._bvh_min_x<n&&c._bvh_min_y<o)r=c,a=!0;else{h||r===t||e.push(r);let i=r._bvh_parent;if(!i)break;for(;i&&i._bvh_right===r;)i=(r=i)._bvh_parent;r=i}}return e}draw(t){const e=this._bodies,i=e.length;for(let s=0;s<i;++s)e[s].draw(t)}drawBVH(t){let e=this._hierarchy,i=!0;for(;e;){if(i){i=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const s=e._bvh_branch,n=e._bvh_min_x,o=e._bvh_min_y,r=e._bvh_max_x,a=e._bvh_max_y,h=s?e._bvh_right:null;if(t.moveTo(n,o),t.lineTo(r,o),t.lineTo(r,a),t.lineTo(n,a),t.lineTo(n,o),h)e=h,i=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}},t.exports.default=t.exports},function(t,e){const i=[];class s{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return i.length?i.pop():new s}static releaseBranch(t){i.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}t.exports=s,t.exports.default=t.exports},function(t,e,i){const s=i(7);t.exports=class extends s{constructor(t=0,e=0,i=0,s=1,n=0){super(t,e,n),this.radius=i,this.scale=s}draw(t){const e=this.x,i=this.y,s=this.radius*this.scale;t.moveTo(e+s,i),t.arc(e,i,s,0,2*Math.PI)}},t.exports.default=t.exports},function(t,e,i){const s=i(10);class n extends s{constructor(t=0,e=0,i=0){super(t,e,[[0,0]],0,1,1,i),this._point=!0}}n.prototype.setPoints=void 0,t.exports=n,t.exports.default=t.exports},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(26);var n={NONE:"none",HORIZONTAL:"horizontal",VERTICAL:"vertical",BOTH:"both"};e.Camera=class{constructor(t,e,i,o,r,a){this.xView=t||0,this.yView=e||0,this.xDeadZone=0,this.yDeadZone=0,this.wView=i,this.hView=o,this.axis=n.BOTH,this.followed=null,this.viewportRect=new s.Rectangle(this.xView,this.yView,this.wView,this.hView),this.worldRect=new s.Rectangle(0,0,r,a)}follow(t,e,i){this.followed=t,this.xDeadZone=e,this.yDeadZone=i}update(){null!=this.followed&&(this.axis!=n.HORIZONTAL&&this.axis!=n.BOTH||(this.followed.position.x-this.xView+this.xDeadZone>this.wView?this.xView=this.followed.position.x-(this.wView-this.xDeadZone):this.followed.position.x-this.xDeadZone<this.xView&&(this.xView=this.followed.position.x-this.xDeadZone)),this.axis!=n.VERTICAL&&this.axis!=n.BOTH||(this.followed.position.y-this.yView+this.yDeadZone>this.hView?this.yView=this.followed.position.y-(this.hView-this.yDeadZone):this.followed.position.y-this.yDeadZone<this.yView&&(this.yView=this.followed.position.y-this.yDeadZone))),this.viewportRect.set(this.xView,this.yView),this.viewportRect.within(this.worldRect)||(this.viewportRect.left<this.worldRect.left&&(this.xView=this.worldRect.left),this.viewportRect.top<this.worldRect.top&&(this.yView=this.worldRect.top),this.viewportRect.right>this.worldRect.right&&(this.xView=this.worldRect.right-this.wView),this.viewportRect.bottom>this.worldRect.bottom&&(this.yView=this.worldRect.bottom-this.hView))}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Rectangle=class{constructor(t,e,i,s){this.left=t||0,this.top=e||0,this.width=i||0,this.height=s||0,this.right=this.left+this.width,this.bottom=this.top+this.height}set(t,e,i,s){this.left=t,this.top=e,this.width=i||this.width,this.height=s||this.height,this.right=this.left+this.width,this.bottom=this.top+this.height}within(t){return t.left<=this.left&&t.right>=this.right&&t.top<=this.top&&t.bottom>=this.bottom}overlaps(t){return this.left<t.right&&t.left<this.right&&this.top<t.bottom&&t.top<this.bottom}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Map=class{constructor(t,e){this.width=t,this.height=e,this.image=null}generate(){var t=document.createElement("canvas").getContext("2d");t.canvas.width=this.width,t.canvas.height=this.height;var e=1+~~(this.width/44),i=1+~~(this.height/44),s="black";t.save(),t.fillStyle="black";for(var n=0,o=0;o<e;n+=44,o++){t.beginPath();for(var r=0,a=0;a<i;r+=44,a++)t.rect(n,r,42,42);s="#fff",t.fillStyle=s,t.fill(),t.closePath()}t.restore(),this.image=new Image,this.image.src=t.canvas.toDataURL("image/png"),t=null}draw(t,e,i){var s,n,o,r,a,h;s=e,n=i,o=t.canvas.width,r=t.canvas.height,this.image.width-s<o&&(o=this.image.width-s),this.image.height-n<r&&(r=this.image.height-n),a=o,h=r,t.drawImage(this.image,s,n,o,r,0,0,a,h)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),n=i(1),o=i(4),r=i(2),a=i(29),h=i(3);class c extends n.Drawer{render(t){t.drawImage(this.assets.get("cosmonaut.svg"),-30,-55,62,85)}}e.Cosmonaut=class extends s.GameObject{constructor(t,e){super(t,new c(t),e.system.createCircle(t.position.x,t.position.y,15)),this.game=e,this.speed=a.getRandomBeetwen(70,100),this.target=null,this._transform=o.Transform.clone(t),window.cosmonaut=this}get direction(){let t=r.Vector.zero();const e=this.target?this.target.transform.position:this._transform.position;return r.Vector.distance(this.transform.position,e)>=5?(t=e.sub(this.transform.position),this.transform.lookAt(e)):(this.target&&(this.game.eatPizza(this.target),this.target=null),this.transform.rotate(this._transform.angle)),t.normalize()}update(t){super.update(t);const e=this.direction.multiple(this.speed*t);this.transform.setPosition(this.transform.position.add(e)),this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y,this.game.walls.forEach(t=>{const e=new h.Result;if(this.collider.collides(t.collider,e)){if(t.hp<=0)return;const i=new r.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y+5);this.transform.setPosition(this.transform.position.add(i))}}),this.game.towns.forEach(t=>{const e=new h.Result;if(this.collider.collides(t.collider,e)){const t=new r.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y+5);this.transform.setPosition(this.transform.position.add(t))}}),this.game.staticObjects.forEach(t=>{const e=new h.Result;if(this.collider.collides(t.static.collider,e)){const t=new r.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}})}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.drawCircle=function(t,e,i,s,n=!0){t.beginPath(),t.arc(e,i,s,0,2*Math.PI),n?t.fill():t.stroke()},e.drawTriangle=function(t,e,i,s,n=!0){t.beginPath(),t.moveTo(e,i),t.arc(e,i,s,0,Math.PI/3),n?t.fill():t.stroke()},e.getRandomBeetwen=function(t,e){return Math.random()*e+t}},function(t,e,i){"use strict";var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(31)),o=i(0),r=i(1);class a extends r.Drawer{render(t){t.drawImage(this.assets.get("pizza.svg"),-15,-15,30,30)}}e.PizzaDrawer=a;e.Pizza=class extends o.GameObject{constructor(t){super(t,new a(t)),this.id=n.default(),this.isWaitingToEating=!1}}},function(t,e,i){var s=i(32),n=i(33),o=n;o.v1=s,o.v4=n,t.exports=o},function(t,e,i){var s,n,o=i(11),r=i(12),a=0,h=0;t.exports=function(t,e,i){var c=e&&i||0,l=e||[],_=(t=t||{}).node||s,d=void 0!==t.clockseq?t.clockseq:n;if(null==_||null==d){var u=o();null==_&&(_=s=[1|u[0],u[1],u[2],u[3],u[4],u[5]]),null==d&&(d=n=16383&(u[6]<<8|u[7]))}var p=void 0!==t.msecs?t.msecs:(new Date).getTime(),f=void 0!==t.nsecs?t.nsecs:h+1,m=p-a+(f-h)/1e4;if(m<0&&void 0===t.clockseq&&(d=d+1&16383),(m<0||p>a)&&void 0===t.nsecs&&(f=0),f>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=p,h=f,n=d;var v=(1e4*(268435455&(p+=122192928e5))+f)%4294967296;l[c++]=v>>>24&255,l[c++]=v>>>16&255,l[c++]=v>>>8&255,l[c++]=255&v;var y=p/4294967296*1e4&268435455;l[c++]=y>>>8&255,l[c++]=255&y,l[c++]=y>>>24&15|16,l[c++]=y>>>16&255,l[c++]=d>>>8|128,l[c++]=255&d;for(var b=0;b<6;++b)l[c+b]=_[b];return e||r(l)}},function(t,e,i){var s=i(11),n=i(12);t.exports=function(t,e,i){var o=e&&i||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var r=(t=t||{}).random||(t.rng||s)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e)for(var a=0;a<16;++a)e[o+a]=r[a];return e||n(r)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),n=i(1),o=i(5);class r extends n.Drawer{constructor(){super(...arguments),this.collider=null,this.camera=null,this.hp=r.MAX_HP,this.width=o.WALL_WIDTH,this.height=o.WALL_HEIGHT,this.map={5:"wall.svg",4:"wall1.svg",3:"wall2.svg",2:"wall3.svg",1:"wall4.svg"}}render(t){const e=this.map[this.hp]?this.map[this.hp]:"wall5.svg";t.drawImage(this.assets.get(e),-this.width,-this.height/2,this.width,this.height)}}r.MAX_HP=5;e.Wall=class extends s.GameObject{constructor(t,e){super(t,new r(t),e.system.createPolygon(t.position.x,t.position.y,[[0,-o.WALL_HEIGHT/2],[-o.WALL_WIDTH,-o.WALL_HEIGHT/2]],t.angle)),this.transform=t,this.game=e,this.hp=5,this.drawer.collider=this.collider,this.drawer.camera=this.game.camera}takeDamage(){this.hp--,this.drawer.hp--}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(5);e.WALLS_LIST=(()=>{const t=[{x:s.WALL_X,y:s.WALL_START-1,rotate:1.5*Math.PI}];for(let e=0;e<4;e++)t.push({x:s.WALL_X,y:t[e].y+s.WALL_WIDTH,rotate:1.5*Math.PI});const e=[{x:s.WALL_X+125,y:s.WALL_START-14,rotate:.039}];for(let t=0;t<16;t++)e.push({x:e[t].x+119.5,y:e[t].y+3.6,rotate:.039});const i=[{x:s.WALL_X,y:t[t.length-1].y+140,rotate:1.07*Math.PI}];for(let t=0;t<9;t++)i.push({x:i[t].x+116,y:i[t].y+26,rotate:1.07*Math.PI});const n=[{x:i[i.length-1].x+114,y:i[t.length-1].y+154,rotate:.95*Math.PI}];for(let t=0;t<2;t++)n.push({x:n[t].x+118,y:n[t].y-18,rotate:.95*Math.PI});const o=[{x:n[n.length-1].x+150,y:n[n.length-1].y-30,rotate:.74*Math.PI}];for(let t=0;t<5;t++)o.push({x:o[t].x+82,y:o[t].y-84,rotate:.75*Math.PI});const r=[{x:o[o.length-1].x+96,y:o[o.length-1].y-100,rotate:-1.5*Math.PI},{x:o[o.length-1].x+96,y:o[o.length-1].y-215,rotate:-1.5*Math.PI}];return t.concat(i).concat(n).concat(o).concat(r).concat(e)})()},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(5);e.TOWN_LIST=[{x:s.WALL_X,y:s.TOWN_START,rotate:1.5*Math.PI},{x:s.WALL_X,y:s.TOWN_START+5*s.WALL_WIDTH+36,rotate:1.5*Math.PI},{x:3766,y:1734,rotate:.74*Math.PI},{rotate:.75*Math.PI,x:4281,y:1208},{x:4285,y:960,rotate:1.5*Math.PI}]},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),n=i(1),o=i(5);class r extends n.Drawer{constructor(){super(...arguments),this.width=o.TOWN_HEIGHT,this.height=o.TOWN_HEIGHT}render(t){t.drawImage(this.assets.get("town.svg"),-this.width/2,-this.height/2,this.width,this.height)}}e.Town=class extends s.GameObject{constructor(t,e){super(t,new r(t),e.system.createCircle(t.position.x,t.position.y,20)),this.transform=t}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),n=i(1),o=i(4);class r extends n.Drawer{constructor(t,e,i,s){super(t),this.imgPath=e,this.w=i,this.h=s}render(t){t.drawImage(this.assets.get(this.imgPath),-this.w/2,-this.h/2,this.w,this.h)}}class a extends s.GameObject{constructor(t,e,i,s,n){super(t,new r(t,e,i,s),n.system.createCircle(t.position.x,t.position.y,(i>s?i:s)/2)),this.transform=t,this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y}}e.Static=a;e.StaticObject=class{constructor(t,e,i,s,n,r,h=!1){this.offColider=h;const c=new o.Transform(n,s);this.static=new a(c,t,e,i,r)}render(t,e){this.static.render(t,e)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),n=i(1),o=i(4),r=i(2),a=i(3);i(40);class h extends n.Drawer{render(t){t.drawImage(this.assets.get("boss.svg"),-30,-55,62,85)}}e.Boss=class extends s.GameObject{constructor(t,e){super(t,new h(t),e.system.createCircle(t.position.x,t.position.y,200)),this.game=e,this.speed=20,this.directionVector=null,this._transform=o.Transform.clone(t),window.cosmonaut=this}get direction(){return r.Vector.zero(),this.directionVector?this.directionVector:r.Vector.zero()}update(t){super.update(t);const e=this.direction.multiple(this.speed*t);this.transform.setPosition(this.transform.position.add(e)),this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y;const i=new a.Result;if(this.collider.collides(this.game.player.collider,i)){this.directionVector=new r.Vector(0,-5);const t=new r.Vector(-i.overlap*i.overlap_x,-i.overlap*i.overlap_y/2);this.transform.setPosition(this.transform.position.add(t))}}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Animation=class{constructor(t,e,i,s=!1){this.value=t,this.target=e,this.duration=i,this.reverse=s,this.isStopped=!1,this.currentTime=this.timeout,this.startValue=t,this.startTarget=e,this.stepValue=(this.target-this.startValue)/60,this.timeout=this.stepValue/this.duration,this.currentTime=this.timeout}update(t){this.isStopped||(console.log("ct",this.currentTime,t),this.currentTime-=t,this.currentTime<=0&&(this.currentTime=this.timeout,this.value+=this.value>this.target?-this.stepValue:this.stepValue,this.step()),this.value>=this.target&&(this.reverse?this.target=this.target===this.startTarget?this.startValue:this.startTarget:this.isStopped=!0))}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const s=i(0),n=i(1),o=i(44);class r extends n.Drawer{constructor(){super(...arguments),this.hide=!1}render(t){this.hide&&(t.globalAlpha=.3);const e=this.assets.get("house.svg");t.drawImage(e,-e.width/2,-e.height/2,e.width,e.height),t.globalAlpha=1}}e.HouseDrawer=r;e.House=class extends s.GameObject{constructor(t,e){super(t,new r(t),e.system.createCircle(t.position.x,t.position.y,200)),this.game=e}update(t){super.update(t);const e=new o.Result;this.drawer.hide=!!this.collider.collides(this.game.player.collider,e)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Config=class{constructor(){this.game={width:window.innerWidth,height:window.innerHeight},this.world={width:4444,height:2218}}}},function(t,e,i){window,t.exports=function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";i.r(e);var s,n=function(t,e){var i=e.x-t.x,s=e.y-t.y;return Math.sqrt(i*i+s*s)},o=function(t){return t*(Math.PI/180)},r=function(t,e,i){for(var s,n=e.split(/[ ,]+/g),o=0;o<n.length;o+=1)s=n[o],t.addEventListener?t.addEventListener(s,i,!1):t.attachEvent&&t.attachEvent(s,i)},a=function(t,e,i){for(var s,n=e.split(/[ ,]+/g),o=0;o<n.length;o+=1)s=n[o],t.removeEventListener?t.removeEventListener(s,i):t.detachEvent&&t.detachEvent(s,i)},h=function(t){return t.preventDefault(),t.type.match(/^touch/)?t.changedTouches:t},c=function(){return{x:void 0!==window.pageXOffset?window.pageXOffset:(document.documentElement||document.body.parentNode||document.body).scrollLeft,y:void 0!==window.pageYOffset?window.pageYOffset:(document.documentElement||document.body.parentNode||document.body).scrollTop}},l=function(t,e){e.top||e.right||e.bottom||e.left?(t.style.top=e.top,t.style.right=e.right,t.style.bottom=e.bottom,t.style.left=e.left):(t.style.left=e.x+"px",t.style.top=e.y+"px")},_=function(t,e,i){var s=d(t);for(var n in s)if(s.hasOwnProperty(n))if("string"==typeof e)s[n]=e+" "+i;else{for(var o="",r=0,a=e.length;r<a;r+=1)o+=e[r]+" "+i+", ";s[n]=o.slice(0,-2)}return s},d=function(t){var e={};return e[t]="",["webkit","Moz","o"].forEach(function(i){e[i+t.charAt(0).toUpperCase()+t.slice(1)]=""}),e},u=function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i]);return t},p=function(t,e){if(t.length)for(var i=0,s=t.length;i<s;i+=1)e(t[i]);else e(t)},f=!!("ontouchstart"in window),m=!!window.PointerEvent,v=!!window.MSPointerEvent,y={start:"mousedown",move:"mousemove",end:"mouseup"},b={};function g(){}m?s={start:"pointerdown",move:"pointermove",end:"pointerup, pointercancel"}:v?s={start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:f?(s={start:"touchstart",move:"touchmove",end:"touchend, touchcancel"},b=y):s=y,g.prototype.on=function(t,e){var i,s=t.split(/[ ,]+/g);this._handlers_=this._handlers_||{};for(var n=0;n<s.length;n+=1)i=s[n],this._handlers_[i]=this._handlers_[i]||[],this._handlers_[i].push(e);return this},g.prototype.off=function(t,e){return this._handlers_=this._handlers_||{},void 0===t?this._handlers_={}:void 0===e?this._handlers_[t]=null:this._handlers_[t]&&this._handlers_[t].indexOf(e)>=0&&this._handlers_[t].splice(this._handlers_[t].indexOf(e),1),this},g.prototype.trigger=function(t,e){var i,s=this,n=t.split(/[ ,]+/g);s._handlers_=s._handlers_||{};for(var o=0;o<n.length;o+=1)i=n[o],s._handlers_[i]&&s._handlers_[i].length&&s._handlers_[i].forEach(function(t){t.call(s,{type:i,target:s},e)})},g.prototype.config=function(t){this.options=this.defaults||{},t&&(this.options=function(t,e){var i={};for(var s in t)t.hasOwnProperty(s)&&e.hasOwnProperty(s)?i[s]=e[s]:t.hasOwnProperty(s)&&(i[s]=t[s]);return i}(this.options,t))},g.prototype.bindEvt=function(t,e){var i=this;return i._domHandlers_=i._domHandlers_||{},i._domHandlers_[e]=function(){"function"==typeof i["on"+e]?i["on"+e].apply(i,arguments):console.warn('[WARNING] : Missing "on'+e+'" handler.')},r(t,s[e],i._domHandlers_[e]),b[e]&&r(t,b[e],i._domHandlers_[e]),i},g.prototype.unbindEvt=function(t,e){return this._domHandlers_=this._domHandlers_||{},a(t,s[e],this._domHandlers_[e]),b[e]&&a(t,b[e],this._domHandlers_[e]),delete this._domHandlers_[e],this};var x=g;function w(t,e){return this.identifier=e.identifier,this.position=e.position,this.frontPosition=e.frontPosition,this.collection=t,this.defaults={size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,mode:"dynamic",zone:document.body,lockX:!1,lockY:!1},this.config(e),"dynamic"===this.options.mode&&(this.options.restOpacity=0),this.id=w.id,w.id+=1,this.buildEl().stylize(),this.instance={el:this.ui.el,on:this.on.bind(this),off:this.off.bind(this),show:this.show.bind(this),hide:this.hide.bind(this),add:this.addToDom.bind(this),remove:this.removeFromDom.bind(this),destroy:this.destroy.bind(this),resetDirection:this.resetDirection.bind(this),computeDirection:this.computeDirection.bind(this),trigger:this.trigger.bind(this),position:this.position,frontPosition:this.frontPosition,ui:this.ui,identifier:this.identifier,id:this.id,options:this.options},this.instance}w.prototype=new x,w.constructor=w,w.id=0,w.prototype.buildEl=function(t){return this.ui={},this.options.dataOnly?this:(this.ui.el=document.createElement("div"),this.ui.back=document.createElement("div"),this.ui.front=document.createElement("div"),this.ui.el.className="nipple collection_"+this.collection.id,this.ui.back.className="back",this.ui.front.className="front",this.ui.el.setAttribute("id","nipple_"+this.collection.id+"_"+this.id),this.ui.el.appendChild(this.ui.back),this.ui.el.appendChild(this.ui.front),this)},w.prototype.stylize=function(){if(this.options.dataOnly)return this;var t=this.options.fadeTime+"ms",e=function(t,e){var i=d("borderRadius");for(var s in i)i.hasOwnProperty(s)&&(i[s]="50%");return i}(),i=_("transition","opacity",t),s={};return s.el={position:"absolute",opacity:this.options.restOpacity,display:"block",zIndex:999},s.back={position:"absolute",display:"block",width:this.options.size+"px",height:this.options.size+"px",marginLeft:-this.options.size/2+"px",marginTop:-this.options.size/2+"px",background:this.options.color,opacity:".5"},s.front={width:this.options.size/2+"px",height:this.options.size/2+"px",position:"absolute",display:"block",marginLeft:-this.options.size/4+"px",marginTop:-this.options.size/4+"px",background:this.options.color,opacity:".5"},u(s.el,i),u(s.back,e),u(s.front,e),this.applyStyles(s),this},w.prototype.applyStyles=function(t){for(var e in this.ui)if(this.ui.hasOwnProperty(e))for(var i in t[e])this.ui[e].style[i]=t[e][i];return this},w.prototype.addToDom=function(){return this.options.dataOnly||document.body.contains(this.ui.el)?this:(this.options.zone.appendChild(this.ui.el),this)},w.prototype.removeFromDom=function(){return this.options.dataOnly||!document.body.contains(this.ui.el)?this:(this.options.zone.removeChild(this.ui.el),this)},w.prototype.destroy=function(){clearTimeout(this.removeTimeout),clearTimeout(this.showTimeout),clearTimeout(this.restTimeout),this.trigger("destroyed",this.instance),this.removeFromDom(),this.off()},w.prototype.show=function(t){var e=this;return e.options.dataOnly?e:(clearTimeout(e.removeTimeout),clearTimeout(e.showTimeout),clearTimeout(e.restTimeout),e.addToDom(),e.restCallback(),setTimeout(function(){e.ui.el.style.opacity=1},0),e.showTimeout=setTimeout(function(){e.trigger("shown",e.instance),"function"==typeof t&&t.call(this)},e.options.fadeTime),e)},w.prototype.hide=function(t){var e=this;return e.options.dataOnly?e:(e.ui.el.style.opacity=e.options.restOpacity,clearTimeout(e.removeTimeout),clearTimeout(e.showTimeout),clearTimeout(e.restTimeout),e.removeTimeout=setTimeout(function(){var i="dynamic"===e.options.mode?"none":"block";e.ui.el.style.display=i,"function"==typeof t&&t.call(e),e.trigger("hidden",e.instance)},e.options.fadeTime),e.options.restJoystick&&e.restPosition(),e)},w.prototype.restPosition=function(t){var e=this;e.frontPosition={x:0,y:0};var i=e.options.fadeTime+"ms",s={};s.front=_("transition",["top","left"],i);var n={front:{}};n.front={left:e.frontPosition.x+"px",top:e.frontPosition.y+"px"},e.applyStyles(s),e.applyStyles(n),e.restTimeout=setTimeout(function(){"function"==typeof t&&t.call(e),e.restCallback()},e.options.fadeTime)},w.prototype.restCallback=function(){var t={};t.front=_("transition","none",""),this.applyStyles(t),this.trigger("rested",this.instance)},w.prototype.resetDirection=function(){this.direction={x:!1,y:!1,angle:!1}},w.prototype.computeDirection=function(t){var e,i,s,n=t.angle.radian,o=Math.PI/4,r=Math.PI/2;if(n>o&&n<3*o&&!t.lockX?e="up":n>-o&&n<=o&&!t.lockY?e="left":n>3*-o&&n<=-o&&!t.lockX?e="down":t.lockY||(e="right"),t.lockY||(i=n>-r&&n<r?"left":"right"),t.lockX||(s=n>0?"up":"down"),t.force>this.options.threshold){var a,h={};for(a in this.direction)this.direction.hasOwnProperty(a)&&(h[a]=this.direction[a]);var c={};for(a in this.direction={x:i,y:s,angle:e},t.direction=this.direction,h)h[a]===this.direction[a]&&(c[a]=!0);if(c.x&&c.y&&c.angle)return t;c.x&&c.y||this.trigger("plain",t),c.x||this.trigger("plain:"+i,t),c.y||this.trigger("plain:"+s,t),c.angle||this.trigger("dir dir:"+e,t)}return t};var O=w;function P(t,e){return this.nipples=[],this.idles=[],this.actives=[],this.ids=[],this.pressureIntervals={},this.manager=t,this.id=P.id,P.id+=1,this.defaults={zone:document.body,multitouch:!1,maxNumberOfNipples:10,mode:"dynamic",position:{top:0,left:0},catchDistance:200,size:100,threshold:.1,color:"white",fadeTime:250,dataOnly:!1,restJoystick:!0,restOpacity:.5,lockX:!1,lockY:!1},this.config(e),"static"!==this.options.mode&&"semi"!==this.options.mode||(this.options.multitouch=!1),this.options.multitouch||(this.options.maxNumberOfNipples=1),this.updateBox(),this.prepareNipples(),this.bindings(),this.begin(),this.nipples}P.prototype=new x,P.constructor=P,P.id=0,P.prototype.prepareNipples=function(){var t=this.nipples;t.on=this.on.bind(this),t.off=this.off.bind(this),t.options=this.options,t.destroy=this.destroy.bind(this),t.ids=this.ids,t.id=this.id,t.processOnMove=this.processOnMove.bind(this),t.processOnEnd=this.processOnEnd.bind(this),t.get=function(e){if(void 0===e)return t[0];for(var i=0,s=t.length;i<s;i+=1)if(t[i].identifier===e)return t[i];return!1}},P.prototype.bindings=function(){this.bindEvt(this.options.zone,"start"),this.options.zone.style.touchAction="none",this.options.zone.style.msTouchAction="none"},P.prototype.begin=function(){var t=this.options;if("static"===t.mode){var e=this.createNipple(t.position,this.manager.getIdentifier());e.add(),this.idles.push(e)}},P.prototype.createNipple=function(t,e){var i=c(),s={},n=this.options;if(t.x&&t.y)s={x:t.x-(i.x+this.box.left),y:t.y-(i.y+this.box.top)};else if(t.top||t.right||t.bottom||t.left){var o=document.createElement("DIV");o.style.display="hidden",o.style.top=t.top,o.style.right=t.right,o.style.bottom=t.bottom,o.style.left=t.left,o.style.position="absolute",n.zone.appendChild(o);var r=o.getBoundingClientRect();n.zone.removeChild(o),s=t,t={x:r.left+i.x,y:r.top+i.y}}var a=new O(this,{color:n.color,size:n.size,threshold:n.threshold,fadeTime:n.fadeTime,dataOnly:n.dataOnly,restJoystick:n.restJoystick,restOpacity:n.restOpacity,mode:n.mode,identifier:e,position:t,zone:n.zone,frontPosition:{x:0,y:0}});return n.dataOnly||(l(a.ui.el,s),l(a.ui.front,a.frontPosition)),this.nipples.push(a),this.trigger("added "+a.identifier+":added",a),this.manager.trigger("added "+a.identifier+":added",a),this.bindNipple(a),a},P.prototype.updateBox=function(){this.box=this.options.zone.getBoundingClientRect()},P.prototype.bindNipple=function(t){var e,i=this,s=function(t,s){e=t.type+" "+s.id+":"+t.type,i.trigger(e,s)};t.on("destroyed",i.onDestroyed.bind(i)),t.on("shown hidden rested dir plain",s),t.on("dir:up dir:right dir:down dir:left",s),t.on("plain:up plain:right plain:down plain:left",s)},P.prototype.pressureFn=function(t,e,i){var s=this,n=0;clearInterval(s.pressureIntervals[i]),s.pressureIntervals[i]=setInterval(function(){var i=t.force||t.pressure||t.webkitForce||0;i!==n&&(e.trigger("pressure",i),s.trigger("pressure "+e.identifier+":pressure",i),n=i)}.bind(s),100)},P.prototype.onstart=function(t){var e=this,i=e.options,s=t;return t=h(t),e.updateBox(),p(t,function(n){e.actives.length<i.maxNumberOfNipples?e.processOnStart(n):s.type.match(/^touch/)&&(Object.keys(e.manager.ids).forEach(function(i){if(Object.values(s.touches).findIndex(function(t){return t.identifier===i})<0){var n=[t[0]];n.identifier=i,e.processOnEnd(n)}}),e.actives.length<i.maxNumberOfNipples&&e.processOnStart(n))}),e.manager.bindDocument(),!1},P.prototype.processOnStart=function(t){var e,i=this,s=i.options,o=i.manager.getIdentifier(t),r=t.force||t.pressure||t.webkitForce||0,a={x:t.pageX,y:t.pageY},h=i.getOrCreate(o,a);h.identifier!==o&&i.manager.removeIdentifier(h.identifier),h.identifier=o;var c=function(e){e.trigger("start",e),i.trigger("start "+e.id+":start",e),e.show(),r>0&&i.pressureFn(t,e,e.identifier),i.processOnMove(t)};if((e=i.idles.indexOf(h))>=0&&i.idles.splice(e,1),i.actives.push(h),i.ids.push(h.identifier),"semi"!==s.mode)c(h);else{if(!(n(a,h.position)<=s.catchDistance))return h.destroy(),void i.processOnStart(t);c(h)}return h},P.prototype.getOrCreate=function(t,e){var i,s=this.options;return/(semi|static)/.test(s.mode)?(i=this.idles[0])?(this.idles.splice(0,1),i):"semi"===s.mode?this.createNipple(e,t):(console.warn("Coudln't find the needed nipple."),!1):i=this.createNipple(e,t)},P.prototype.processOnMove=function(t){var e=this.options,i=this.manager.getIdentifier(t),s=this.nipples.get(i);if(!s)return console.error("Found zombie joystick with ID "+i),void this.manager.removeIdentifier(i);s.identifier=i;var r,a,h,c,_,d,u,p,f=s.options.size/2,m={x:t.pageX,y:t.pageY},v=n(m,s.position),y=(r=m,a=s.position,h=a.x-r.x,c=a.y-r.y,function(t){return t*(180/Math.PI)}(Math.atan2(c,h))),b=o(y),g=v/f,x={distance:v,position:m};v>f&&(v=f,_=s.position,d=v,p={x:0,y:0},u=o(u=y),p.x=_.x-d*Math.cos(u),p.y=_.y-d*Math.sin(u),m=p);var w=m.x-s.position.x,O=m.y-s.position.y;e.lockX&&(O=0),e.lockY&&(w=0),s.frontPosition={x:w,y:O},e.dataOnly||l(s.ui.front,s.frontPosition);var P={identifier:s.identifier,position:m,force:g,pressure:t.force||t.pressure||t.webkitForce||0,distance:v,angle:{radian:b,degree:y},raw:x,instance:s,lockX:e.lockX,lockY:e.lockY};(P=s.computeDirection(P)).angle={radian:o(180-y),degree:180-y},s.trigger("move",P),this.trigger("move "+s.id+":move",P)},P.prototype.processOnEnd=function(t){var e=this,i=e.options,s=e.manager.getIdentifier(t),n=e.nipples.get(s),o=e.manager.removeIdentifier(n.identifier);n&&(i.dataOnly||n.hide(function(){"dynamic"===i.mode&&(n.trigger("removed",n),e.trigger("removed "+n.id+":removed",n),e.manager.trigger("removed "+n.id+":removed",n),n.destroy())}),clearInterval(e.pressureIntervals[n.identifier]),n.resetDirection(),n.trigger("end",n),e.trigger("end "+n.id+":end",n),e.ids.indexOf(n.identifier)>=0&&e.ids.splice(e.ids.indexOf(n.identifier),1),e.actives.indexOf(n)>=0&&e.actives.splice(e.actives.indexOf(n),1),/(semi|static)/.test(i.mode)?e.idles.push(n):e.nipples.indexOf(n)>=0&&e.nipples.splice(e.nipples.indexOf(n),1),e.manager.unbindDocument(),/(semi|static)/.test(i.mode)&&(e.manager.ids[o.id]=o.identifier))},P.prototype.onDestroyed=function(t,e){this.nipples.indexOf(e)>=0&&this.nipples.splice(this.nipples.indexOf(e),1),this.actives.indexOf(e)>=0&&this.actives.splice(this.actives.indexOf(e),1),this.idles.indexOf(e)>=0&&this.idles.splice(this.idles.indexOf(e),1),this.ids.indexOf(e.identifier)>=0&&this.ids.splice(this.ids.indexOf(e.identifier),1),this.manager.removeIdentifier(e.identifier),this.manager.unbindDocument()},P.prototype.destroy=function(){for(var t in this.unbindEvt(this.options.zone,"start"),this.nipples.forEach(function(t){t.destroy()}),this.pressureIntervals)this.pressureIntervals.hasOwnProperty(t)&&clearInterval(this.pressureIntervals[t]);this.trigger("destroyed",this.nipples),this.manager.unbindDocument(),this.off()};var T=P;function j(t){var e,i=this;return i.ids={},i.index=0,i.collections=[],i.config(t),i.prepareCollections(),r(window,"resize",function(t){clearTimeout(e),e=setTimeout(function(){var t,e=c();i.collections.forEach(function(i){i.forEach(function(i){t=i.el.getBoundingClientRect(),i.position={x:e.x+t.left,y:e.y+t.top}})})},100)}),i.collections}j.prototype=new x,j.constructor=j,j.prototype.prepareCollections=function(){var t=this;t.collections.create=t.create.bind(t),t.collections.on=t.on.bind(t),t.collections.off=t.off.bind(t),t.collections.destroy=t.destroy.bind(t),t.collections.get=function(e){var i;return t.collections.every(function(t){return!(i=t.get(e))}),i}},j.prototype.create=function(t){return this.createCollection(t)},j.prototype.createCollection=function(t){var e=new T(this,t);return this.bindCollection(e),this.collections.push(e),e},j.prototype.bindCollection=function(t){var e,i=this,s=function(t,s){e=t.type+" "+s.id+":"+t.type,i.trigger(e,s)};t.on("destroyed",i.onDestroyed.bind(i)),t.on("shown hidden rested dir plain",s),t.on("dir:up dir:right dir:down dir:left",s),t.on("plain:up plain:right plain:down plain:left",s)},j.prototype.bindDocument=function(){this.binded||(this.bindEvt(document,"move").bindEvt(document,"end"),this.binded=!0)},j.prototype.unbindDocument=function(t){Object.keys(this.ids).length&&!0!==t||(this.unbindEvt(document,"move").unbindEvt(document,"end"),this.binded=!1)},j.prototype.getIdentifier=function(t){var e;return t?void 0===(e=void 0===t.identifier?t.pointerId:t.identifier)&&(e=this.latest||0):e=this.index,void 0===this.ids[e]&&(this.ids[e]=this.index,this.index+=1),this.latest=e,this.ids[e]},j.prototype.removeIdentifier=function(t){var e={};for(var i in this.ids)if(this.ids[i]===t){e.id=i,e.identifier=this.ids[i],delete this.ids[i];break}return e},j.prototype.onmove=function(t){return this.onAny("move",t),!1},j.prototype.onend=function(t){return this.onAny("end",t),!1},j.prototype.oncancel=function(t){return this.onAny("end",t),!1},j.prototype.onAny=function(t,e){var i,s=this,n="processOn"+t.charAt(0).toUpperCase()+t.slice(1);return e=h(e),p(e,function(t){i=s.getIdentifier(t),p(s.collections,function(t,e,i){i.ids.indexOf(e)>=0&&(i[n](t),t._found_=!0)}.bind(null,t,i)),t._found_||s.removeIdentifier(i)}),!1},j.prototype.destroy=function(){this.unbindDocument(!0),this.ids={},this.index=0,this.collections.forEach(function(t){t.destroy()}),this.off()},j.prototype.onDestroyed=function(t,e){if(this.collections.indexOf(e)<0)return!1;this.collections.splice(this.collections.indexOf(e),1)};var M=new j;e.default={create:function(t){return M.create(t)},factory:M}}]).default},function(t,e,i){"use strict";i.r(e);const s=[];class n{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return s.length?s.pop():new n}static releaseBranch(t){s.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}class o{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const i=t._polygon,s=t.x,o=t.y;i&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const r=t._bvh_padding,a=i?0:t.radius*t.scale,h=(i?t._min_x:s-a)-r,c=(i?t._min_y:o-a)-r,l=(i?t._max_x:s+a)+r,_=(i?t._max_y:o+a)+r;t._bvh_min_x=h,t._bvh_min_y=c,t._bvh_max_x=l,t._bvh_max_y=_;let d=this._hierarchy,u=0;if(d)for(;;){if(!d._bvh_branch){const e=d._bvh_parent,i=d._bvh_min_x,s=d._bvh_min_y,o=d._bvh_max_x,r=d._bvh_max_y,a=d._bvh_parent=t._bvh_parent=n.getBranch();a._bvh_parent=e,a._bvh_left=d,a._bvh_right=t,a._bvh_sort=u++,a._bvh_min_x=h<i?h:i,a._bvh_min_y=c<s?c:s,a._bvh_max_x=l>o?l:o,a._bvh_max_y=_>r?_:r,e?e._bvh_left===d?e._bvh_left=a:e._bvh_right=a:this._hierarchy=a;break}{const t=d._bvh_left,e=t._bvh_min_y,i=t._bvh_max_x,s=t._bvh_max_y,n=h<t._bvh_min_x?h:t._bvh_min_x,o=c<e?c:e,r=l>i?l:i,a=_>s?_:s,p=(r-n)*(a-o)-(i-t._bvh_min_x)*(s-e),f=d._bvh_right,m=f._bvh_min_x,v=f._bvh_min_y,y=f._bvh_max_x,b=f._bvh_max_y,g=h<m?h:m,x=c<v?c:v,w=l>y?l:y,O=_>b?_:b,P=(w-g)*(O-x)-(y-m)*(b-v);d._bvh_sort=u++,d._bvh_min_x=n<g?n:g,d._bvh_min_y=o<x?o:x,d._bvh_max_x=r>w?r:w,d._bvh_max_y=a>O?a:O,d=p<=P?t:f}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const i=t._bvh_parent,s=i._bvh_parent,o=i._bvh_left,r=o===t?i._bvh_right:o;if(r._bvh_parent=s,r._bvh_branch&&(r._bvh_sort=i._bvh_sort),s){s._bvh_left===i?s._bvh_left=r:s._bvh_right=r;let t=s;for(;t;){const e=t._bvh_left,i=e._bvh_min_x,s=e._bvh_min_y,n=e._bvh_max_x,o=e._bvh_max_y,r=t._bvh_right,a=r._bvh_min_x,h=r._bvh_min_y,c=r._bvh_max_x,l=r._bvh_max_y;t._bvh_min_x=i<a?i:a,t._bvh_min_y=s<h?s:h,t._bvh_max_x=n>c?n:c,t._bvh_max_y=o>l?o:l,t=t._bvh_parent}}else this._hierarchy=r;n.releaseBranch(i)}update(){const t=this._bodies,e=t.length;for(let i=0;i<e;++i){const e=t[i];let s=!1;if(s||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,s=!0),!s){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const i=e.x,n=e.y,o=t?0:e.radius*e.scale,r=t?e._min_x:i-o,a=t?e._min_y:n-o,h=t?e._max_x:i+o,c=t?e._max_y:n+o;s=r<e._bvh_min_x||a<e._bvh_min_y||h>e._bvh_max_x||c>e._bvh_max_y}s&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],i=t._bvh_min_x,s=t._bvh_min_y,n=t._bvh_max_x,o=t._bvh_max_y;let r=this._hierarchy,a=!0;if(!r||!r._bvh_branch)return e;for(;r;){if(a){a=!1;let t=r._bvh_branch?r._bvh_left:null;for(;t&&t._bvh_max_x>=i&&t._bvh_max_y>=s&&t._bvh_min_x<=n&&t._bvh_min_y<=o;)t=(r=t)._bvh_branch?r._bvh_left:null}const h=r._bvh_branch,c=h?r._bvh_right:null;if(c&&c._bvh_max_x>i&&c._bvh_max_y>s&&c._bvh_min_x<n&&c._bvh_min_y<o)r=c,a=!0;else{h||r===t||e.push(r);let i=r._bvh_parent;if(!i)break;for(;i&&i._bvh_right===r;)i=(r=i)._bvh_parent;r=i}}return e}draw(t){const e=this._bodies,i=e.length;for(let s=0;s<i;++s)e[s].draw(t)}drawBVH(t){let e=this._hierarchy,i=!0;for(;e;){if(i){i=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const s=e._bvh_branch,n=e._bvh_min_x,o=e._bvh_min_y,r=e._bvh_max_x,a=e._bvh_max_y,h=s?e._bvh_right:null;if(t.moveTo(n,o),t.lineTo(r,o),t.lineTo(r,a),t.lineTo(n,a),t.lineTo(n,o),h)e=h,i=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}}class r{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function a(t,e,i=null,s=!0){const n=t._polygon,o=e._polygon;let r=!1;return i&&(i.a=t,i.b=e,i.a_in_b=!0,i.b_in_a=!0,i.overlap=null,i.overlap_x=0,i.overlap_y=0),n&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),o&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),s&&!function(t,e){const i=t._polygon,s=i?0:t.x,n=i?0:t.y,o=i?0:t.radius*t.scale,r=i?t._min_x:s-o,a=i?t._min_y:n-o,h=i?t._max_x:s+o,c=i?t._max_y:n+o,l=e._polygon,_=l?0:e.x,d=l?0:e.y,u=l?0:e.radius*e.scale,p=l?e._min_x:_-u,f=l?e._min_y:d-u,m=l?e._max_x:_+u,v=l?e._max_y:d+u;return r<m&&a<v&&h>p&&c>f}(t,e)||(n&&t._dirty_normals&&t._calculateNormals(),o&&e._dirty_normals&&e._calculateNormals(),r=n&&o?function(t,e,i=null){const s=t._coords.length,n=e._coords.length;if(2===s&&2===n){const s=t._coords,n=e._coords;return i&&(i.overlap=0),s[0]===n[0]&&s[1]===n[1]}const o=t._coords,r=e._coords,a=t._normals,h=e._normals;if(s>2)for(let t=0,e=1;t<s;t+=2,e+=2)if(c(o,r,a[t],a[e],i))return!1;if(n>2)for(let t=0,e=1;t<n;t+=2,e+=2)if(c(o,r,h[t],h[e],i))return!1;return!0}(t,e,i):n?h(t,e,i,!1):o?h(e,t,i,!0):function(t,e,i=null){const s=t.radius*t.scale,n=e.radius*e.scale,o=e.x-t.x,r=e.y-t.y,a=s+n,h=o*o+r*r;if(h>a*a)return!1;if(i){const t=Math.sqrt(h);i.a_in_b=s<=n&&t<=n-s,i.b_in_a=n<=s&&t<=s-n,i.overlap=a-t,i.overlap_x=o/t,i.overlap_y=r/t}return!0}(t,e,i)),i&&(i.collision=r),r}function h(t,e,i=null,s=!1){const n=t._coords,o=t._edges,r=t._normals,a=e.x,h=e.y,c=e.radius*e.scale,l=2*c,_=c*c,d=n.length;let u=!0,p=!0,f=null,m=0,v=0;if(2===d){const t=a-n[0],e=h-n[1],s=t*t+e*e;if(s>_)return!1;if(i){const i=Math.sqrt(s);f=c-i,m=t/i,v=e/i,p=!1}}else for(let t=0,e=1;t<d;t+=2,e+=2){const s=a-n[t],y=h-n[e],b=o[t],g=o[e],x=s*b+y*g,w=x<0?-1:x>b*b+g*g?1:0;let O=!1,P=0,T=0,j=0;if(i&&u&&s*s+y*y>_&&(u=!1),w){const e=-1===w,r=e?0===t?d-2:t-2:t===d-2?0:t+2,l=r+1,u=a-n[r],f=h-n[l],m=o[r],v=o[l],b=u*m+f*v;if((b<0?-1:b>m*m+v*v?1:0)===-w){const t=e?s:u,n=e?y:f,o=t*t+n*n;if(o>_)return!1;if(i){const e=Math.sqrt(o);O=!0,P=c-e,T=t/e,j=n/e,p=!1}}}else{const n=r[t],o=r[e],a=s*n+y*o,h=a<0?-a:a;if(a>0&&h>c)return!1;i&&(O=!0,P=c-a,T=n,j=o,(p&&a>=0||P<l)&&(p=!1))}O&&(null===f||f>P)&&(f=P,m=T,v=j)}return i&&(i.a_in_b=s?p:u,i.b_in_a=s?u:p,i.overlap=f,i.overlap_x=s?-m:m,i.overlap_y=s?-v:v),!0}function c(t,e,i,s,n=null){const o=t.length,r=e.length;if(!o||!r)return!0;let a=null,h=null,c=null,l=null;for(let e=0,n=1;e<o;e+=2,n+=2){const o=t[e]*i+t[n]*s;(null===a||a>o)&&(a=o),(null===h||h<o)&&(h=o)}for(let t=0,n=1;t<r;t+=2,n+=2){const o=e[t]*i+e[n]*s;(null===c||c>o)&&(c=o),(null===l||l<o)&&(l=o)}if(a>l||h<c)return!0;if(n){let t=0;if(a<c)if(n.a_in_b=!1,h<l)t=h-c,n.b_in_a=!1;else{const e=h-c,i=l-a;t=e<i?e:-i}else if(n.b_in_a=!1,h>l)t=a-l,n.a_in_b=!1;else{const e=h-c,i=l-a;t=e<i?e:-i}const e=n.overlap,o=t<0?-t:t;if(null===e||e>o){const e=t<0?-1:1;n.overlap=o,n.overlap_x=i*e,n.overlap_y=s*e}}return!1}class l{constructor(t=0,e=0,i=0){this.x=t,this.y=e,this.padding=i,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=i,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,i=!0){return a(this,t,e,i)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new r}static createResult(){return new r}}class _ extends l{constructor(t=0,e=0,i=0,s=1,n=0){super(t,e,n),this.radius=i,this.scale=s}draw(t){const e=this.x,i=this.y,s=this.radius*this.scale;t.moveTo(e+s,i),t.arc(e,i,s,0,2*Math.PI)}}class d extends l{constructor(t=0,e=0,i=[],s=0,n=1,o=1,r=0){super(t,e,r),this.angle=s,this.scale_x=n,this.scale_y=o,this._polygon=!0,this._x=t,this._y=e,this._angle=s,this._scale_x=n,this._scale_y=o,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,d.prototype.setPoints.call(this,i)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let i=2;i<e.length;i+=2)t.lineTo(e[i],e[i+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const i=this._points;for(let s=0,n=0,o=1;s<e;++s,n+=2,o+=2){const e=t[s];i[n]=e[0],i[o]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,i=this.angle,s=this.scale_x,n=this.scale_y,o=this._points,r=this._coords,a=o.length;let h,c,l,_;for(let d=0,u=1;d<a;d+=2,u+=2){let a=o[d]*s,p=o[u]*n;if(i){const t=Math.cos(i),e=Math.sin(i),s=a;a=s*t-p*e,p=s*e+p*t}a+=t,p+=e,r[d]=a,r[u]=p,0===d?(h=c=a,l=_=p):(a<h?h=a:a>c&&(c=a),p<l?l=p:p>_&&(_=p))}this._x=t,this._y=e,this._angle=i,this._scale_x=s,this._scale_y=n,this._min_x=h,this._min_y=l,this._max_x=c,this._max_y=_,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,i=this._normals,s=t.length;for(let n=0,o=1;n<s;n+=2,o+=2){const r=n+2<s?n+2:0,a=t[r]-t[n],h=t[r+1]-t[o],c=a||h?Math.sqrt(a*a+h*h):0;e[n]=a,e[o]=h,i[n]=c?h/c:0,i[o]=c?-a/c:0}this._dirty_normals=!1}}class u extends d{constructor(t=0,e=0,i=0){super(t,e,[[0,0]],0,1,1,i),this._point=!0}}u.prototype.setPoints=void 0,i.d(e,"default",function(){return p}),i.d(e,"Collisions",function(){return p}),i.d(e,"Result",function(){return r}),i.d(e,"Circle",function(){return _}),i.d(e,"Polygon",function(){return d}),i.d(e,"Point",function(){return u});class p{constructor(){this._bvh=new o}createCircle(t=0,e=0,i=0,s=1,n=0){const o=new _(t,e,i,s,n);return this._bvh.insert(o),o}createPolygon(t=0,e=0,i=[[0,0]],s=0,n=1,o=1,r=0){const a=new d(t,e,i,s,n,o,r);return this._bvh.insert(a),a}createPoint(t=0,e=0,i=0){const s=new u(t,e,i);return this._bvh.insert(s),s}createResult(){return new r}static createResult(){return new r}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,i=null,s=!0){return a(t,e,i,s)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,