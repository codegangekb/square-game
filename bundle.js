!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=14)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.GameObject=class{constructor(t,e,s,i){this.transform=t,this.drawer=e,this.collider=s,this.animation=i}render(t,e){this.drawer.draw(t,e)}update(t){this.animation&&this.animation.update(t)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(6);e.Drawer=class{constructor(t){this.transform=t,this.assets=i.Assets.getInstance()}draw(t,e){e.xView-this.transform.position.x>100&&e.yView-this.transform.position.y>100||(t.translate(-e.xView+this.transform.position.x,-e.yView+this.transform.position.y),t.rotate(this.transform.angle),this.render(t),t.setTransform(1,0,0,1,0,0))}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t,e){this.x=t,this.y=e}add(t){return new i(this.x+t.x,this.y+t.y)}sub(t){return new i(this.x-t.x,this.y-t.y)}multiple(t,e){return new i(this.x*t,this.y*(null!=e?e:t))}normalize(){const t=Math.sqrt(this.x*this.x+this.y*this.y);return t?new i(this.x/t,this.y/t):this}static zero(){return new i(0,0)}static angle(t,e){return Math.atan2(t.x-e.x,-(t.y-e.y))}static distance(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}static clone(t){return new i(t.x,t.y)}static turnAround(t){return new i(-t.x,-t.y)}}e.Vector=i},function(t,e,s){const i=s(22),n=s(24),r=s(10),o=s(25),a=s(8),h=s(9);class l{constructor(){this._bvh=new i}createCircle(t=0,e=0,s=0,i=1,r=0){const o=new n(t,e,s,i,r);return this._bvh.insert(o),o}createPolygon(t=0,e=0,s=[[0,0]],i=0,n=1,o=1,a=0){const h=new r(t,e,s,i,n,o,a);return this._bvh.insert(h),h}createPoint(t=0,e=0,s=0){const i=new o(t,e,s);return this._bvh.insert(i),i}createResult(){return new a}static createResult(){return new a}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,s=null,i=!0){return h(t,e,s,i)}}t.exports={default:l,Collisions:l,Result:a,Circle:n,Polygon:r,Point:o}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(2);class n{constructor(t,e,s,i,n){this._position=t,this._angle=e,this.collider=s,this._scale=i,this._size=n}get position(){return this._position}get angle(){return this._angle}get size(){return this._size}rotate(t){this._angle=t}lookAt(t){this._angle=i.Vector.angle(t,this.position)}setPosition(t){this._position=t}static clone(t){return new n(i.Vector.clone(t.position),t.angle,t._scale,t._size)}}e.Transform=n},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WALL_HEIGHT=42,e.WALL_WIDTH=120,e.WALL_X=2235,e.TOWN_HEIGHT=42,e.TOWN_START=900,e.WALL_START=918,console.log(e.WALL_START)},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(){this.assetsMap={},this.assetsList=["boss.svg","cosmonaut.svg","ded.svg","deva-vesna.svg","dodo.svg","house.svg","maxim_menailo.svg","mer.svg","naum-blik.svg","pizza.svg","player.svg","rinat.svg","roizman.svg","salsa.svg","shahrin.svg","sheremet.svg","square.svg","ten-gubernatora.svg","titushki.svg","town.svg","tsarikov.svg","wall.svg","wall1.svg","wall2.svg","wall3.svg","wall4.svg","wall5.svg","yandex-eda.svg","yandex-eda2.svg","yandex-eda3.svg","devi-u-popa.svg","grupa2.svg","human.svg","we.svg","yandex-eda-tri-parnya.svg"]}static getInstance(){return i.instance||(i.instance=new i),i.instance}get(t){return this.assetsMap[t]}loadOne(t){return new Promise(e=>{const s=new Image;s.src="public/"+t,s.onload=(()=>{this.assetsMap[t]=s,e()})})}load(){return Promise.all(this.assetsList.map(this.loadOne.bind(this)))}}e.Assets=i},function(t,e,s){const i=s(8),n=s(9);t.exports=class{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.padding=s,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=s,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,s=!0){return n(this,t,e,s)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new i}static createResult(){return new i}},t.exports.default=t.exports},function(t,e){t.exports=class{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.b_in_a=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}},t.exports.default=t.exports},function(t,e){function s(t,e,s=null,i=!1){const n=t._coords,r=t._edges,o=t._normals,a=e.x,h=e.y,l=e.radius*e.scale,c=2*l,_=l*l,u=n.length;let d=!0,p=!0,f=null,v=0,m=0;if(2===u){const t=a-n[0],e=h-n[1],i=t*t+e*e;if(i>_)return!1;if(s){const s=Math.sqrt(i);f=l-s,v=t/s,m=e/s,p=!1}}else for(let t=0,e=1;t<u;t+=2,e+=2){const i=a-n[t],b=h-n[e],y=r[t],g=r[e],x=i*y+b*g,w=x<0?-1:x>y*y+g*g?1:0;let O=!1,P=0,j=0,V=0;if(s&&d&&i*i+b*b>_&&(d=!1),w){const e=-1===w,o=e?0===t?u-2:t-2:t===u-2?0:t+2,c=o+1,d=a-n[o],f=h-n[c],v=r[o],m=r[c],y=d*v+f*m;if((y<0?-1:y>v*v+m*m?1:0)===-w){const t=e?i:d,n=e?b:f,r=t*t+n*n;if(r>_)return!1;if(s){const e=Math.sqrt(r);O=!0,P=l-e,j=t/e,V=n/e,p=!1}}}else{const n=o[t],r=o[e],a=i*n+b*r,h=a<0?-a:a;if(a>0&&h>l)return!1;s&&(O=!0,P=l-a,j=n,V=r,(p&&a>=0||P<c)&&(p=!1))}O&&(null===f||f>P)&&(f=P,v=j,m=V)}return s&&(s.a_in_b=i?p:d,s.b_in_a=i?d:p,s.overlap=f,s.overlap_x=i?-v:v,s.overlap_y=i?-m:m),!0}function i(t,e,s,i,n=null){const r=t.length,o=e.length;if(!r||!o)return!0;let a=null,h=null,l=null,c=null;for(let e=0,n=1;e<r;e+=2,n+=2){const r=t[e]*s+t[n]*i;(null===a||a>r)&&(a=r),(null===h||h<r)&&(h=r)}for(let t=0,n=1;t<o;t+=2,n+=2){const r=e[t]*s+e[n]*i;(null===l||l>r)&&(l=r),(null===c||c<r)&&(c=r)}if(a>c||h<l)return!0;if(n){let t=0;if(a<l)if(n.a_in_b=!1,h<c)t=h-l,n.b_in_a=!1;else{const e=h-l,s=c-a;t=e<s?e:-s}else if(n.b_in_a=!1,h>c)t=a-c,n.a_in_b=!1;else{const e=h-l,s=c-a;t=e<s?e:-s}const e=n.overlap,r=t<0?-t:t;if(null===e||e>r){const e=t<0?-1:1;n.overlap=r,n.overlap_x=s*e,n.overlap_y=i*e}}return!1}t.exports=function(t,e,n=null,r=!0){const o=t._polygon,a=e._polygon;let h=!1;return n&&(n.a=t,n.b=e,n.a_in_b=!0,n.b_in_a=!0,n.overlap=null,n.overlap_x=0,n.overlap_y=0),o&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),a&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),r&&!function(t,e){const s=t._polygon,i=s?0:t.x,n=s?0:t.y,r=s?0:t.radius*t.scale,o=s?t._min_x:i-r,a=s?t._min_y:n-r,h=s?t._max_x:i+r,l=s?t._max_y:n+r,c=e._polygon,_=c?0:e.x,u=c?0:e.y,d=c?0:e.radius*e.scale,p=c?e._min_x:_-d,f=c?e._min_y:u-d,v=c?e._max_x:_+d,m=c?e._max_y:u+d;return o<v&&a<m&&h>p&&l>f}(t,e)||(o&&t._dirty_normals&&t._calculateNormals(),a&&e._dirty_normals&&e._calculateNormals(),h=o&&a?function(t,e,s=null){const n=t._coords.length,r=e._coords.length;if(2===n&&2===r){const i=t._coords,n=e._coords;return s&&(s.overlap=0),i[0]===n[0]&&i[1]===n[1]}const o=t._coords,a=e._coords,h=t._normals,l=e._normals;if(n>2)for(let t=0,e=1;t<n;t+=2,e+=2)if(i(o,a,h[t],h[e],s))return!1;if(r>2)for(let t=0,e=1;t<r;t+=2,e+=2)if(i(o,a,l[t],l[e],s))return!1;return!0}(t,e,n):o?s(t,e,n,!1):a?s(e,t,n,!0):function(t,e,s=null){const i=t.radius*t.scale,n=e.radius*e.scale,r=e.x-t.x,o=e.y-t.y,a=i+n,h=r*r+o*o;if(h>a*a)return!1;if(s){const t=Math.sqrt(h);s.a_in_b=i<=n&&t<=n-i,s.b_in_a=n<=i&&t<=i-n,s.overlap=a-t,s.overlap_x=r/t,s.overlap_y=o/t}return!0}(t,e,n)),n&&(n.collision=h),h},t.exports.default=t.exports},function(t,e,s){const i=s(7);class n extends i{constructor(t=0,e=0,s=[],i=0,r=1,o=1,a=0){super(t,e,a),this.angle=i,this.scale_x=r,this.scale_y=o,this._polygon=!0,this._x=t,this._y=e,this._angle=i,this._scale_x=r,this._scale_y=o,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,n.prototype.setPoints.call(this,s)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let s=2;s<e.length;s+=2)t.lineTo(e[s],e[s+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const s=this._points;for(let i=0,n=0,r=1;i<e;++i,n+=2,r+=2){const e=t[i];s[n]=e[0],s[r]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,s=this.angle,i=this.scale_x,n=this.scale_y,r=this._points,o=this._coords,a=r.length;let h,l,c,_;for(let u=0,d=1;u<a;u+=2,d+=2){let a=r[u]*i,p=r[d]*n;if(s){const t=Math.cos(s),e=Math.sin(s),i=a;a=i*t-p*e,p=i*e+p*t}a+=t,p+=e,o[u]=a,o[d]=p,0===u?(h=l=a,c=_=p):(a<h?h=a:a>l&&(l=a),p<c?c=p:p>_&&(_=p))}this._x=t,this._y=e,this._angle=s,this._scale_x=i,this._scale_y=n,this._min_x=h,this._min_y=c,this._max_x=l,this._max_y=_,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,s=this._normals,i=t.length;for(let n=0,r=1;n<i;n+=2,r+=2){const o=n+2<i?n+2:0,a=t[o]-t[n],h=t[o+1]-t[r],l=a||h?Math.sqrt(a*a+h*h):0;e[n]=a,e[r]=h,s[n]=l?h/l:0,s[r]=l?-a/l:0}this._dirty_normals=!1}}t.exports=n,t.exports.default=t.exports},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.drawCircle=function(t,e,s,i,n=!0){t.beginPath(),t.arc(e,s,i,0,2*Math.PI),n?t.fill():t.stroke()},e.drawTriangle=function(t,e,s,i,n=!0){t.beginPath(),t.moveTo(e,s),t.arc(e,s,i,0,Math.PI/3),n?t.fill():t.stroke()},e.getRandomBeetwen=function(t,e){return Math.random()*e+t}},function(t,e){var s="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(s){var i=new Uint8Array(16);t.exports=function(){return s(i),i}}else{var n=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),n[e]=t>>>((3&e)<<3)&255;return n}}},function(t,e){for(var s=[],i=0;i<256;++i)s[i]=(i+256).toString(16).substr(1);t.exports=function(t,e){var i=e||0,n=s;return[n[t[i++]],n[t[i++]],n[t[i++]],n[t[i++]],"-",n[t[i++]],n[t[i++]],"-",n[t[i++]],n[t[i++]],"-",n[t[i++]],n[t[i++]],"-",n[t[i++]],n[t[i++]],n[t[i++]],n[t[i++]],n[t[i++]],n[t[i++]]].join("")}},function(t,e,s){"use strict";var i=this&&this.__awaiter||function(t,e,s,i){return new(s||(s=Promise))(function(n,r){function o(t){try{h(i.next(t))}catch(t){r(t)}}function a(t){try{h(i.throw(t))}catch(t){r(t)}}function h(t){t.done?n(t.value):new s(function(e){e(t.value)}).then(o,a)}h((i=i.apply(t,e||[])).next())})};Object.defineProperty(e,"__esModule",{value:!0}),s(15);const n=s(20),r=s(42),o=s(6),a=document.createElement("canvas");a.id="display",document.body.style.backgroundColor="#303030";const h=new r.Config;a.width=h.game.width,a.height=h.game.height,a.classList.add("game-display");const l=a.getContext("2d");if(null==l)throw Error("PNH");document.body.appendChild(a);const c=o.Assets.getInstance(),_=new n.Game(h);(()=>i(this,void 0,void 0,function*(){yield c.load();let t=performance.now();!function e(){l.clearRect(0,0,a.width,a.height);const s=performance.now(),i=(s-t)/1e3;t=s,_.update(i),_.render(l),requestAnimationFrame(e)}()}))()},function(t,e,s){var i=s(16);"string"==typeof i&&(i=[[t.i,i,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(18)(i,n);i.locals&&(t.exports=i.locals)},function(t,e,s){(t.exports=s(17)(!1)).push([t.i,"\n@font-face {\n    font-family: 'Press Start 2P';\n    font-style: normal;\n    font-weight: 400;\n    src: url(https://fonts.gstatic.com/s/pressstart2p/v6/e3t4euO8T-267oIAQAu6jDQyK3nVivNm4I81.woff2) format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\nbody, html {\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    height: 100%;\n    font-family: 'Press Start 2P', SansSerif, Arial;\n}\n\nbody {\n    user-select: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\ncanvas {\n    border: 1px solid black;\n    image-rendering: pixelated;\n    cursor: cell;\n}\n\n.game-display {\n    position: relative;\n}\n\n.game-ui-container {\n    pointer-events: none;\n    position: absolute;\n    width: 800px;\n    height: 600px;\n}\n\n.tower-selector-container {\n    pointer-events: all;\n    position: absolute;\n    box-sizing: border-box;\n    justify-content: space-between;\n    align-items: flex-start;\n    padding: 40px 5px 10px;\n    background: url('/public/images/wall.png') repeat;\n    top: 0;\n    right: 0;\n    width: 145px;\n    height: 600px;\n}\n\n.tower-selector-title {\n    color: gold;\n    opacity: 0.75;\n    position: absolute;\n    right: 0;\n    top: 0;\n    background: url(/public/images/chest.png) no-repeat 10px 10px;\n    background-size: 20px 20px;\n    padding: 10px 0 0 30px ;\n    box-sizing: border-box;\n    width: 145px;\n    text-align: left;\n}\n\n.tower-selector {\n    background: url(/public/images/border.png) no-repeat,rgba(255,255,255,0.7);\n    background-size: 60px 60px;\n    display: inline-block;\n    width: 60px;\n    height: 60px;\n    margin-bottom: 15px;\n}\n\n.tower-selector.active {\n    box-shadow: 0 0 15px gold;\n}\n\n.tower-selector:nth-of-type(2n+1) {\n    margin-right: 15px;\n}\n",""])},function(t,e,s){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var s=function(t,e){var s=t[1]||"",i=t[3];if(!i)return s;if(e&&"function"==typeof btoa){var n=(o=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),r=i.sources.map(function(t){return"/*# sourceURL="+i.sourceRoot+t+" */"});return[s].concat(r).concat([n]).join("\n")}var o;return[s].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+s+"}":s}).join("")},e.i=function(t,s){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},n=0;n<this.length;n++){var r=this[n][0];null!=r&&(i[r]=!0)}for(n=0;n<t.length;n++){var o=t[n];null!=o[0]&&i[o[0]]||(s&&!o[2]?o[2]=s:s&&(o[2]="("+o[2]+") and ("+s+")"),e.push(o))}},e}},function(t,e,s){var i,n,r={},o=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===n&&(n=i.apply(this,arguments)),n}),a=function(t){var e={};return function(t,s){if("function"==typeof t)return t();if(void 0===e[t]){var i=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,s);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}}(),h=null,l=0,c=[],_=s(19);function u(t,e){for(var s=0;s<t.length;s++){var i=t[s],n=r[i.id];if(n){n.refs++;for(var o=0;o<n.parts.length;o++)n.parts[o](i.parts[o]);for(;o<i.parts.length;o++)n.parts.push(b(i.parts[o],e))}else{var a=[];for(o=0;o<i.parts.length;o++)a.push(b(i.parts[o],e));r[i.id]={id:i.id,refs:1,parts:a}}}}function d(t,e){for(var s=[],i={},n=0;n<t.length;n++){var r=t[n],o=e.base?r[0]+e.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};i[o]?i[o].parts.push(a):s.push(i[o]={id:o,parts:[a]})}return s}function p(t,e){var s=a(t.insertInto);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=c[c.length-1];if("top"===t.insertAt)i?i.nextSibling?s.insertBefore(e,i.nextSibling):s.appendChild(e):s.insertBefore(e,s.firstChild),c.push(e);else if("bottom"===t.insertAt)s.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var n=a(t.insertAt.before,s);s.insertBefore(e,n)}}function f(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=c.indexOf(t);e>=0&&c.splice(e,1)}function v(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var i=function(){0;return s.nc}();i&&(t.attrs.nonce=i)}return m(e,t.attrs),p(t,e),e}function m(t,e){Object.keys(e).forEach(function(s){t.setAttribute(s,e[s])})}function b(t,e){var s,i,n,r;if(e.transform&&t.css){if(!(r="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=r}if(e.singleton){var o=l++;s=h||(h=v(e)),i=x.bind(null,s,o,!1),n=x.bind(null,s,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(s=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",m(e,t.attrs),p(t,e),e}(e),i=function(t,e,s){var i=s.css,n=s.sourceMap,r=void 0===e.convertToAbsoluteUrls&&n;(e.convertToAbsoluteUrls||r)&&(i=_(i));n&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */");var o=new Blob([i],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,s,e),n=function(){f(s),s.href&&URL.revokeObjectURL(s.href)}):(s=v(e),i=function(t,e){var s=e.css,i=e.media;i&&t.setAttribute("media",i);if(t.styleSheet)t.styleSheet.cssText=s;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(s))}}.bind(null,s),n=function(){f(s)});return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else n()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var s=d(t,e);return u(s,e),function(t){for(var i=[],n=0;n<s.length;n++){var o=s[n];(a=r[o.id]).refs--,i.push(a)}t&&u(d(t,e),e);for(n=0;n<i.length;n++){var a;if(0===(a=i[n]).refs){for(var h=0;h<a.parts.length;h++)a.parts[h]();delete r[a.id]}}}};var y,g=(y=[],function(t,e){return y[t]=e,y.filter(Boolean).join("\n")});function x(t,e,s,i){var n=s?"":i.css;if(t.styleSheet)t.styleSheet.cssText=g(e,n);else{var r=document.createTextNode(n),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(r,o[e]):t.appendChild(r)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var s=e.protocol+"//"+e.host,i=s+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var n,r=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?t:(n=0===r.indexOf("//")?r:0===r.indexOf("/")?s+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(n)+")")})}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(21),n=s(26),r=s(28),o=s(2),a=s(29),h=s(30),l=s(4),c=s(3),_=s(34),u=s(35),d=s(36),p=s(37),f=s(38),v=s(39),m=s(41),b=s(6);e.Game=class{constructor(t){this.config=t,this.riotPolice=[],this.pizzas=[],this.staticObjects=[],this.system=new c.Collisions,this.player=new i.Player(new l.Transform(new o.Vector(2050,1650),0),this),this.room={width:t.world.width,height:t.world.height,map:new r.Map(t.world.width,t.world.height)},this.createRiotPolice(),this.room.map.generate(),this.camera=new n.Camera(0,0,this.config.game.width,this.config.game.height,this.room.width,this.room.height),this.camera.follow(this.player.transform,this.config.game.width/2,this.config.game.height/2),this.createWalls(),this.createTowns(),this.createStatic(),this.boss=new v.Boss(new l.Transform(new o.Vector(3400,1300),1.5*Math.PI),this),this.house=new m.House(new l.Transform(new o.Vector(3540,1320),0),this),this.assets=b.Assets.getInstance()}renderSquare(t){t.drawImage(this.assets.get("square.svg"),-this.camera.xView,-this.camera.yView,this.config.world.width,this.config.world.height)}render(t){this.renderSquare(t),this.player.render(t,this.camera),this.house.render(t,this.camera),this.boss.render(t,this.camera),this.renderRiotPolice(t),this.renderPizzas(t),this.renderWalls(t),this.renderTowns(t),this.renderStatic(t)}searchIntersection(){const t=new Map;if(this.pizzas.length&&(this.pizzas.forEach(e=>{this.riotPolice.forEach(s=>{const i=o.Vector.distance(s.transform.position,e.transform.position);o.Vector.distance(s.transform.position,e.transform.position)<800&&!e.isWaitingToEating&&!s.target&&(t.has(e)?t.get(e).push({cosmonaut:s,distance:i}):t.set(e,[{cosmonaut:s,distance:i}]))})}),t.size))for(let[e,s]of t){const t=s.reduce((t,e)=>e.distance<t?e.distance:t,s[0].distance),{cosmonaut:i}=s.find(e=>e.distance===t);i.target=e,e.isWaitingToEating=!0}}update(t){this.system.update(),this.house.update(t),this.player.update(t),this.boss.update(t),this.updateRiotPolice(t),this.camera.update()}renderRiotPolice(t){this.riotPolice.forEach(e=>{e.render(t,this.camera)})}updateRiotPolice(t){this.riotPolice.forEach(e=>{e.update(t)})}renderPizzas(t){this.pizzas.forEach(e=>{e.render(t,this.camera)})}createRiotPolice(){Array.from({length:24}).forEach((t,e)=>{const s=new l.Transform(new o.Vector(2150,760+40*e+1),1.5*Math.PI),i=new a.Cosmonaut(s,this);this.riotPolice.push(i)})}eatPizza(t){const e=this.pizzas.findIndex(e=>e.id===t.id);-1!==e&&this.pizzas.splice(e,1)}createPizzaObject(t){this.pizzas.length>=5||(this.pizzas.push(new h.Pizza(new l.Transform(new o.Vector(t.x,t.y),0))),this.searchIntersection())}createWalls(){this.walls=u.WALLS_LIST.map((t,e)=>{const s=new o.Vector(t.x,t.y),i=new l.Transform(s,t.rotate);return new _.Wall(i,this)})}renderWalls(t){this.walls.forEach(e=>e.render(t,this.camera))}createTowns(){this.towns=d.TOWN_LIST.map((t,e)=>{const s=new o.Vector(t.x,t.y),i=new l.Transform(s,t.rotate);return new p.Town(i,this)})}renderTowns(t){this.towns.forEach(e=>e.render(t,this.camera))}createStatic(){this.staticObjects.push(new f.StaticObject("salsa.svg",89,89,1.5*Math.PI,new o.Vector(1550,1250),this)),this.staticObjects.push(new f.StaticObject("dodo.svg",50,70,.4*Math.PI,new o.Vector(1350,1420),this)),this.staticObjects.push(new f.StaticObject("sheremet.svg",120,120,0,new o.Vector(1650,1520),this)),this.staticObjects.push(new f.StaticObject("ten-gubernatora.svg",70,70,0,new o.Vector(1380,1660),this)),this.staticObjects.push(new f.StaticObject("maxim_menailo.svg",90,90,0,new o.Vector(1350,980),this)),this.staticObjects.push(new f.StaticObject("devi-u-popa.svg",50,90,.2*Math.PI,new o.Vector(1396,1020),this)),this.staticObjects.push(new f.StaticObject("roizman.svg",120,120,0,new o.Vector(1280,1520),this)),this.staticObjects.push(new f.StaticObject("mer.svg",160,160,0,new o.Vector(1860,1780),this)),this.staticObjects.push(new f.StaticObject("rinat.svg",70,70,0,new o.Vector(1750,1230),this)),this.staticObjects.push(new f.StaticObject("tsarikov.svg",55,85,0,new o.Vector(1780,1130),this)),this.staticObjects.push(new f.StaticObject("naum-blik.svg",55,85,0,new o.Vector(2040,890),this)),this.staticObjects.push(new f.StaticObject("ded.svg",180,130,0,new o.Vector(1895,1450),this)),this.staticObjects.push(new f.StaticObject("deva-vesna.svg",70,90,0,new o.Vector(1895,1250),this)),this.staticObjects.push(new f.StaticObject("shahrin.svg",90,90,0,new o.Vector(1350,650),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,0,new o.Vector(1350,850),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,0,new o.Vector(850,980),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,0,new o.Vector(1780,1450),this)),this.staticObjects.push(new f.StaticObject("devi-u-popa.svg",50,90,.2*Math.PI,new o.Vector(950,980),this)),this.staticObjects.push(new f.StaticObject("titushki.svg",400,400,1.5*Math.PI,new o.Vector(3550,1300),this,!0)),this.staticObjects.push(new f.StaticObject("we.svg",190,215,1.9*Math.PI,new o.Vector(350,1300),this)),this.staticObjects.push(new f.StaticObject("yandex-eda-tri-parnya.svg",200,85,1.9*Math.PI,new o.Vector(550,1300),this)),this.staticObjects.push(new f.StaticObject("yandex-eda-tri-parnya.svg",200,85,1.9*Math.PI,new o.Vector(690,820),this)),this.staticObjects.push(new f.StaticObject("dodo.svg",50,70,.4*Math.PI,new o.Vector(850,720),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,1.15*Math.PI,new o.Vector(940,720),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new o.Vector(940,960),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new o.Vector(1780,1024),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new o.Vector(1880,1144),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new o.Vector(750,1300),this))}renderStatic(t){this.staticObjects.forEach(e=>e.render(t,this.camera))}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(2),o=s(3);class a extends n.Drawer{render(t){t.drawImage(this.assets.get("player.svg"),-18,-48,52,63)}}class h extends i.GameObject{constructor(t,e){super(t,new a(t),e.system.createCircle(t.position.x,t.position.y,25)),this.game=e,this.speed=400,this.pressedKeys={},this.damageCollider=e.system.createPolygon(t.position.x,t.position.y,[[-10,-30],[-10,30],[0,0]],t.angle),this.listen()}listen(){document.addEventListener("keydown",t=>{this.pressedKeys[t.keyCode]=!0}),document.addEventListener("keyup",t=>{this.pressedKeys[t.keyCode]=!1}),document.addEventListener("mousemove",t=>{const e=this.game.camera,s=new r.Vector(t.pageX+e.xView,t.pageY+e.yView);this.transform.lookAt(s)}),document.addEventListener("click",t=>{const e=this.game.walls.find(t=>{const e=new o.Result;return this.damageCollider.collides(t.collider,e)});e?e.takeDamage():this.game.createPizzaObject(this.transform.position)})}render(t,e){super.render(t,e),this.damageCollider&&(t.rotate(-this.transform.angle),t.translate(-this.transform.position.x,-this.transform.position.y),t.strokeStyle="red",t.beginPath(),this.damageCollider.draw(t),t.stroke(),t.setTransform(1,0,0,1,0,0))}get direction(){let t=r.Vector.zero();return Object.keys(h.directions).forEach(e=>{(this.pressedKeys[e]||!1)&&(t=t.add(new r.Vector(...h.directions[e])))}),t}update(t){super.update(t);const e=this.direction.multiple(this.speed).multiple(t);this.transform.setPosition(this.transform.position.add(e)),this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y,this.damageCollider.x=this.transform.position.x,this.damageCollider.y=this.transform.position.y,this.damageCollider.angle=this.transform.angle,this.game.riotPolice.forEach(t=>{const e=new o.Result;if(this.collider.collides(t.collider,e)){const t=new r.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}}),this.game.walls.forEach(t=>{const e=new o.Result;if(this.collider.collides(t.collider,e)){if(t.hp<=0)return;const s=new r.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(s))}}),this.game.towns.forEach(t=>{const e=new o.Result;if(this.collider.collides(t.collider,e)){const t=new r.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}}),this.game.staticObjects.forEach(t=>{if(t.offColider)return;const e=new o.Result;if(this.collider.collides(t.static.collider,e)){const t=new r.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}})}}h.directions={87:[0,-1],65:[-1,0],83:[0,1],68:[1,0]},e.Player=h},function(t,e,s){const i=s(23);t.exports=class{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const s=t._polygon,n=t.x,r=t.y;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const o=t._bvh_padding,a=s?0:t.radius*t.scale,h=(s?t._min_x:n-a)-o,l=(s?t._min_y:r-a)-o,c=(s?t._max_x:n+a)+o,_=(s?t._max_y:r+a)+o;t._bvh_min_x=h,t._bvh_min_y=l,t._bvh_max_x=c,t._bvh_max_y=_;let u=this._hierarchy,d=0;if(u)for(;;){if(!u._bvh_branch){const e=u._bvh_parent,s=u._bvh_min_x,n=u._bvh_min_y,r=u._bvh_max_x,o=u._bvh_max_y,a=u._bvh_parent=t._bvh_parent=i.getBranch();a._bvh_parent=e,a._bvh_left=u,a._bvh_right=t,a._bvh_sort=d++,a._bvh_min_x=h<s?h:s,a._bvh_min_y=l<n?l:n,a._bvh_max_x=c>r?c:r,a._bvh_max_y=_>o?_:o,e?e._bvh_left===u?e._bvh_left=a:e._bvh_right=a:this._hierarchy=a;break}{const t=u._bvh_left,e=t._bvh_min_y,s=t._bvh_max_x,i=t._bvh_max_y,n=h<t._bvh_min_x?h:t._bvh_min_x,r=l<e?l:e,o=c>s?c:s,a=_>i?_:i,p=(o-n)*(a-r)-(s-t._bvh_min_x)*(i-e),f=u._bvh_right,v=f._bvh_min_x,m=f._bvh_min_y,b=f._bvh_max_x,y=f._bvh_max_y,g=h<v?h:v,x=l<m?l:m,w=c>b?c:b,O=_>y?_:y,P=(w-g)*(O-x)-(b-v)*(y-m);u._bvh_sort=d++,u._bvh_min_x=n<g?n:g,u._bvh_min_y=r<x?r:x,u._bvh_max_x=o>w?o:w,u._bvh_max_y=a>O?a:O,u=p<=P?t:f}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const s=t._bvh_parent,n=s._bvh_parent,r=s._bvh_left,o=r===t?s._bvh_right:r;if(o._bvh_parent=n,o._bvh_branch&&(o._bvh_sort=s._bvh_sort),n){n._bvh_left===s?n._bvh_left=o:n._bvh_right=o;let t=n;for(;t;){const e=t._bvh_left,s=e._bvh_min_x,i=e._bvh_min_y,n=e._bvh_max_x,r=e._bvh_max_y,o=t._bvh_right,a=o._bvh_min_x,h=o._bvh_min_y,l=o._bvh_max_x,c=o._bvh_max_y;t._bvh_min_x=s<a?s:a,t._bvh_min_y=i<h?i:h,t._bvh_max_x=n>l?n:l,t._bvh_max_y=r>c?r:c,t=t._bvh_parent}}else this._hierarchy=o;i.releaseBranch(s)}update(){const t=this._bodies,e=t.length;for(let s=0;s<e;++s){const e=t[s];let i=!1;if(i||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,i=!0),!i){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const s=e.x,n=e.y,r=t?0:e.radius*e.scale,o=t?e._min_x:s-r,a=t?e._min_y:n-r,h=t?e._max_x:s+r,l=t?e._max_y:n+r;i=o<e._bvh_min_x||a<e._bvh_min_y||h>e._bvh_max_x||l>e._bvh_max_y}i&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],s=t._bvh_min_x,i=t._bvh_min_y,n=t._bvh_max_x,r=t._bvh_max_y;let o=this._hierarchy,a=!0;if(!o||!o._bvh_branch)return e;for(;o;){if(a){a=!1;let t=o._bvh_branch?o._bvh_left:null;for(;t&&t._bvh_max_x>=s&&t._bvh_max_y>=i&&t._bvh_min_x<=n&&t._bvh_min_y<=r;)t=(o=t)._bvh_branch?o._bvh_left:null}const h=o._bvh_branch,l=h?o._bvh_right:null;if(l&&l._bvh_max_x>s&&l._bvh_max_y>i&&l._bvh_min_x<n&&l._bvh_min_y<r)o=l,a=!0;else{h||o===t||e.push(o);let s=o._bvh_parent;if(!s)break;for(;s&&s._bvh_right===o;)s=(o=s)._bvh_parent;o=s}}return e}draw(t){const e=this._bodies,s=e.length;for(let i=0;i<s;++i)e[i].draw(t)}drawBVH(t){let e=this._hierarchy,s=!0;for(;e;){if(s){s=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const i=e._bvh_branch,n=e._bvh_min_x,r=e._bvh_min_y,o=e._bvh_max_x,a=e._bvh_max_y,h=i?e._bvh_right:null;if(t.moveTo(n,r),t.lineTo(o,r),t.lineTo(o,a),t.lineTo(n,a),t.lineTo(n,r),h)e=h,s=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}},t.exports.default=t.exports},function(t,e){const s=[];class i{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return s.length?s.pop():new i}static releaseBranch(t){s.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}t.exports=i,t.exports.default=t.exports},function(t,e,s){const i=s(7);t.exports=class extends i{constructor(t=0,e=0,s=0,i=1,n=0){super(t,e,n),this.radius=s,this.scale=i}draw(t){const e=this.x,s=this.y,i=this.radius*this.scale;t.moveTo(e+i,s),t.arc(e,s,i,0,2*Math.PI)}},t.exports.default=t.exports},function(t,e,s){const i=s(10);class n extends i{constructor(t=0,e=0,s=0){super(t,e,[[0,0]],0,1,1,s),this._point=!0}}n.prototype.setPoints=void 0,t.exports=n,t.exports.default=t.exports},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(27);var n={NONE:"none",HORIZONTAL:"horizontal",VERTICAL:"vertical",BOTH:"both"};e.Camera=class{constructor(t,e,s,r,o,a){this.xView=t||0,this.yView=e||0,this.xDeadZone=0,this.yDeadZone=0,this.wView=s,this.hView=r,this.axis=n.BOTH,this.followed=null,this.viewportRect=new i.Rectangle(this.xView,this.yView,this.wView,this.hView),this.worldRect=new i.Rectangle(0,0,o,a)}follow(t,e,s){this.followed=t,this.xDeadZone=e,this.yDeadZone=s}update(){null!=this.followed&&(this.axis!=n.HORIZONTAL&&this.axis!=n.BOTH||(this.followed.position.x-this.xView+this.xDeadZone>this.wView?this.xView=this.followed.position.x-(this.wView-this.xDeadZone):this.followed.position.x-this.xDeadZone<this.xView&&(this.xView=this.followed.position.x-this.xDeadZone)),this.axis!=n.VERTICAL&&this.axis!=n.BOTH||(this.followed.position.y-this.yView+this.yDeadZone>this.hView?this.yView=this.followed.position.y-(this.hView-this.yDeadZone):this.followed.position.y-this.yDeadZone<this.yView&&(this.yView=this.followed.position.y-this.yDeadZone))),this.viewportRect.set(this.xView,this.yView),this.viewportRect.within(this.worldRect)||(this.viewportRect.left<this.worldRect.left&&(this.xView=this.worldRect.left),this.viewportRect.top<this.worldRect.top&&(this.yView=this.worldRect.top),this.viewportRect.right>this.worldRect.right&&(this.xView=this.worldRect.right-this.wView),this.viewportRect.bottom>this.worldRect.bottom&&(this.yView=this.worldRect.bottom-this.hView))}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Rectangle=class{constructor(t,e,s,i){this.left=t||0,this.top=e||0,this.width=s||0,this.height=i||0,this.right=this.left+this.width,this.bottom=this.top+this.height}set(t,e,s,i){this.left=t,this.top=e,this.width=s||this.width,this.height=i||this.height,this.right=this.left+this.width,this.bottom=this.top+this.height}within(t){return t.left<=this.left&&t.right>=this.right&&t.top<=this.top&&t.bottom>=this.bottom}overlaps(t){return this.left<t.right&&t.left<this.right&&this.top<t.bottom&&t.top<this.bottom}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Map=class{constructor(t,e){this.width=t,this.height=e,this.image=null}generate(){var t=document.createElement("canvas").getContext("2d");t.canvas.width=this.width,t.canvas.height=this.height;var e=1+~~(this.width/44),s=1+~~(this.height/44),i="black";t.save(),t.fillStyle="black";for(var n=0,r=0;r<e;n+=44,r++){t.beginPath();for(var o=0,a=0;a<s;o+=44,a++)t.rect(n,o,42,42);i="#fff",t.fillStyle=i,t.fill(),t.closePath()}t.restore(),this.image=new Image,this.image.src=t.canvas.toDataURL("image/png"),t=null}draw(t,e,s){var i,n,r,o,a,h;i=e,n=s,r=t.canvas.width,o=t.canvas.height,this.image.width-i<r&&(r=this.image.width-i),this.image.height-n<o&&(o=this.image.height-n),a=r,h=o,t.drawImage(this.image,i,n,r,o,0,0,a,h)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(4),o=s(2),a=s(11),h=s(3);class l extends n.Drawer{render(t){t.drawImage(this.assets.get("cosmonaut.svg"),-30,-55,62,85)}}e.Cosmonaut=class extends i.GameObject{constructor(t,e){super(t,new l(t),e.system.createCircle(t.position.x,t.position.y,15)),this.game=e,this.speed=a.getRandomBeetwen(70,100),this.target=null,this._transform=r.Transform.clone(t),window.cosmonaut=this}get direction(){let t=o.Vector.zero();const e=this.target?this.target.transform.position:this._transform.position;return o.Vector.distance(this.transform.position,e)>=5?(t=e.sub(this.transform.position),this.transform.lookAt(e)):(this.target&&(this.game.eatPizza(this.target),this.target=null),this.transform.rotate(this._transform.angle)),t.normalize()}update(t){super.update(t);const e=this.direction.multiple(this.speed*t);this.transform.setPosition(this.transform.position.add(e)),this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y,this.game.walls.forEach(t=>{const e=new h.Result;if(this.collider.collides(t.collider,e)){if(t.hp<=0)return;const s=new o.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y+5);this.transform.setPosition(this.transform.position.add(s))}}),this.game.towns.forEach(t=>{const e=new h.Result;if(this.collider.collides(t.collider,e)){const t=new o.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y+5);this.transform.setPosition(this.transform.position.add(t))}}),this.game.staticObjects.forEach(t=>{const e=new h.Result;if(this.collider.collides(t.static.collider,e)){console.log("COLLAPSE");const t=new o.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}})}}},function(t,e,s){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(s(31)),r=s(0),o=s(1);class a extends o.Drawer{render(t){t.drawImage(this.assets.get("pizza.svg"),-15,-15,30,30)}}e.PizzaDrawer=a;e.Pizza=class extends r.GameObject{constructor(t){super(t,new a(t)),this.id=n.default(),this.isWaitingToEating=!1}}},function(t,e,s){var i=s(32),n=s(33),r=n;r.v1=i,r.v4=n,t.exports=r},function(t,e,s){var i,n,r=s(12),o=s(13),a=0,h=0;t.exports=function(t,e,s){var l=e&&s||0,c=e||[],_=(t=t||{}).node||i,u=void 0!==t.clockseq?t.clockseq:n;if(null==_||null==u){var d=r();null==_&&(_=i=[1|d[0],d[1],d[2],d[3],d[4],d[5]]),null==u&&(u=n=16383&(d[6]<<8|d[7]))}var p=void 0!==t.msecs?t.msecs:(new Date).getTime(),f=void 0!==t.nsecs?t.nsecs:h+1,v=p-a+(f-h)/1e4;if(v<0&&void 0===t.clockseq&&(u=u+1&16383),(v<0||p>a)&&void 0===t.nsecs&&(f=0),f>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=p,h=f,n=u;var m=(1e4*(268435455&(p+=122192928e5))+f)%4294967296;c[l++]=m>>>24&255,c[l++]=m>>>16&255,c[l++]=m>>>8&255,c[l++]=255&m;var b=p/4294967296*1e4&268435455;c[l++]=b>>>8&255,c[l++]=255&b,c[l++]=b>>>24&15|16,c[l++]=b>>>16&255,c[l++]=u>>>8|128,c[l++]=255&u;for(var y=0;y<6;++y)c[l+y]=_[y];return e||o(c)}},function(t,e,s){var i=s(12),n=s(13);t.exports=function(t,e,s){var r=e&&s||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var o=(t=t||{}).random||(t.rng||i)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var a=0;a<16;++a)e[r+a]=o[a];return e||n(o)}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(5),o=s(11);class a extends n.Drawer{constructor(){super(...arguments),this.collider=null,this.camera=null,this.hp=a.MAX_HP,this.width=r.WALL_WIDTH,this.height=r.WALL_HEIGHT,this.map={5:"wall.svg",4:"wall1.svg",3:"wall2.svg",2:"wall3.svg",1:"wall4.svg"}}render(t){const e=this.map[this.hp]?this.map[this.hp]:"wall5.svg";t.drawImage(this.assets.get(e),-this.width,-this.height/2,this.width,this.height),this.collider&&(t.rotate(-this.transform.angle),t.translate(-this.transform.position.x,-this.transform.position.y),o.drawCircle(t,this.collider._x,this.collider._y,5),t.strokeStyle="red",t.beginPath(),t.stroke())}}a.MAX_HP=5;e.Wall=class extends i.GameObject{constructor(t,e){super(t,new a(t),e.system.createPolygon(t.position.x,t.position.y,[[0,-r.WALL_HEIGHT/2],[-r.WALL_WIDTH,-r.WALL_HEIGHT/2]],t.angle)),this.transform=t,this.game=e,this.hp=5,this.drawer.collider=this.collider,this.drawer.camera=this.game.camera}takeDamage(){this.hp--,this.drawer.hp--}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(5);e.WALLS_LIST=(()=>{const t=[{x:i.WALL_X,y:i.WALL_START-1,rotate:1.5*Math.PI}];for(let e=0;e<4;e++)t.push({x:i.WALL_X,y:t[e].y+i.WALL_WIDTH,rotate:1.5*Math.PI});const e=[{x:i.WALL_X+125,y:i.WALL_START-14,rotate:.039}];for(let t=0;t<16;t++)e.push({x:e[t].x+119.5,y:e[t].y+3.6,rotate:.039});const s=[{x:i.WALL_X,y:t[t.length-1].y+140,rotate:1.07*Math.PI}];for(let t=0;t<9;t++)s.push({x:s[t].x+116,y:s[t].y+26,rotate:1.07*Math.PI});const n=[{x:s[s.length-1].x+114,y:s[t.length-1].y+154,rotate:.95*Math.PI}];for(let t=0;t<2;t++)n.push({x:n[t].x+118,y:n[t].y-18,rotate:.95*Math.PI});const r=[{x:n[n.length-1].x+150,y:n[n.length-1].y-30,rotate:.74*Math.PI}];for(let t=0;t<5;t++)r.push({x:r[t].x+82,y:r[t].y-84,rotate:.75*Math.PI});const o=[{x:r[r.length-1].x+96,y:r[r.length-1].y-100,rotate:-1.5*Math.PI},{x:r[r.length-1].x+96,y:r[r.length-1].y-215,rotate:-1.5*Math.PI}];return console.log(o),t.concat(s).concat(n).concat(r).concat(o).concat(e)})()},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(5);e.TOWN_LIST=[{x:i.WALL_X,y:i.TOWN_START,rotate:1.5*Math.PI},{x:i.WALL_X,y:i.TOWN_START+5*i.WALL_WIDTH+36,rotate:1.5*Math.PI},{x:3766,y:1734,rotate:.74*Math.PI},{rotate:.75*Math.PI,x:4281,y:1208},{x:4285,y:960,rotate:1.5*Math.PI}]},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(5);class o extends n.Drawer{constructor(){super(...arguments),this.width=r.TOWN_HEIGHT,this.height=r.TOWN_HEIGHT}render(t){t.drawImage(this.assets.get("town.svg"),-this.width/2,-this.height/2,this.width,this.height)}}e.Town=class extends i.GameObject{constructor(t,e){super(t,new o(t),e.system.createCircle(t.position.x,t.position.y,20)),this.transform=t}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(4);class o extends n.Drawer{constructor(t,e,s,i){super(t),this.imgPath=e,this.w=s,this.h=i}render(t){t.drawImage(this.assets.get(this.imgPath),-this.w/2,-this.h/2,this.w,this.h)}}class a extends i.GameObject{constructor(t,e,s,i,n){super(t,new o(t,e,s,i),n.system.createCircle(t.position.x,t.position.y,(s>i?s:i)/2)),this.transform=t,this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y,console.log(this.collider.x,this.collider.y)}}e.Static=a;e.StaticObject=class{constructor(t,e,s,i,n,o,h=!1){this.offColider=h;const l=new r.Transform(n,i);this.static=new a(l,t,e,s,o)}render(t,e){this.static.render(t,e)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(4),o=s(2),a=s(3);s(40);class h extends n.Drawer{render(t){t.drawImage(this.assets.get("boss.svg"),-30,-55,62,85)}}e.Boss=class extends i.GameObject{constructor(t,e){super(t,new h(t),e.system.createCircle(t.position.x,t.position.y,200)),this.game=e,this.speed=20,this.directionVector=null,this._transform=r.Transform.clone(t),window.cosmonaut=this}get direction(){return o.Vector.zero(),this.directionVector?this.directionVector:o.Vector.zero()}update(t){super.update(t);const e=this.direction.multiple(this.speed*t);this.transform.setPosition(this.transform.position.add(e)),this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y;const s=new a.Result;if(this.collider.collides(this.game.player.collider,s)){this.directionVector=new o.Vector(0,-5);const t=new o.Vector(-s.overlap*s.overlap_x,-s.overlap*s.overlap_y/2);this.transform.setPosition(this.transform.position.add(t))}}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Animation=class{constructor(t,e,s,i=!1){this.value=t,this.target=e,this.duration=s,this.reverse=i,this.isStopped=!1,this.currentTime=this.timeout,this.startValue=t,this.startTarget=e,this.stepValue=(this.target-this.startValue)/60,this.timeout=this.stepValue/this.duration,this.currentTime=this.timeout,console.log("tm",this.timeout,this.duration)}update(t){this.isStopped||(console.log("ct",this.currentTime,t),this.currentTime-=t,this.currentTime<=0&&(this.currentTime=this.timeout,this.value+=this.value>this.target?-this.stepValue:this.stepValue,this.step()),this.value>=this.target&&(this.reverse?this.target=this.target===this.startTarget?this.startValue:this.startTarget:this.isStopped=!0))}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(43);class o extends n.Drawer{constructor(){super(...arguments),this.hide=!1}render(t){this.hide&&(t.globalAlpha=.3);const e=this.assets.get("house.svg");t.drawImage(e,-e.width/2,-e.height/2,e.width,e.height),t.globalAlpha=1}}e.HouseDrawer=o;e.House=class extends i.GameObject{constructor(t,e){super(t,new o(t),e.system.createCircle(t.position.x,t.position.y,200)),this.game=e}update(t){super.update(t);const e=new r.Result;this.drawer.hide=!!this.collider.collides(this.game.player.collider,e)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Config=class{constructor(){this.game={width:window.innerWidth,height:window.innerHeight},this.world={width:4444,height:2218}}}},function(t,e,s){"use strict";s.r(e);const i=[];class n{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return i.length?i.pop():new n}static releaseBranch(t){i.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}class r{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const s=t._polygon,i=t.x,r=t.y;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const o=t._bvh_padding,a=s?0:t.radius*t.scale,h=(s?t._min_x:i-a)-o,l=(s?t._min_y:r-a)-o,c=(s?t._max_x:i+a)+o,_=(s?t._max_y:r+a)+o;t._bvh_min_x=h,t._bvh_min_y=l,t._bvh_max_x=c,t._bvh_max_y=_;let u=this._hierarchy,d=0;if(u)for(;;){if(!u._bvh_branch){const e=u._bvh_parent,s=u._bvh_min_x,i=u._bvh_min_y,r=u._bvh_max_x,o=u._bvh_max_y,a=u._bvh_parent=t._bvh_parent=n.getBranch();a._bvh_parent=e,a._bvh_left=u,a._bvh_right=t,a._bvh_sort=d++,a._bvh_min_x=h<s?h:s,a._bvh_min_y=l<i?l:i,a._bvh_max_x=c>r?c:r,a._bvh_max_y=_>o?_:o,e?e._bvh_left===u?e._bvh_left=a:e._bvh_right=a:this._hierarchy=a;break}{const t=u._bvh_left,e=t._bvh_min_y,s=t._bvh_max_x,i=t._bvh_max_y,n=h<t._bvh_min_x?h:t._bvh_min_x,r=l<e?l:e,o=c>s?c:s,a=_>i?_:i,p=(o-n)*(a-r)-(s-t._bvh_min_x)*(i-e),f=u._bvh_right,v=f._bvh_min_x,m=f._bvh_min_y,b=f._bvh_max_x,y=f._bvh_max_y,g=h<v?h:v,x=l<m?l:m,w=c>b?c:b,O=_>y?_:y,P=(w-g)*(O-x)-(b-v)*(y-m);u._bvh_sort=d++,u._bvh_min_x=n<g?n:g,u._bvh_min_y=r<x?r:x,u._bvh_max_x=o>w?o:w,u._bvh_max_y=a>O?a:O,u=p<=P?t:f}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const s=t._bvh_parent,i=s._bvh_parent,r=s._bvh_left,o=r===t?s._bvh_right:r;if(o._bvh_parent=i,o._bvh_branch&&(o._bvh_sort=s._bvh_sort),i){i._bvh_left===s?i._bvh_left=o:i._bvh_right=o;let t=i;for(;t;){const e=t._bvh_left,s=e._bvh_min_x,i=e._bvh_min_y,n=e._bvh_max_x,r=e._bvh_max_y,o=t._bvh_right,a=o._bvh_min_x,h=o._bvh_min_y,l=o._bvh_max_x,c=o._bvh_max_y;t._bvh_min_x=s<a?s:a,t._bvh_min_y=i<h?i:h,t._bvh_max_x=n>l?n:l,t._bvh_max_y=r>c?r:c,t=t._bvh_parent}}else this._hierarchy=o;n.releaseBranch(s)}update(){const t=this._bodies,e=t.length;for(let s=0;s<e;++s){const e=t[s];let i=!1;if(i||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,i=!0),!i){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const s=e.x,n=e.y,r=t?0:e.radius*e.scale,o=t?e._min_x:s-r,a=t?e._min_y:n-r,h=t?e._max_x:s+r,l=t?e._max_y:n+r;i=o<e._bvh_min_x||a<e._bvh_min_y||h>e._bvh_max_x||l>e._bvh_max_y}i&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],s=t._bvh_min_x,i=t._bvh_min_y,n=t._bvh_max_x,r=t._bvh_max_y;let o=this._hierarchy,a=!0;if(!o||!o._bvh_branch)return e;for(;o;){if(a){a=!1;let t=o._bvh_branch?o._bvh_left:null;for(;t&&t._bvh_max_x>=s&&t._bvh_max_y>=i&&t._bvh_min_x<=n&&t._bvh_min_y<=r;)t=(o=t)._bvh_branch?o._bvh_left:null}const h=o._bvh_branch,l=h?o._bvh_right:null;if(l&&l._bvh_max_x>s&&l._bvh_max_y>i&&l._bvh_min_x<n&&l._bvh_min_y<r)o=l,a=!0;else{h||o===t||e.push(o);let s=o._bvh_parent;if(!s)break;for(;s&&s._bvh_right===o;)s=(o=s)._bvh_parent;o=s}}return e}draw(t){const e=this._bodies,s=e.length;for(let i=0;i<s;++i)e[i].draw(t)}drawBVH(t){let e=this._hierarchy,s=!0;for(;e;){if(s){s=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const i=e._bvh_branch,n=e._bvh_min_x,r=e._bvh_min_y,o=e._bvh_max_x,a=e._bvh_max_y,h=i?e._bvh_right:null;if(t.moveTo(n,r),t.lineTo(o,r),t.lineTo(o,a),t.lineTo(n,a),t.lineTo(n,r),h)e=h,s=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}}class o{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function a(t,e,s=null,i=!0){const n=t._polygon,r=e._polygon;let o=!1;return s&&(s.a=t,s.b=e,s.a_in_b=!0,s.b_in_a=!0,s.overlap=null,s.overlap_x=0,s.overlap_y=0),n&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),r&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),i&&!function(t,e){const s=t._polygon,i=s?0:t.x,n=s?0:t.y,r=s?0:t.radius*t.scale,o=s?t._min_x:i-r,a=s?t._min_y:n-r,h=s?t._max_x:i+r,l=s?t._max_y:n+r,c=e._polygon,_=c?0:e.x,u=c?0:e.y,d=c?0:e.radius*e.scale,p=c?e._min_x:_-d,f=c?e._min_y:u-d,v=c?e._max_x:_+d,m=c?e._max_y:u+d;return o<v&&a<m&&h>p&&l>f}(t,e)||(n&&t._dirty_normals&&t._calculateNormals(),r&&e._dirty_normals&&e._calculateNormals(),o=n&&r?function(t,e,s=null){const i=t._coords.length,n=e._coords.length;if(2===i&&2===n){const i=t._coords,n=e._coords;return s&&(s.overlap=0),i[0]===n[0]&&i[1]===n[1]}const r=t._coords,o=e._coords,a=t._normals,h=e._normals;if(i>2)for(let t=0,e=1;t<i;t+=2,e+=2)if(l(r,o,a[t],a[e],s))return!1;if(n>2)for(let t=0,e=1;t<n;t+=2,e+=2)if(l(r,o,h[t],h[e],s))return!1;return!0}(t,e,s):n?h(t,e,s,!1):r?h(e,t,s,!0):function(t,e,s=null){const i=t.radius*t.scale,n=e.radius*e.scale,r=e.x-t.x,o=e.y-t.y,a=i+n,h=r*r+o*o;if(h>a*a)return!1;if(s){const t=Math.sqrt(h);s.a_in_b=i<=n&&t<=n-i,s.b_in_a=n<=i&&t<=i-n,s.overlap=a-t,s.overlap_x=r/t,s.overlap_y=o/t}return!0}(t,e,s)),s&&(s.collision=o),o}function h(t,e,s=null,i=!1){const n=t._coords,r=t._edges,o=t._normals,a=e.x,h=e.y,l=e.radius*e.scale,c=2*l,_=l*l,u=n.length;let d=!0,p=!0,f=null,v=0,m=0;if(2===u){const t=a-n[0],e=h-n[1],i=t*t+e*e;if(i>_)return!1;if(s){const s=Math.sqrt(i);f=l-s,v=t/s,m=e/s,p=!1}}else for(let t=0,e=1;t<u;t+=2,e+=2){const i=a-n[t],b=h-n[e],y=r[t],g=r[e],x=i*y+b*g,w=x<0?-1:x>y*y+g*g?1:0;let O=!1,P=0,j=0,V=0;if(s&&d&&i*i+b*b>_&&(d=!1),w){const e=-1===w,o=e?0===t?u-2:t-2:t===u-2?0:t+2,c=o+1,d=a-n[o],f=h-n[c],v=r[o],m=r[c],y=d*v+f*m;if((y<0?-1:y>v*v+m*m?1:0)===-w){const t=e?i:d,n=e?b:f,r=t*t+n*n;if(r>_)return!1;if(s){const e=Math.sqrt(r);O=!0,P=l-e,j=t/e,V=n/e,p=!1}}}else{const n=o[t],r=o[e],a=i*n+b*r,h=a<0?-a:a;if(a>0&&h>l)return!1;s&&(O=!0,P=l-a,j=n,V=r,(p&&a>=0||P<c)&&(p=!1))}O&&(null===f||f>P)&&(f=P,v=j,m=V)}return s&&(s.a_in_b=i?p:d,s.b_in_a=i?d:p,s.overlap=f,s.overlap_x=i?-v:v,s.overlap_y=i?-m:m),!0}function l(t,e,s,i,n=null){const r=t.length,o=e.length;if(!r||!o)return!0;let a=null,h=null,l=null,c=null;for(let e=0,n=1;e<r;e+=2,n+=2){const r=t[e]*s+t[n]*i;(null===a||a>r)&&(a=r),(null===h||h<r)&&(h=r)}for(let t=0,n=1;t<o;t+=2,n+=2){const r=e[t]*s+e[n]*i;(null===l||l>r)&&(l=r),(null===c||c<r)&&(c=r)}if(a>c||h<l)return!0;if(n){let t=0;if(a<l)if(n.a_in_b=!1,h<c)t=h-l,n.b_in_a=!1;else{const e=h-l,s=c-a;t=e<s?e:-s}else if(n.b_in_a=!1,h>c)t=a-c,n.a_in_b=!1;else{const e=h-l,s=c-a;t=e<s?e:-s}const e=n.overlap,r=t<0?-t:t;if(null===e||e>r){const e=t<0?-1:1;n.overlap=r,n.overlap_x=s*e,n.overlap_y=i*e}}return!1}class c{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.padding=s,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=s,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,s=!0){return a(this,t,e,s)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new o}static createResult(){return new o}}class _ extends c{constructor(t=0,e=0,s=0,i=1,n=0){super(t,e,n),this.radius=s,this.scale=i}draw(t){const e=this.x,s=this.y,i=this.radius*this.scale;t.moveTo(e+i,s),t.arc(e,s,i,0,2*Math.PI)}}class u extends c{constructor(t=0,e=0,s=[],i=0,n=1,r=1,o=0){super(t,e,o),this.angle=i,this.scale_x=n,this.scale_y=r,this._polygon=!0,this._x=t,this._y=e,this._angle=i,this._scale_x=n,this._scale_y=r,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,u.prototype.setPoints.call(this,s)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let s=2;s<e.length;s+=2)t.lineTo(e[s],e[s+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const s=this._points;for(let i=0,n=0,r=1;i<e;++i,n+=2,r+=2){const e=t[i];s[n]=e[0],s[r]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,s=this.angle,i=this.scale_x,n=this.scale_y,r=this._points,o=this._coords,a=r.length;let h,l,c,_;for(let u=0,d=1;u<a;u+=2,d+=2){let a=r[u]*i,p=r[d]*n;if(s){const t=Math.cos(s),e=Math.sin(s),i=a;a=i*t-p*e,p=i*e+p*t}a+=t,p+=e,o[u]=a,o[d]=p,0===u?(h=l=a,c=_=p):(a<h?h=a:a>l&&(l=a),p<c?c=p:p>_&&(_=p))}this._x=t,this._y=e,this._angle=s,this._scale_x=i,this._scale_y=n,this._min_x=h,this._min_y=c,this._max_x=l,this._max_y=_,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,s=this._normals,i=t.length;for(let n=0,r=1;n<i;n+=2,r+=2){const o=n+2<i?n+2:0,a=t[o]-t[n],h=t[o+1]-t[r],l=a||h?Math.sqrt(a*a+h*h):0;e[n]=a,e[r]=h,s[n]=l?h/l:0,s[r]=l?-a/l:0}this._dirty_normals=!1}}class d extends u{constructor(t=0,e=0,s=0){super(t,e,[[0,0]],0,1,1,s),this._point=!0}}d.prototype.setPoints=void 0,s.d(e,"default",function(){return p}),s.d(e,"Collisions",function(){return p}),s.d(e,"Result",function(){return o}),s.d(e,"Circle",function(){return _}),s.d(e,"Polygon",function(){return u}),s.d(e,"Point",function(){return d});class p{constructor(){this._bvh=new r}createCircle(t=0,e=0,s=0,i=1,n=0){const r=new _(t,e,s,i,n);return this._bvh.insert(r),r}createPolygon(t=0,e=0,s=[[0,0]],i=0,n=1,r=1,o=0){const a=new u(t,e,s,i,n,r,o);return this._bvh.insert(a),a}createPoint(t=0,e=0,s=0){const i=new d(t,e,s);return this._bvh.insert(i),i}createResult(){return new o}static createResult(){return new o}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,s=null,i=!0){return a(t,e,s,i)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VudGl0aWVzL0dhbWVPYmplY3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VudGl0aWVzL0RyYXdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZW50aXRpZXMvVmVjdG9yLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXRlY3QtY29sbGlzaW9ucy9zb3VyY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VudGl0aWVzL1RyYW5zZm9ybS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvb2JqZWN0cy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Fzc2V0cy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV0ZWN0LWNvbGxpc2lvbnMvc291cmNlL21vZHVsZXMvQm9keS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV0ZWN0LWNvbGxpc2lvbnMvc291cmNlL21vZHVsZXMvUmVzdWx0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXRlY3QtY29sbGlzaW9ucy9zb3VyY2UvbW9kdWxlcy9TQVQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RldGVjdC1jb2xsaXNpb25zL3NvdXJjZS9tb2R1bGVzL1BvbHlnb24uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2xpYi9ybmctYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvYnl0ZXNUb1V1aWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZS5jc3M/OGYzNCIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0dhbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BsYXllci50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV0ZWN0LWNvbGxpc2lvbnMvc291cmNlL21vZHVsZXMvQlZILmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kZXRlY3QtY29sbGlzaW9ucy9zb3VyY2UvbW9kdWxlcy9CVkhCcmFuY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RldGVjdC1jb2xsaXNpb25zL3NvdXJjZS9tb2R1bGVzL0NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGV0ZWN0LWNvbGxpc2lvbnMvc291cmNlL21vZHVsZXMvUG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VudGl0aWVzL0NhbWVyYS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZW50aXRpZXMvUmVjdGFuZ2xlLnRzIiwid2VicGFjazovLy8uL3NyYy9NYXAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Nvc21vbmF1dC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUGl6emEudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvdjEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvdjQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1dhbGwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL29iamVjdHMvd2FsbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvb2JqZWN0cy90b3duLnRzIiwid2VicGFjazovLy8uL3NyYy9Ub3duLnRzIiwid2VicGFjazovLy8uL3NyYy9TdGF0aWNPYmplY3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Jvc3MudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VudGl0aWVzL0FuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvSG91c2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29sbGlzaW9ucy9zcmMvbW9kdWxlcy9CVkhCcmFuY2gubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2xsaXNpb25zL3NyYy9tb2R1bGVzL0JWSC5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbGxpc2lvbnMvc3JjL21vZHVsZXMvUmVzdWx0Lm1qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29sbGlzaW9ucy9zcmMvbW9kdWxlcy9TQVQubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2xsaXNpb25zL3NyYy9tb2R1bGVzL0JvZHkubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2xsaXNpb25zL3NyYy9tb2R1bGVzL0NpcmNsZS5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbGxpc2lvbnMvc3JjL21vZHVsZXMvUG9seWdvbi5tanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbGxpc2lvbnMvc3JjL21vZHVsZXMvUG9pbnQubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb2xsaXNpb25zL3NyYy9Db2xsaXNpb25zLm1qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkdhbWVPYmplY3QiLCJbb2JqZWN0IE9iamVjdF0iLCJ0cmFuc2Zvcm0iLCJkcmF3ZXIiLCJjb2xsaWRlciIsImFuaW1hdGlvbiIsInRoaXMiLCJjdHgiLCJjYW1lcmEiLCJkcmF3IiwiZHQiLCJ1cGRhdGUiLCJBc3NldHNfMSIsIkRyYXdlciIsImFzc2V0cyIsIkFzc2V0cyIsImdldEluc3RhbmNlIiwieFZpZXciLCJwb3NpdGlvbiIsIngiLCJ5VmlldyIsInkiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJhbmdsZSIsInJlbmRlciIsInNldFRyYW5zZm9ybSIsIlZlY3RvciIsInZlY3RvciIsImZhY3RvciIsInlGYWN0b3IiLCJub3JtYWwiLCJNYXRoIiwic3FydCIsInYxIiwidjIiLCJhdGFuMiIsInBvdyIsInYiLCJCVkgiLCJDaXJjbGUiLCJQb2x5Z29uIiwiUG9pbnQiLCJSZXN1bHQiLCJTQVQiLCJDb2xsaXNpb25zIiwiX2J2aCIsInJhZGl1cyIsInNjYWxlIiwicGFkZGluZyIsImJvZHkiLCJpbnNlcnQiLCJwb2ludHMiLCJzY2FsZV94Iiwic2NhbGVfeSIsImJvZGllcyIsInJlbW92ZSIsImNvbnRleHQiLCJkcmF3QlZIIiwicG90ZW50aWFscyIsInNvdXJjZSIsInRhcmdldCIsInJlc3VsdCIsImFhYmIiLCJkZWZhdWx0IiwiVmVjdG9yXzEiLCJUcmFuc2Zvcm0iLCJfcG9zaXRpb24iLCJfYW5nbGUiLCJfc2NhbGUiLCJfc2l6ZSIsInNpemUiLCJjbG9uZSIsIldBTExfSEVJR0hUIiwiV0FMTF9XSURUSCIsIldBTExfWCIsIlRPV05fSEVJR0hUIiwiVE9XTl9TVEFSVCIsIldBTExfU1RBUlQiLCJjb25zb2xlIiwibG9nIiwiYXNzZXRzTWFwIiwiYXNzZXRzTGlzdCIsImluc3RhbmNlIiwiUHJvbWlzZSIsInJlcyIsImltYWdlIiwiSW1hZ2UiLCJzcmMiLCJvbmxvYWQiLCJhbGwiLCJtYXAiLCJsb2FkT25lIiwiX2NpcmNsZSIsIl9wb2x5Z29uIiwiX3BvaW50IiwiX2J2aF9wYXJlbnQiLCJfYnZoX2JyYW5jaCIsIl9idmhfcGFkZGluZyIsIl9idmhfbWluX3giLCJfYnZoX21pbl95IiwiX2J2aF9tYXhfeCIsIl9idmhfbWF4X3kiLCJidmgiLCJFcnJvciIsImNvbGxpc2lvbiIsImEiLCJiIiwiYV9pbl9iIiwiYl9pbl9hIiwib3ZlcmxhcCIsIm92ZXJsYXBfeCIsIm92ZXJsYXBfeSIsInBvbHlnb25DaXJjbGUiLCJyZXZlcnNlIiwiYV9jb29yZHMiLCJfY29vcmRzIiwiYV9lZGdlcyIsIl9lZGdlcyIsImFfbm9ybWFscyIsIl9ub3JtYWxzIiwiYl94IiwiYl95IiwiYl9yYWRpdXMiLCJiX3JhZGl1czIiLCJyYWRpdXNfc3F1YXJlZCIsImNvdW50IiwibGVuZ3RoIiwiY29vcmRfeCIsImNvb3JkX3kiLCJsZW5ndGhfc3F1YXJlZCIsIml4IiwiaXkiLCJlZGdlX3giLCJlZGdlX3kiLCJkb3QiLCJyZWdpb24iLCJ0bXBfb3ZlcmxhcHBpbmciLCJ0bXBfb3ZlcmxhcCIsInRtcF9vdmVybGFwX3giLCJ0bXBfb3ZlcmxhcF95IiwibGVmdCIsIm90aGVyX3giLCJvdGhlcl95IiwiY29vcmQyX3giLCJjb29yZDJfeSIsImVkZ2UyX3giLCJlZGdlMl95IiwiZG90MiIsInRhcmdldF94IiwidGFyZ2V0X3kiLCJub3JtYWxfeCIsIm5vcm1hbF95IiwiYWJzb2x1dGVfbGVuZ3RoIiwic2VwYXJhdGluZ0F4aXMiLCJiX2Nvb3JkcyIsImFfY291bnQiLCJiX2NvdW50IiwiYV9zdGFydCIsImFfZW5kIiwiYl9zdGFydCIsImJfZW5kIiwib3B0aW9uMSIsIm9wdGlvbjIiLCJjdXJyZW50X292ZXJsYXAiLCJhYnNvbHV0ZV9vdmVybGFwIiwic2lnbiIsImFfcG9seWdvbiIsImJfcG9seWdvbiIsIl9kaXJ0eV9jb29yZHMiLCJfeCIsIl95IiwiX3NjYWxlX3giLCJfc2NhbGVfeSIsIl9jYWxjdWxhdGVDb29yZHMiLCJhX3giLCJhX3kiLCJhX3JhZGl1cyIsImFfbWluX3giLCJfbWluX3giLCJhX21pbl95IiwiX21pbl95IiwiYV9tYXhfeCIsIl9tYXhfeCIsImFfbWF4X3kiLCJfbWF4X3kiLCJiX21pbl94IiwiYl9taW5feSIsImJfbWF4X3giLCJiX21heF95IiwiYWFiYkFBQkIiLCJfZGlydHlfbm9ybWFscyIsIl9jYWxjdWxhdGVOb3JtYWxzIiwiYl9ub3JtYWxzIiwicG9seWdvblBvbHlnb24iLCJkaWZmZXJlbmNlX3giLCJkaWZmZXJlbmNlX3kiLCJyYWRpdXNfc3VtIiwiY2lyY2xlQ2lyY2xlIiwiQm9keSIsInN1cGVyIiwiX3BvaW50cyIsInNldFBvaW50cyIsImNvb3JkcyIsIm1vdmVUbyIsImFyYyIsIlBJIiwibGluZVRvIiwibmV3X3BvaW50cyIsIkZsb2F0NjRBcnJheSIsIm5ld19wb2ludCIsIm1pbl94IiwibWF4X3giLCJtaW5feSIsIm1heF95IiwiY29zIiwic2luIiwidG1wX3giLCJlZGdlcyIsIm5vcm1hbHMiLCJuZXh0IiwiZHJhd0NpcmNsZSIsImZpbGwiLCJiZWdpblBhdGgiLCJzdHJva2UiLCJkcmF3VHJpYW5nbGUiLCJnZXRSYW5kb21CZWV0d2VuIiwiZnJvbSIsInRvIiwicmFuZG9tIiwiZ2V0UmFuZG9tVmFsdWVzIiwiY3J5cHRvIiwid2luZG93IiwibXNDcnlwdG8iLCJybmRzOCIsIlVpbnQ4QXJyYXkiLCJybmRzIiwiQXJyYXkiLCJieXRlVG9IZXgiLCJ0b1N0cmluZyIsInN1YnN0ciIsImJ1ZiIsIm9mZnNldCIsImJ0aCIsImpvaW4iLCJHYW1lXzEiLCJjb25maWdfMSIsImNhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlkIiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjb25maWciLCJDb25maWciLCJ3aWR0aCIsImdhbWUiLCJoZWlnaHQiLCJjbGFzc0xpc3QiLCJhZGQiLCJnZXRDb250ZXh0IiwiYXBwZW5kQ2hpbGQiLCJHYW1lIiwiX19hd2FpdGVyIiwibG9hZCIsInRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsImxvb3AiLCJjbGVhclJlY3QiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjb250ZW50Iiwib3B0aW9ucyIsImhtciIsImluc2VydEludG8iLCJ1bmRlZmluZWQiLCJsb2NhbHMiLCJwdXNoIiwidXNlU291cmNlTWFwIiwibGlzdCIsIml0ZW0iLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZVJvb3QiLCJjb25jYXQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJmbiIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhdG9iIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnZXRFbGVtZW50IiwicGFyZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImlkeCIsImluZGV4T2YiLCJzcGxpY2UiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJhdHRycyIsInR5cGUiLCJub25jZSIsIm5jIiwiZ2V0Tm9uY2UiLCJhZGRBdHRycyIsImVsIiwia2V5cyIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJvYmoiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJsaW5rIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJocmVmIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwiaW5kZXgiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsImxvY2F0aW9uIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsInJlcGxhY2UiLCJmdWxsTWF0Y2giLCJvcmlnVXJsIiwibmV3VXJsIiwidW5xdW90ZWRPcmlnVXJsIiwidHJpbSIsIiQxIiwidGVzdCIsIlBsYXllcl8xIiwiQ2FtZXJhXzEiLCJNYXBfMSIsIkNvc21vbmF1dF8xIiwiUGl6emFfMSIsIlRyYW5zZm9ybV8xIiwiZGV0ZWN0X2NvbGxpc2lvbnNfMSIsIldhbGxfMSIsIndhbGxfMSIsInRvd25fMSIsIlRvd25fMSIsIlN0YXRpY09iamVjdF8xIiwiQm9zc18xIiwiSG91c2VfMSIsInJpb3RQb2xpY2UiLCJwaXp6YXMiLCJzdGF0aWNPYmplY3RzIiwic3lzdGVtIiwicGxheWVyIiwiUGxheWVyIiwicm9vbSIsIndvcmxkIiwiTWFwIiwiY3JlYXRlUmlvdFBvbGljZSIsImdlbmVyYXRlIiwiQ2FtZXJhIiwiZm9sbG93IiwiY3JlYXRlV2FsbHMiLCJjcmVhdGVUb3ducyIsImNyZWF0ZVN0YXRpYyIsImJvc3MiLCJCb3NzIiwiaG91c2UiLCJIb3VzZSIsImRyYXdJbWFnZSIsInJlbmRlclNxdWFyZSIsInJlbmRlclJpb3RQb2xpY2UiLCJyZW5kZXJQaXp6YXMiLCJyZW5kZXJXYWxscyIsInJlbmRlclRvd25zIiwicmVuZGVyU3RhdGljIiwiYXZhaWxhYmxlUGl6emFzIiwicGl6emEiLCJjb3Ntb25hdXQiLCJkaXN0YW5jZSIsImlzV2FpdGluZ1RvRWF0aW5nIiwiaGFzIiwic2V0IiwibWluRGlzdGFuY2UiLCJyZWR1Y2UiLCJtaW4iLCJmaW5kIiwidXBkYXRlUmlvdFBvbGljZSIsIl8iLCJDb3Ntb25hdXQiLCJmaW5kSW5kZXgiLCJfcGl6emEiLCJQaXp6YSIsInNlYXJjaEludGVyc2VjdGlvbiIsIndhbGxzIiwiV0FMTFNfTElTVCIsIl93YWxsIiwiV2FsbCIsIndhbGwiLCJ0b3ducyIsIlRPV05fTElTVCIsIl90b3duIiwiVG93biIsInRvd24iLCJTdGF0aWNPYmplY3QiLCJHYW1lT2JqZWN0XzEiLCJEcmF3ZXJfMSIsIlBsYXllckRyYXdlciIsImNyZWF0ZUNpcmNsZSIsInNwZWVkIiwicHJlc3NlZEtleXMiLCJkYW1hZ2VDb2xsaWRlciIsImNyZWF0ZVBvbHlnb24iLCJsaXN0ZW4iLCJhZGRFdmVudExpc3RlbmVyIiwia2V5Q29kZSIsInBhZ2VYIiwicGFnZVkiLCJsb29rQXQiLCJjb2xsaWRlcyIsInRha2VEYW1hZ2UiLCJjcmVhdGVQaXp6YU9iamVjdCIsInN0cm9rZVN0eWxlIiwiZGlyZWN0aW9uIiwiemVybyIsImRpcmVjdGlvbnMiLCJwYXRoIiwibXVsdGlwbGUiLCJzZXRQb3NpdGlvbiIsInBvbGljZSIsImhwIiwiX3N0YXRpYyIsIm9mZkNvbGlkZXIiLCJzdGF0aWMiLCI4NyIsIjY1IiwiODMiLCI2OCIsIkJWSEJyYW5jaCIsIl9oaWVyYXJjaHkiLCJfYm9kaWVzIiwiX2RpcnR5X2JyYW5jaGVzIiwidXBkYXRpbmciLCJwb2x5Z29uIiwiYm9keV94IiwiYm9keV95IiwiYm9keV9taW5feCIsImJvZHlfbWluX3kiLCJib2R5X21heF94IiwiYm9keV9tYXhfeSIsImN1cnJlbnQiLCJzb3J0IiwiZ3JhbmRwYXJlbnQiLCJwYXJlbnRfbWluX3giLCJwYXJlbnRfbWluX3kiLCJwYXJlbnRfbWF4X3giLCJwYXJlbnRfbWF4X3kiLCJuZXdfcGFyZW50IiwiZ2V0QnJhbmNoIiwiX2J2aF9sZWZ0IiwiX2J2aF9yaWdodCIsIl9idmhfc29ydCIsImxlZnRfbWluX3kiLCJsZWZ0X21heF94IiwibGVmdF9tYXhfeSIsImxlZnRfbmV3X21pbl94IiwibGVmdF9uZXdfbWluX3kiLCJsZWZ0X25ld19tYXhfeCIsImxlZnRfbmV3X21heF95IiwibGVmdF9kaWZmZXJlbmNlIiwicmlnaHQiLCJyaWdodF9taW5feCIsInJpZ2h0X21pbl95IiwicmlnaHRfbWF4X3giLCJyaWdodF9tYXhfeSIsInJpZ2h0X25ld19taW5feCIsInJpZ2h0X25ld19taW5feSIsInJpZ2h0X25ld19tYXhfeCIsInJpZ2h0X25ld19tYXhfeSIsInJpZ2h0X2RpZmZlcmVuY2UiLCJwYXJlbnRfbGVmdCIsInNpYmxpbmciLCJicmFuY2giLCJsZWZ0X21pbl94IiwicmVsZWFzZUJyYW5jaCIsInJlc3VsdHMiLCJ0cmF2ZXJzZV9sZWZ0IiwiYnJhbmNoX3Bvb2wiLCJwb3AiLCJSZWN0YW5nbGVfMSIsIkFYSVMiLCJOT05FIiwiSE9SSVpPTlRBTCIsIlZFUlRJQ0FMIiwiQk9USCIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0Iiwid29ybGRXaWR0aCIsIndvcmxkSGVpZ2h0IiwieERlYWRab25lIiwieURlYWRab25lIiwid1ZpZXciLCJoVmlldyIsImF4aXMiLCJmb2xsb3dlZCIsInZpZXdwb3J0UmVjdCIsIlJlY3RhbmdsZSIsIndvcmxkUmVjdCIsImdhbWVPYmplY3QiLCJ3aXRoaW4iLCJ0b3AiLCJib3R0b20iLCJyb3dzIiwiY29sdW1ucyIsImNvbG9yIiwic2F2ZSIsImZpbGxTdHlsZSIsInJlY3QiLCJjbG9zZVBhdGgiLCJyZXN0b3JlIiwidG9EYXRhVVJMIiwic3giLCJzeSIsInNXaWR0aCIsInNIZWlnaHQiLCJkV2lkdGgiLCJkSGVpZ2h0IiwidXRpbHNfMSIsIkNvc21vbmF1dERyYXdlciIsIl90cmFuc2Zvcm0iLCJzdWIiLCJlYXRQaXp6YSIsIm5vcm1hbGl6ZSIsInV1aWRfMSIsIl9faW1wb3J0RGVmYXVsdCIsIlBpenphRHJhd2VyIiwidjQiLCJ1dWlkIiwiX25vZGVJZCIsIl9jbG9ja3NlcSIsInJuZyIsImJ5dGVzVG9VdWlkIiwiX2xhc3RNU2VjcyIsIl9sYXN0TlNlY3MiLCJub2RlIiwiY2xvY2tzZXEiLCJzZWVkQnl0ZXMiLCJtc2VjcyIsIkRhdGUiLCJnZXRUaW1lIiwibnNlY3MiLCJ0bCIsInRtaCIsImlpIiwiY29uc3RhbnRzXzEiLCJXYWxsRHJhd2VyIiwiTUFYX0hQIiwiNSIsIjQiLCIzIiwiMiIsIjEiLCJsaXN0X2xlZnQiLCJsaXN0X3RvcCIsImxpc3RfYm90dG9tX2ZpcnN0IiwibGlzdF9ib3R0b21fc2Vjb25kIiwibGlzdF9ib3R0b21fdGhpcmQiLCJsaXN0X3JpZ2h0IiwiVG93bkRyYXdlciIsIlN0YXRpY0RyYXdlciIsImltZ1BhdGgiLCJ3IiwiaCIsIlN0YXRpYyIsIkJvc3NEcmF3ZXIiLCJkaXJlY3Rpb25WZWN0b3IiLCJBbmltYXRpb24iLCJkdXJhdGlvbiIsImlzU3RvcHBlZCIsImN1cnJlbnRUaW1lIiwidGltZW91dCIsInN0YXJ0VmFsdWUiLCJzdGFydFRhcmdldCIsInN0ZXBWYWx1ZSIsInN0ZXAiLCJjb2xsaXNpb25zXzEiLCJIb3VzZURyYXdlciIsImhpZGUiLCJnbG9iYWxBbHBoYSIsImltZyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIkJWSF9CVkgiLCJCb2R5X0JvZHkiLCJDaXJjbGVfQ2lyY2xlIiwiUG9seWdvbl9Qb2x5Z29uIiwiUG9pbnRfUG9pbnQiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiQ29sbGlzaW9uc19Db2xsaXNpb25zIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkExQixFQUFBa0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFNLEtBQUFOLEVBQUFyQixFQUFBVSxFQUFBZSxFQUFBRSxFQUFBLFNBQUFBLEdBQWdILE9B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bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTQpO1xuIiwiaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9UcmFuc2Zvcm0nO1xuaW1wb3J0IHsgRHJhd2VyIH0gZnJvbSAnLi9EcmF3ZXInO1xuaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSAnLi9DYW1lcmEnO1xuaW1wb3J0IHsgQW5pbWF0aW9uIH0gZnJvbSAnLi9BbmltYXRpb24nO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgR2FtZU9iamVjdCB7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyB0cmFuc2Zvcm06IFRyYW5zZm9ybSxcbiAgICAgICAgcHVibGljIGRyYXdlcjogRHJhd2VyLFxuICAgICAgICBwdWJsaWMgY29sbGlkZXI/OiBhbnksXG4gICAgICAgIHByb3RlY3RlZCBhbmltYXRpb24/OiBBbmltYXRpb25cbiAgICApIHt9XG5cbiAgICBwdWJsaWMgcmVuZGVyKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBjYW1lcmE6IENhbWVyYSkge1xuICAgICAgICB0aGlzLmRyYXdlci5kcmF3KGN0eCwgY2FtZXJhKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlKGR0OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi51cGRhdGUoZHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSAnLi9DYW1lcmEnO1xuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gJy4vR2FtZU9iamVjdCc7XG5pbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tICcuL1RyYW5zZm9ybSc7XG5pbXBvcnQgeyBBc3NldHMgfSBmcm9tICcuLi9Bc3NldHMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRHJhd2VyIHtcbiAgICBwcm90ZWN0ZWQgYXNzZXRzOiBBc3NldHM7XG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIHRyYW5zZm9ybTogVHJhbnNmb3JtKSB7XG4gICAgICAgIHRoaXMuYXNzZXRzID0gQXNzZXRzLmdldEluc3RhbmNlKCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHJlbmRlcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk7XG5cbiAgICBwdWJsaWMgZHJhdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgY2FtZXJhOiBDYW1lcmEpIHtcbiAgICAgICAgaWYgKGNhbWVyYS54VmlldyAtIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnggPiAxMDAgJiZcbiAgICAgICAgICAgIGNhbWVyYS55VmlldyAtIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnkgPiAxMDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjdHgudHJhbnNsYXRlKFxuICAgICAgICAgICAgLWNhbWVyYS54VmlldyArIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLngsXG4gICAgICAgICAgICAtY2FtZXJhLnlWaWV3ICsgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24ueVxuICAgICAgICApO1xuICAgICAgICBjdHgucm90YXRlKHRoaXMudHJhbnNmb3JtLmFuZ2xlKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoY3R4KTtcblxuICAgICAgICBjdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBWZWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB4OiBudW1iZXIsIHB1YmxpYyB5OiBudW1iZXIpIHtcbiAgICB9XG5cbiAgICBhZGQodmVjdG9yOiBWZWN0b3IpOiBWZWN0b3Ige1xuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvcih0aGlzLnggKyB2ZWN0b3IueCwgdGhpcy55ICsgdmVjdG9yLnkpO1xuICAgIH1cblxuICAgIHN1Yih2ZWN0b3I6IFZlY3Rvcik6IFZlY3RvciB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKHRoaXMueCAtIHZlY3Rvci54LCB0aGlzLnkgLSB2ZWN0b3IueSk7XG4gICAgfVxuXG4gICAgbXVsdGlwbGUoZmFjdG9yOiBudW1iZXIsIHlGYWN0b3IgPzogbnVtYmVyKTogVmVjdG9yIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IodGhpcy54ICogZmFjdG9yLCB0aGlzLnkgKiAoeUZhY3RvciAhPSBudWxsID8geUZhY3RvciA6IGZhY3RvcikpO1xuICAgIH1cblxuICAgIG5vcm1hbGl6ZSgpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSk7XG4gICAgICAgIGlmICghbm9ybWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvcih0aGlzLnggLyBub3JtYWwsIHRoaXMueSAvIG5vcm1hbCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHplcm8oKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKDAsIDApXG4gICAgfVxuXG4gICAgc3RhdGljIGFuZ2xlKHYxOiBWZWN0b3IsIHYyOiBWZWN0b3IpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5hdGFuMih2MS54IC0gdjIueCwgLSh2MS55IC0gdjIueSkpO1xuICAgIH1cblxuICAgIHN0YXRpYyBkaXN0YW5jZSh2MTogVmVjdG9yLCB2MjogVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3codjEueCAtIHYyLngsIDIpICsgTWF0aC5wb3codjEueSAtIHYyLnksIDIpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgY2xvbmUodjogVmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKHYueCwgdi55KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgdHVybkFyb3VuZCh2OiBWZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IoLXYueCwgLXYueSk7XG4gICAgfVxufVxuIiwiY29uc3QgQlZIID0gcmVxdWlyZSgnLi9tb2R1bGVzL0JWSC5qcycpXG5jb25zdCBDaXJjbGUgPSByZXF1aXJlKCcuL21vZHVsZXMvQ2lyY2xlLmpzJylcbmNvbnN0IFBvbHlnb24gPSByZXF1aXJlKCcuL21vZHVsZXMvUG9seWdvbi5qcycpXG5jb25zdCBQb2ludCA9IHJlcXVpcmUoJy4vbW9kdWxlcy9Qb2ludC5qcycpXG5jb25zdCBSZXN1bHQgPSByZXF1aXJlKCcuL21vZHVsZXMvUmVzdWx0LmpzJylcbmNvbnN0IFNBVCA9IHJlcXVpcmUoJy4vbW9kdWxlcy9TQVQuanMnKVxuXG4vKipcbiAqIEEgY29sbGlzaW9uIHN5c3RlbSB1c2VkIHRvIHRyYWNrIGJvZGllcyBpbiBvcmRlciB0byBpbXByb3ZlIGNvbGxpc2lvbiBkZXRlY3Rpb24gcGVyZm9ybWFuY2VcbiAqIEBjbGFzc1xuICovXG5jbGFzcyBDb2xsaXNpb25zIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX2J2aCA9IG5ldyBCVkgoKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB7QGxpbmsgQ2lyY2xlfSBhbmQgaW5zZXJ0cyBpdCBpbnRvIHRoZSBjb2xsaXNpb24gc3lzdGVtXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbeCA9IDBdIFRoZSBzdGFydGluZyBYIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFt5ID0gMF0gVGhlIHN0YXJ0aW5nIFkgY29vcmRpbmF0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gW3JhZGl1cyA9IDBdIFRoZSByYWRpdXNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZSA9IDFdIFRoZSBzY2FsZVxuICAgKiBAcGFyYW0ge051bWJlcn0gW3BhZGRpbmcgPSAwXSBUaGUgYW1vdW50IHRvIHBhZCB0aGUgYm91bmRpbmcgdm9sdW1lIHdoZW4gdGVzdGluZyBmb3IgcG90ZW50aWFsIGNvbGxpc2lvbnNcbiAgICogQHJldHVybnMge0NpcmNsZX1cbiAgICovXG4gIGNyZWF0ZUNpcmNsZSAoeCA9IDAsIHkgPSAwLCByYWRpdXMgPSAwLCBzY2FsZSA9IDEsIHBhZGRpbmcgPSAwKSB7XG4gICAgY29uc3QgYm9keSA9IG5ldyBDaXJjbGUoeCwgeSwgcmFkaXVzLCBzY2FsZSwgcGFkZGluZylcblxuICAgIHRoaXMuX2J2aC5pbnNlcnQoYm9keSlcblxuICAgIHJldHVybiBib2R5XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHtAbGluayBQb2x5Z29ufSBhbmQgaW5zZXJ0cyBpdCBpbnRvIHRoZSBjb2xsaXNpb24gc3lzdGVtXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbeCA9IDBdIFRoZSBzdGFydGluZyBYIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFt5ID0gMF0gVGhlIHN0YXJ0aW5nIFkgY29vcmRpbmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5PE51bWJlcltdPn0gW3BvaW50cyA9IFtdXSBBbiBhcnJheSBvZiBjb29yZGluYXRlIHBhaXJzIG1ha2luZyB1cCB0aGUgcG9seWdvbiAtIFtbeDEsIHkxXSwgW3gyLCB5Ml0sIC4uLl1cbiAgICogQHBhcmFtIHtOdW1iZXJ9IFthbmdsZSA9IDBdIFRoZSBzdGFydGluZyByb3RhdGlvbiBpbiByYWRpYW5zXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbc2NhbGVfeCA9IDFdIFRoZSBzdGFydGluZyBzY2FsZSBhbG9uZyB0aGUgWCBheGlzXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbc2NhbGVfeSA9IDFdIFRoZSBzdGFydGluZyBzY2FsZSBsb25nIHRoZSBZIGF4aXNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtwYWRkaW5nID0gMF0gVGhlIGFtb3VudCB0byBwYWQgdGhlIGJvdW5kaW5nIHZvbHVtZSB3aGVuIHRlc3RpbmcgZm9yIHBvdGVudGlhbCBjb2xsaXNpb25zXG4gICAqIEByZXR1cm5zIHtQb2x5Z29ufVxuICAgKi9cbiAgY3JlYXRlUG9seWdvbiAoeCA9IDAsIHkgPSAwLCBwb2ludHMgPSBbWzAsIDBdXSwgYW5nbGUgPSAwLCBzY2FsZV94ID0gMSwgc2NhbGVfeSA9IDEsIHBhZGRpbmcgPSAwKSB7XG4gICAgY29uc3QgYm9keSA9IG5ldyBQb2x5Z29uKHgsIHksIHBvaW50cywgYW5nbGUsIHNjYWxlX3gsIHNjYWxlX3ksIHBhZGRpbmcpXG5cbiAgICB0aGlzLl9idmguaW5zZXJ0KGJvZHkpXG5cbiAgICByZXR1cm4gYm9keVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB7QGxpbmsgUG9pbnR9IGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIGNvbGxpc2lvbiBzeXN0ZW1cbiAgICogQHBhcmFtIHtOdW1iZXJ9IFt4ID0gMF0gVGhlIHN0YXJ0aW5nIFggY29vcmRpbmF0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gW3kgPSAwXSBUaGUgc3RhcnRpbmcgWSBjb29yZGluYXRlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuICAgKiBAcmV0dXJucyB7UG9pbnR9XG4gICAqL1xuICBjcmVhdGVQb2ludCAoeCA9IDAsIHkgPSAwLCBwYWRkaW5nID0gMCkge1xuICAgIGNvbnN0IGJvZHkgPSBuZXcgUG9pbnQoeCwgeSwgcGFkZGluZylcblxuICAgIHRoaXMuX2J2aC5pbnNlcnQoYm9keSlcblxuICAgIHJldHVybiBib2R5XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHtAbGluayBSZXN1bHR9IHVzZWQgdG8gY29sbGVjdCB0aGUgZGV0YWlsZWQgcmVzdWx0cyBvZiBhIGNvbGxpc2lvbiB0ZXN0XG4gICAqL1xuICBjcmVhdGVSZXN1bHQgKCkge1xuICAgIHJldHVybiBuZXcgUmVzdWx0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgUmVzdWx0IHVzZWQgdG8gY29sbGVjdCB0aGUgZGV0YWlsZWQgcmVzdWx0cyBvZiBhIGNvbGxpc2lvbiB0ZXN0XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlUmVzdWx0ICgpIHtcbiAgICByZXR1cm4gbmV3IFJlc3VsdCgpXG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0cyBib2RpZXMgaW50byB0aGUgY29sbGlzaW9uIHN5c3RlbVxuICAgKiBAcGFyYW0gey4uLkNpcmNsZXwuLi5Qb2x5Z29ufC4uLlBvaW50fSBib2RpZXNcbiAgICovXG4gIGluc2VydCAoLi4uYm9kaWVzKSB7XG4gICAgZm9yIChjb25zdCBib2R5IG9mIGJvZGllcykge1xuICAgICAgdGhpcy5fYnZoLmluc2VydChib2R5LCBmYWxzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYm9kaWVzID0gcmVxdWlyZSh0aGUgY29sbGlzaW9uIHN5c3RlbVxuICAgKiBAcGFyYW0gey4uLkNpcmNsZXwuLi5Qb2x5Z29ufC4uLlBvaW50fSBib2RpZXNcbiAgICovXG4gIHJlbW92ZSAoLi4uYm9kaWVzKSB7XG4gICAgZm9yIChjb25zdCBib2R5IG9mIGJvZGllcykge1xuICAgICAgdGhpcy5fYnZoLnJlbW92ZShib2R5LCBmYWxzZSlcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGNvbGxpc2lvbiBzeXN0ZW0uIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgYW55IGNvbGxpc2lvbnMgYXJlIHRlc3RlZC5cbiAgICovXG4gIHVwZGF0ZSAoKSB7XG4gICAgdGhpcy5fYnZoLnVwZGF0ZSgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBib2RpZXMgd2l0aGluIHRoZSBzeXN0ZW0gdG8gYSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQncyBjdXJyZW50IHBhdGhcbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gZHJhdyB0b1xuICAgKi9cbiAgZHJhdyAoY29udGV4dCkge1xuICAgIHJldHVybiB0aGlzLl9idmguZHJhdyhjb250ZXh0KVxuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBzeXN0ZW0ncyBCVkggdG8gYSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQncyBjdXJyZW50IHBhdGguIFRoaXMgaXMgdXNlZnVsIGZvciB0ZXN0aW5nIG91dCBkaWZmZXJlbnQgcGFkZGluZyB2YWx1ZXMgZm9yIGJvZGllcy5cbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gZHJhdyB0b1xuICAgKi9cbiAgZHJhd0JWSCAoY29udGV4dCkge1xuICAgIHJldHVybiB0aGlzLl9idmguZHJhd0JWSChjb250ZXh0KVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIHBvdGVudGlhbCBjb2xsaXNpb25zIGZvciBhIGJvZHlcbiAgICogQHBhcmFtIHtDaXJjbGV8UG9seWdvbnxQb2ludH0gYm9keSBUaGUgYm9keSB0byB0ZXN0IGZvciBwb3RlbnRpYWwgY29sbGlzaW9ucyBhZ2FpbnN0XG4gICAqIEByZXR1cm5zIHtBcnJheTxCb2R5Pn1cbiAgICovXG4gIHBvdGVudGlhbHMgKGJvZHkpIHtcbiAgICByZXR1cm4gdGhpcy5fYnZoLnBvdGVudGlhbHMoYm9keSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHR3byBib2RpZXMgYXJlIGNvbGxpZGluZ1xuICAgKiBAcGFyYW0ge0NpcmNsZXxQb2x5Z29ufFBvaW50fSB0YXJnZXQgVGhlIHRhcmdldCBib2R5IHRvIHRlc3QgYWdhaW5zdFxuICAgKiBAcGFyYW0ge1Jlc3VsdH0gW3Jlc3VsdCA9IG51bGxdIEEgUmVzdWx0IG9iamVjdCBvbiB3aGljaCB0byBzdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29sbGlzaW9uXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FhYmIgPSB0cnVlXSBTZXQgdG8gZmFsc2UgdG8gc2tpcCB0aGUgQUFCQiB0ZXN0ICh1c2VmdWwgaWYgeW91IHVzZSB5b3VyIG93biBwb3RlbnRpYWwgY29sbGlzaW9uIGhldXJpc3RpYylcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBjb2xsaWRlcyAoc291cmNlLCB0YXJnZXQsIHJlc3VsdCA9IG51bGwsIGFhYmIgPSB0cnVlKSB7XG4gICAgcmV0dXJuIFNBVChzb3VyY2UsIHRhcmdldCwgcmVzdWx0LCBhYWJiKVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVmYXVsdDogQ29sbGlzaW9ucyxcbiAgQ29sbGlzaW9ucyxcbiAgUmVzdWx0LFxuICBDaXJjbGUsXG4gIFBvbHlnb24sXG4gIFBvaW50XG59XG4iLCJpbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuL1ZlY3Rvcic7XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIF9wb3NpdGlvbjogVmVjdG9yLFxuICAgICAgICBwcml2YXRlIF9hbmdsZTogbnVtYmVyLFxuICAgICAgICBwdWJsaWMgY29sbGlkZXI/OiBhbnksXG4gICAgICAgIHByaXZhdGUgX3NjYWxlPzogbnVtYmVyLFxuICAgICAgICBwcml2YXRlIF9zaXplPzogbnVtYmVyXG4gICAgKSB7fVxuXG4gICAgZ2V0IHBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XG4gICAgfVxuXG4gICAgZ2V0IGFuZ2xlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYW5nbGU7XG4gICAgfVxuXG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgIH1cblxuICAgIHJvdGF0ZShhbmdsZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2FuZ2xlID0gYW5nbGU7XG4gICAgfVxuXG4gICAgbG9va0F0KHZlY3RvcjogVmVjdG9yKSB7XG4gICAgICAgIHRoaXMuX2FuZ2xlID0gVmVjdG9yLmFuZ2xlKHZlY3RvciwgdGhpcy5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgc2V0UG9zaXRpb24odmVjdG9yOiBWZWN0b3IpIHtcbiAgICAgICAgdGhpcy5fcG9zaXRpb24gPSB2ZWN0b3I7XG4gICAgfVxuXG4gICAgc3RhdGljIGNsb25lKHRyYW5zZm9ybTogVHJhbnNmb3JtKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNmb3JtKFZlY3Rvci5jbG9uZSh0cmFuc2Zvcm0ucG9zaXRpb24pLCB0cmFuc2Zvcm0uYW5nbGUsIHRyYW5zZm9ybS5fc2NhbGUsIHRyYW5zZm9ybS5fc2l6ZSk7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IFdBTExfSEVJR0hUID0gNDI7XG5leHBvcnQgY29uc3QgV0FMTF9XSURUSCA9IDEyMDtcbmV4cG9ydCBjb25zdCBXQUxMX1ggPSAyMjM1O1xuZXhwb3J0IGNvbnN0IFRPV05fSEVJR0hUID0gNDI7XG5leHBvcnQgY29uc3QgVE9XTl9TVEFSVCA9IDkwMDtcbmV4cG9ydCBjb25zdCBXQUxMX1NUQVJUID0gOTE4O1xuY29uc29sZS5sb2coV0FMTF9TVEFSVCk7XG4iLCJleHBvcnQgY2xhc3MgQXNzZXRzIHtcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogQXNzZXRzO1xuXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgICAgIGlmICghQXNzZXRzLmluc3RhbmNlKSB7XG4gICAgICAgICAgICBBc3NldHMuaW5zdGFuY2UgPSBuZXcgQXNzZXRzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEFzc2V0cy5pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpc0xvYWRlZDogYm9vbGVhbjtcblxuICAgIGFzc2V0c01hcCA9IHt9O1xuXG4gICAgYXNzZXRzTGlzdCA9IFtcbiAgICAgICAgJ2Jvc3Muc3ZnJyxcbiAgICAgICAgJ2Nvc21vbmF1dC5zdmcnLFxuICAgICAgICAnZGVkLnN2ZycsXG4gICAgICAgICdkZXZhLXZlc25hLnN2ZycsXG4gICAgICAgICdkb2RvLnN2ZycsXG4gICAgICAgICdob3VzZS5zdmcnLFxuICAgICAgICAnbWF4aW1fbWVuYWlsby5zdmcnLFxuICAgICAgICAnbWVyLnN2ZycsXG4gICAgICAgICduYXVtLWJsaWsuc3ZnJyxcbiAgICAgICAgJ3BpenphLnN2ZycsXG4gICAgICAgICdwbGF5ZXIuc3ZnJyxcbiAgICAgICAgJ3JpbmF0LnN2ZycsXG4gICAgICAgICdyb2l6bWFuLnN2ZycsXG4gICAgICAgICdzYWxzYS5zdmcnLFxuICAgICAgICAnc2hhaHJpbi5zdmcnLFxuICAgICAgICAnc2hlcmVtZXQuc3ZnJyxcbiAgICAgICAgJ3NxdWFyZS5zdmcnLFxuICAgICAgICAndGVuLWd1YmVybmF0b3JhLnN2ZycsXG4gICAgICAgICd0aXR1c2hraS5zdmcnLFxuICAgICAgICAndG93bi5zdmcnLFxuICAgICAgICAndHNhcmlrb3Yuc3ZnJyxcbiAgICAgICAgJ3dhbGwuc3ZnJyxcbiAgICAgICAgJ3dhbGwxLnN2ZycsXG4gICAgICAgICd3YWxsMi5zdmcnLFxuICAgICAgICAnd2FsbDMuc3ZnJyxcbiAgICAgICAgJ3dhbGw0LnN2ZycsXG4gICAgICAgICd3YWxsNS5zdmcnLFxuICAgICAgICAneWFuZGV4LWVkYS5zdmcnLFxuICAgICAgICAneWFuZGV4LWVkYTIuc3ZnJyxcbiAgICAgICAgJ3lhbmRleC1lZGEzLnN2ZycsXG4gICAgICAgICdkZXZpLXUtcG9wYS5zdmcnLFxuICAgICAgICAnZ3J1cGEyLnN2ZycsXG4gICAgICAgICdodW1hbi5zdmcnLFxuICAgICAgICAnd2Uuc3ZnJyxcbiAgICAgICAgJ3lhbmRleC1lZGEtdHJpLXBhcm55YS5zdmcnXG4gICAgXTtcblxuICAgIGdldChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzc2V0c01hcFtuYW1lXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxvYWRPbmUobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgaW1hZ2Uuc3JjID0gJ3B1YmxpYy8nICsgbmFtZTtcbiAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFzc2V0c01hcFtuYW1lXSA9IGltYWdlO1xuICAgICAgICAgICAgICAgIHJlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2FkKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICB0aGlzLmFzc2V0c0xpc3QubWFwKHRoaXMubG9hZE9uZS5iaW5kKHRoaXMpKVxuICAgICAgICApXG4gICAgfVxufVxuIiwiY29uc3QgUmVzdWx0ID0gcmVxdWlyZSgnLi9SZXN1bHQnKVxuY29uc3QgU0FUID0gcmVxdWlyZSgnLi9TQVQnKVxuXG4vKipcbiAqIFRoZSBiYXNlIGNsYXNzIGZvciBib2RpZXMgdXNlZCB0byBkZXRlY3QgY29sbGlzaW9uc1xuICogQGNsYXNzXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmNsYXNzIEJvZHkge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbeCA9IDBdIFRoZSBzdGFydGluZyBYIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFt5ID0gMF0gVGhlIHN0YXJ0aW5nIFkgY29vcmRpbmF0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gW3BhZGRpbmcgPSAwXSBUaGUgYW1vdW50IHRvIHBhZCB0aGUgYm91bmRpbmcgdm9sdW1lIHdoZW4gdGVzdGluZyBmb3IgcG90ZW50aWFsIGNvbGxpc2lvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yICh4ID0gMCwgeSA9IDAsIHBhZGRpbmcgPSAwKSB7XG4gICAgLyoqXG4gICAgICogQGRlc2MgVGhlIFggY29vcmRpbmF0ZSBvZiB0aGUgYm9keVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy54ID0geFxuXG4gICAgLyoqXG4gICAgICogQGRlc2MgVGhlIFkgY29vcmRpbmF0ZSBvZiB0aGUgYm9keVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy55ID0geVxuXG4gICAgLyoqXG4gICAgICogQGRlc2MgVGhlIGFtb3VudCB0byBwYWQgdGhlIGJvdW5kaW5nIHZvbHVtZSB3aGVuIHRlc3RpbmcgZm9yIHBvdGVudGlhbCBjb2xsaXNpb25zXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnBhZGRpbmcgPSBwYWRkaW5nXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9jaXJjbGUgPSBmYWxzZVxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fcG9seWdvbiA9IGZhbHNlXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9wb2ludCA9IGZhbHNlXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9idmggPSBudWxsXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9idmhfcGFyZW50ID0gbnVsbFxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fYnZoX2JyYW5jaCA9IGZhbHNlXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9idmhfcGFkZGluZyA9IHBhZGRpbmdcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX2J2aF9taW5feCA9IDBcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX2J2aF9taW5feSA9IDBcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX2J2aF9tYXhfeCA9IDBcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX2J2aF9tYXhfeSA9IDBcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBib2R5IGlzIGNvbGxpZGluZyB3aXRoIGFub3RoZXIgYm9keVxuICAgKiBAcGFyYW0ge0NpcmNsZXxQb2x5Z29ufFBvaW50fSB0YXJnZXQgVGhlIHRhcmdldCBib2R5IHRvIHRlc3QgYWdhaW5zdFxuICAgKiBAcGFyYW0ge1Jlc3VsdH0gW3Jlc3VsdCA9IG51bGxdIEEgUmVzdWx0IG9iamVjdCBvbiB3aGljaCB0byBzdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29sbGlzaW9uXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FhYmIgPSB0cnVlXSBTZXQgdG8gZmFsc2UgdG8gc2tpcCB0aGUgQUFCQiB0ZXN0ICh1c2VmdWwgaWYgeW91IHVzZSB5b3VyIG93biBwb3RlbnRpYWwgY29sbGlzaW9uIGhldXJpc3RpYylcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBjb2xsaWRlcyAodGFyZ2V0LCByZXN1bHQgPSBudWxsLCBhYWJiID0gdHJ1ZSkge1xuICAgIHJldHVybiBTQVQodGhpcywgdGFyZ2V0LCByZXN1bHQsIGFhYmIpXG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgcG90ZW50aWFsIGNvbGxpc2lvbnNcbiAgICogQHJldHVybnMge0FycmF5PEJvZHk+fVxuICAgKi9cbiAgcG90ZW50aWFscyAoKSB7XG4gICAgY29uc3QgYnZoID0gdGhpcy5fYnZoXG5cbiAgICBpZiAoYnZoID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JvZHkgZG9lcyBub3QgYmVsb25nIHRvIGEgY29sbGlzaW9uIHN5c3RlbScpXG4gICAgfVxuXG4gICAgcmV0dXJuIGJ2aC5wb3RlbnRpYWxzKHRoaXMpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgYm9keSBmcm9tIGl0cyBjdXJyZW50IGNvbGxpc2lvbiBzeXN0ZW1cbiAgICovXG4gIHJlbW92ZSAoKSB7XG4gICAgY29uc3QgYnZoID0gdGhpcy5fYnZoXG5cbiAgICBpZiAoYnZoKSB7XG4gICAgICBidmgucmVtb3ZlKHRoaXMsIGZhbHNlKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEge0BsaW5rIFJlc3VsdH0gdXNlZCB0byBjb2xsZWN0IHRoZSBkZXRhaWxlZCByZXN1bHRzIG9mIGEgY29sbGlzaW9uIHRlc3RcbiAgICovXG4gIGNyZWF0ZVJlc3VsdCAoKSB7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQoKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBSZXN1bHQgdXNlZCB0byBjb2xsZWN0IHRoZSBkZXRhaWxlZCByZXN1bHRzIG9mIGEgY29sbGlzaW9uIHRlc3RcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVSZXN1bHQgKCkge1xuICAgIHJldHVybiBuZXcgUmVzdWx0KClcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCb2R5XG5cbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0c1xuIiwiLyoqXG4gKiBBbiBvYmplY3QgdXNlZCB0byBjb2xsZWN0IHRoZSBkZXRhaWxlZCByZXN1bHRzIG9mIGEgY29sbGlzaW9uIHRlc3RcbiAqXG4gKiA+ICoqTm90ZToqKiBJdCBpcyBoaWdobHkgcmVjb21tZW5kZWQgeW91IHJlY3ljbGUgdGhlIHNhbWUgUmVzdWx0IG9iamVjdCBpZiBwb3NzaWJsZSBpbiBvcmRlciB0byBhdm9pZCB3YXN0aW5nIG1lbW9yeVxuICogQGNsYXNzXG4gKi9cbmNsYXNzIFJlc3VsdCB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKipcbiAgICAgKiBAZGVzYyBUcnVlIGlmIGEgY29sbGlzaW9uIHdhcyBkZXRlY3RlZFxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuY29sbGlzaW9uID0gZmFsc2VcblxuICAgIC8qKlxuICAgICAqIEBkZXNjIFRoZSBzb3VyY2UgYm9keSB0ZXN0ZWRcbiAgICAgKiBAdHlwZSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9XG4gICAgICovXG4gICAgdGhpcy5hID0gbnVsbFxuXG4gICAgLyoqXG4gICAgICogQGRlc2MgVGhlIHRhcmdldCBib2R5IHRlc3RlZCBhZ2FpbnN0XG4gICAgICogQHR5cGUge0NpcmNsZXxQb2x5Z29ufFBvaW50fVxuICAgICAqL1xuICAgIHRoaXMuYiA9IG51bGxcblxuICAgIC8qKlxuICAgICAqIEBkZXNjIFRydWUgaWYgQSBpcyBjb21wbGV0ZWx5IGNvbnRhaW5lZCB3aXRoaW4gQlxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuYV9pbl9iID0gZmFsc2VcblxuICAgIC8qKlxuICAgICAqIEBkZXNjIFRydWUgaWYgQiBpcyBjb21wbGV0ZWx5IGNvbnRhaW5lZCB3aXRoaW4gQVxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuYl9pbl9hID0gZmFsc2VcblxuICAgIC8qKlxuICAgICAqIEBkZXNjIFRoZSBtYWduaXR1ZGUgb2YgdGhlIHNob3J0ZXN0IGF4aXMgb2Ygb3ZlcmxhcFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5vdmVybGFwID0gMFxuXG4gICAgLyoqXG4gICAgICogQGRlc2MgVGhlIFggZGlyZWN0aW9uIG9mIHRoZSBzaG9ydGVzdCBheGlzIG9mIG92ZXJsYXBcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMub3ZlcmxhcF94ID0gMFxuXG4gICAgLyoqXG4gICAgICogQGRlc2MgVGhlIFkgZGlyZWN0aW9uIG9mIHRoZSBzaG9ydGVzdCBheGlzIG9mIG92ZXJsYXBcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMub3ZlcmxhcF95ID0gMFxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc3VsdFxuXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gbW9kdWxlLmV4cG9ydHNcbiIsIi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0d28gYm9kaWVzIGFyZSBjb2xsaWRpbmcgdXNpbmcgdGhlIFNlcGFyYXRpbmcgQXhpcyBUaGVvcmVtXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtDaXJjbGV8UG9seWdvbnxQb2ludH0gYSBUaGUgc291cmNlIGJvZHkgdG8gdGVzdFxuICogQHBhcmFtIHtDaXJjbGV8UG9seWdvbnxQb2ludH0gYiBUaGUgdGFyZ2V0IGJvZHkgdG8gdGVzdCBhZ2FpbnN0XG4gKiBAcGFyYW0ge1Jlc3VsdH0gW3Jlc3VsdCA9IG51bGxdIEEgUmVzdWx0IG9iamVjdCBvbiB3aGljaCB0byBzdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29sbGlzaW9uXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthYWJiID0gdHJ1ZV0gU2V0IHRvIGZhbHNlIHRvIHNraXAgdGhlIEFBQkIgdGVzdCAodXNlZnVsIGlmIHlvdSB1c2UgeW91ciBvd24gY29sbGlzaW9uIGhldXJpc3RpYylcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBTQVQgKGEsIGIsIHJlc3VsdCA9IG51bGwsIGFhYmIgPSB0cnVlKSB7XG4gIGNvbnN0IGFfcG9seWdvbiA9IGEuX3BvbHlnb25cbiAgY29uc3QgYl9wb2x5Z29uID0gYi5fcG9seWdvblxuXG4gIGxldCBjb2xsaXNpb24gPSBmYWxzZVxuXG4gIGlmIChyZXN1bHQpIHtcbiAgICByZXN1bHQuYSA9IGFcbiAgICByZXN1bHQuYiA9IGJcbiAgICByZXN1bHQuYV9pbl9iID0gdHJ1ZVxuICAgIHJlc3VsdC5iX2luX2EgPSB0cnVlXG4gICAgcmVzdWx0Lm92ZXJsYXAgPSBudWxsXG4gICAgcmVzdWx0Lm92ZXJsYXBfeCA9IDBcbiAgICByZXN1bHQub3ZlcmxhcF95ID0gMFxuICB9XG5cbiAgaWYgKGFfcG9seWdvbikge1xuICAgIGlmIChcbiAgICAgIGEuX2RpcnR5X2Nvb3JkcyB8fFxuICAgICAgYS54ICE9PSBhLl94IHx8XG4gICAgICBhLnkgIT09IGEuX3kgfHxcbiAgICAgIGEuYW5nbGUgIT09IGEuX2FuZ2xlIHx8XG4gICAgICBhLnNjYWxlX3ggIT09IGEuX3NjYWxlX3ggfHxcbiAgICAgIGEuc2NhbGVfeSAhPT0gYS5fc2NhbGVfeVxuICAgICkge1xuICAgICAgYS5fY2FsY3VsYXRlQ29vcmRzKClcbiAgICB9XG4gIH1cblxuICBpZiAoYl9wb2x5Z29uKSB7XG4gICAgaWYgKFxuICAgICAgYi5fZGlydHlfY29vcmRzIHx8XG4gICAgICBiLnggIT09IGIuX3ggfHxcbiAgICAgIGIueSAhPT0gYi5feSB8fFxuICAgICAgYi5hbmdsZSAhPT0gYi5fYW5nbGUgfHxcbiAgICAgIGIuc2NhbGVfeCAhPT0gYi5fc2NhbGVfeCB8fFxuICAgICAgYi5zY2FsZV95ICE9PSBiLl9zY2FsZV95XG4gICAgKSB7XG4gICAgICBiLl9jYWxjdWxhdGVDb29yZHMoKVxuICAgIH1cbiAgfVxuXG4gIGlmICghYWFiYiB8fCBhYWJiQUFCQihhLCBiKSkge1xuICAgIGlmIChhX3BvbHlnb24gJiYgYS5fZGlydHlfbm9ybWFscykge1xuICAgICAgYS5fY2FsY3VsYXRlTm9ybWFscygpXG4gICAgfVxuXG4gICAgaWYgKGJfcG9seWdvbiAmJiBiLl9kaXJ0eV9ub3JtYWxzKSB7XG4gICAgICBiLl9jYWxjdWxhdGVOb3JtYWxzKClcbiAgICB9XG5cbiAgICBjb2xsaXNpb24gPSAoXG4gICAgICBhX3BvbHlnb24gJiYgYl9wb2x5Z29uID8gcG9seWdvblBvbHlnb24oYSwgYiwgcmVzdWx0KVxuICAgICAgICA6IGFfcG9seWdvbiA/IHBvbHlnb25DaXJjbGUoYSwgYiwgcmVzdWx0LCBmYWxzZSlcbiAgICAgICAgICA6IGJfcG9seWdvbiA/IHBvbHlnb25DaXJjbGUoYiwgYSwgcmVzdWx0LCB0cnVlKVxuICAgICAgICAgICAgOiBjaXJjbGVDaXJjbGUoYSwgYiwgcmVzdWx0KVxuICAgIClcbiAgfVxuXG4gIGlmIChyZXN1bHQpIHtcbiAgICByZXN1bHQuY29sbGlzaW9uID0gY29sbGlzaW9uXG4gIH1cblxuICByZXR1cm4gY29sbGlzaW9uXG59O1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdHdvIGJvZGllcycgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveGVzIGFyZSBjb2xsaWRpbmdcbiAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGEgVGhlIHNvdXJjZSBib2R5IHRvIHRlc3RcbiAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGIgVGhlIHRhcmdldCBib2R5IHRvIHRlc3QgYWdhaW5zdFxuICovXG5mdW5jdGlvbiBhYWJiQUFCQiAoYSwgYikge1xuICBjb25zdCBhX3BvbHlnb24gPSBhLl9wb2x5Z29uXG4gIGNvbnN0IGFfeCA9IGFfcG9seWdvbiA/IDAgOiBhLnhcbiAgY29uc3QgYV95ID0gYV9wb2x5Z29uID8gMCA6IGEueVxuICBjb25zdCBhX3JhZGl1cyA9IGFfcG9seWdvbiA/IDAgOiBhLnJhZGl1cyAqIGEuc2NhbGVcbiAgY29uc3QgYV9taW5feCA9IGFfcG9seWdvbiA/IGEuX21pbl94IDogYV94IC0gYV9yYWRpdXNcbiAgY29uc3QgYV9taW5feSA9IGFfcG9seWdvbiA/IGEuX21pbl95IDogYV95IC0gYV9yYWRpdXNcbiAgY29uc3QgYV9tYXhfeCA9IGFfcG9seWdvbiA/IGEuX21heF94IDogYV94ICsgYV9yYWRpdXNcbiAgY29uc3QgYV9tYXhfeSA9IGFfcG9seWdvbiA/IGEuX21heF95IDogYV95ICsgYV9yYWRpdXNcblxuICBjb25zdCBiX3BvbHlnb24gPSBiLl9wb2x5Z29uXG4gIGNvbnN0IGJfeCA9IGJfcG9seWdvbiA/IDAgOiBiLnhcbiAgY29uc3QgYl95ID0gYl9wb2x5Z29uID8gMCA6IGIueVxuICBjb25zdCBiX3JhZGl1cyA9IGJfcG9seWdvbiA/IDAgOiBiLnJhZGl1cyAqIGIuc2NhbGVcbiAgY29uc3QgYl9taW5feCA9IGJfcG9seWdvbiA/IGIuX21pbl94IDogYl94IC0gYl9yYWRpdXNcbiAgY29uc3QgYl9taW5feSA9IGJfcG9seWdvbiA/IGIuX21pbl95IDogYl95IC0gYl9yYWRpdXNcbiAgY29uc3QgYl9tYXhfeCA9IGJfcG9seWdvbiA/IGIuX21heF94IDogYl94ICsgYl9yYWRpdXNcbiAgY29uc3QgYl9tYXhfeSA9IGJfcG9seWdvbiA/IGIuX21heF95IDogYl95ICsgYl9yYWRpdXNcblxuICByZXR1cm4gYV9taW5feCA8IGJfbWF4X3ggJiYgYV9taW5feSA8IGJfbWF4X3kgJiYgYV9tYXhfeCA+IGJfbWluX3ggJiYgYV9tYXhfeSA+IGJfbWluX3lcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHR3byBwb2x5Z29ucyBhcmUgY29sbGlkaW5nXG4gKiBAcGFyYW0ge1BvbHlnb259IGEgVGhlIHNvdXJjZSBwb2x5Z29uIHRvIHRlc3RcbiAqIEBwYXJhbSB7UG9seWdvbn0gYiBUaGUgdGFyZ2V0IHBvbHlnb24gdG8gdGVzdCBhZ2FpbnN0XG4gKiBAcGFyYW0ge1Jlc3VsdH0gW3Jlc3VsdCA9IG51bGxdIEEgUmVzdWx0IG9iamVjdCBvbiB3aGljaCB0byBzdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29sbGlzaW9uXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gcG9seWdvblBvbHlnb24gKGEsIGIsIHJlc3VsdCA9IG51bGwpIHtcbiAgY29uc3QgYV9jb3VudCA9IGEuX2Nvb3Jkcy5sZW5ndGhcbiAgY29uc3QgYl9jb3VudCA9IGIuX2Nvb3Jkcy5sZW5ndGhcblxuICAvLyBIYW5kbGUgcG9pbnRzIHNwZWNpYWxseVxuICBpZiAoYV9jb3VudCA9PT0gMiAmJiBiX2NvdW50ID09PSAyKSB7XG4gICAgY29uc3QgYV9jb29yZHMgPSBhLl9jb29yZHNcbiAgICBjb25zdCBiX2Nvb3JkcyA9IGIuX2Nvb3Jkc1xuXG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgcmVzdWx0Lm92ZXJsYXAgPSAwXG4gICAgfVxuXG4gICAgcmV0dXJuIGFfY29vcmRzWzBdID09PSBiX2Nvb3Jkc1swXSAmJiBhX2Nvb3Jkc1sxXSA9PT0gYl9jb29yZHNbMV1cbiAgfVxuXG4gIGNvbnN0IGFfY29vcmRzID0gYS5fY29vcmRzXG4gIGNvbnN0IGJfY29vcmRzID0gYi5fY29vcmRzXG4gIGNvbnN0IGFfbm9ybWFscyA9IGEuX25vcm1hbHNcbiAgY29uc3QgYl9ub3JtYWxzID0gYi5fbm9ybWFsc1xuXG4gIGlmIChhX2NvdW50ID4gMikge1xuICAgIGZvciAobGV0IGl4ID0gMCwgaXkgPSAxOyBpeCA8IGFfY291bnQ7IGl4ICs9IDIsIGl5ICs9IDIpIHtcbiAgICAgIGlmIChzZXBhcmF0aW5nQXhpcyhhX2Nvb3JkcywgYl9jb29yZHMsIGFfbm9ybWFsc1tpeF0sIGFfbm9ybWFsc1tpeV0sIHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGJfY291bnQgPiAyKSB7XG4gICAgZm9yIChsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgYl9jb3VudDsgaXggKz0gMiwgaXkgKz0gMikge1xuICAgICAgaWYgKHNlcGFyYXRpbmdBeGlzKGFfY29vcmRzLCBiX2Nvb3JkcywgYl9ub3JtYWxzW2l4XSwgYl9ub3JtYWxzW2l5XSwgcmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG4vKipcbiAqIERldGVybWluZXMgaWYgYSBwb2x5Z29uIGFuZCBhIGNpcmNsZSBhcmUgY29sbGlkaW5nXG4gKiBAcGFyYW0ge1BvbHlnb259IGEgVGhlIHNvdXJjZSBwb2x5Z29uIHRvIHRlc3RcbiAqIEBwYXJhbSB7Q2lyY2xlfSBiIFRoZSB0YXJnZXQgY2lyY2xlIHRvIHRlc3QgYWdhaW5zdFxuICogQHBhcmFtIHtSZXN1bHR9IFtyZXN1bHQgPSBudWxsXSBBIFJlc3VsdCBvYmplY3Qgb24gd2hpY2ggdG8gc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbGxpc2lvblxuICogQHBhcmFtIHtCb29sZWFufSBbcmV2ZXJzZSA9IGZhbHNlXSBTZXQgdG8gdHJ1ZSB0byByZXZlcnNlIGEgYW5kIGIgaW4gdGhlIHJlc3VsdCBwYXJhbWV0ZXIgd2hlbiB0ZXN0aW5nIGNpcmNsZS0+cG9seWdvbiBpbnN0ZWFkIG9mIHBvbHlnb24tPmNpcmNsZVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHBvbHlnb25DaXJjbGUgKGEsIGIsIHJlc3VsdCA9IG51bGwsIHJldmVyc2UgPSBmYWxzZSkge1xuICBjb25zdCBhX2Nvb3JkcyA9IGEuX2Nvb3Jkc1xuICBjb25zdCBhX2VkZ2VzID0gYS5fZWRnZXNcbiAgY29uc3QgYV9ub3JtYWxzID0gYS5fbm9ybWFsc1xuICBjb25zdCBiX3ggPSBiLnhcbiAgY29uc3QgYl95ID0gYi55XG4gIGNvbnN0IGJfcmFkaXVzID0gYi5yYWRpdXMgKiBiLnNjYWxlXG4gIGNvbnN0IGJfcmFkaXVzMiA9IGJfcmFkaXVzICogMlxuICBjb25zdCByYWRpdXNfc3F1YXJlZCA9IGJfcmFkaXVzICogYl9yYWRpdXNcbiAgY29uc3QgY291bnQgPSBhX2Nvb3Jkcy5sZW5ndGhcblxuICBsZXQgYV9pbl9iID0gdHJ1ZVxuICBsZXQgYl9pbl9hID0gdHJ1ZVxuICBsZXQgb3ZlcmxhcCA9IG51bGxcbiAgbGV0IG92ZXJsYXBfeCA9IDBcbiAgbGV0IG92ZXJsYXBfeSA9IDBcblxuICAvLyBIYW5kbGUgcG9pbnRzIHNwZWNpYWxseVxuICBpZiAoY291bnQgPT09IDIpIHtcbiAgICBjb25zdCBjb29yZF94ID0gYl94IC0gYV9jb29yZHNbMF1cbiAgICBjb25zdCBjb29yZF95ID0gYl95IC0gYV9jb29yZHNbMV1cbiAgICBjb25zdCBsZW5ndGhfc3F1YXJlZCA9IGNvb3JkX3ggKiBjb29yZF94ICsgY29vcmRfeSAqIGNvb3JkX3lcblxuICAgIGlmIChsZW5ndGhfc3F1YXJlZCA+IHJhZGl1c19zcXVhcmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICBjb25zdCBsZW5ndGggPSBNYXRoLnNxcnQobGVuZ3RoX3NxdWFyZWQpXG5cbiAgICAgIG92ZXJsYXAgPSBiX3JhZGl1cyAtIGxlbmd0aFxuICAgICAgb3ZlcmxhcF94ID0gY29vcmRfeCAvIGxlbmd0aFxuICAgICAgb3ZlcmxhcF95ID0gY29vcmRfeSAvIGxlbmd0aFxuICAgICAgYl9pbl9hID0gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgY291bnQ7IGl4ICs9IDIsIGl5ICs9IDIpIHtcbiAgICAgIGNvbnN0IGNvb3JkX3ggPSBiX3ggLSBhX2Nvb3Jkc1tpeF1cbiAgICAgIGNvbnN0IGNvb3JkX3kgPSBiX3kgLSBhX2Nvb3Jkc1tpeV1cbiAgICAgIGNvbnN0IGVkZ2VfeCA9IGFfZWRnZXNbaXhdXG4gICAgICBjb25zdCBlZGdlX3kgPSBhX2VkZ2VzW2l5XVxuICAgICAgY29uc3QgZG90ID0gY29vcmRfeCAqIGVkZ2VfeCArIGNvb3JkX3kgKiBlZGdlX3lcbiAgICAgIGNvbnN0IHJlZ2lvbiA9IGRvdCA8IDAgPyAtMSA6IGRvdCA+IGVkZ2VfeCAqIGVkZ2VfeCArIGVkZ2VfeSAqIGVkZ2VfeSA/IDEgOiAwXG5cbiAgICAgIGxldCB0bXBfb3ZlcmxhcHBpbmcgPSBmYWxzZVxuICAgICAgbGV0IHRtcF9vdmVybGFwID0gMFxuICAgICAgbGV0IHRtcF9vdmVybGFwX3ggPSAwXG4gICAgICBsZXQgdG1wX292ZXJsYXBfeSA9IDBcblxuICAgICAgaWYgKHJlc3VsdCAmJiBhX2luX2IgJiYgY29vcmRfeCAqIGNvb3JkX3ggKyBjb29yZF95ICogY29vcmRfeSA+IHJhZGl1c19zcXVhcmVkKSB7XG4gICAgICAgIGFfaW5fYiA9IGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGlmIChyZWdpb24pIHtcbiAgICAgICAgY29uc3QgbGVmdCA9IHJlZ2lvbiA9PT0gLTFcbiAgICAgICAgY29uc3Qgb3RoZXJfeCA9IGxlZnQgPyAoaXggPT09IDAgPyBjb3VudCAtIDIgOiBpeCAtIDIpIDogKGl4ID09PSBjb3VudCAtIDIgPyAwIDogaXggKyAyKVxuICAgICAgICBjb25zdCBvdGhlcl95ID0gb3RoZXJfeCArIDFcbiAgICAgICAgY29uc3QgY29vcmQyX3ggPSBiX3ggLSBhX2Nvb3Jkc1tvdGhlcl94XVxuICAgICAgICBjb25zdCBjb29yZDJfeSA9IGJfeSAtIGFfY29vcmRzW290aGVyX3ldXG4gICAgICAgIGNvbnN0IGVkZ2UyX3ggPSBhX2VkZ2VzW290aGVyX3hdXG4gICAgICAgIGNvbnN0IGVkZ2UyX3kgPSBhX2VkZ2VzW290aGVyX3ldXG4gICAgICAgIGNvbnN0IGRvdDIgPSBjb29yZDJfeCAqIGVkZ2UyX3ggKyBjb29yZDJfeSAqIGVkZ2UyX3lcbiAgICAgICAgY29uc3QgcmVnaW9uMiA9IGRvdDIgPCAwID8gLTEgOiBkb3QyID4gZWRnZTJfeCAqIGVkZ2UyX3ggKyBlZGdlMl95ICogZWRnZTJfeSA/IDEgOiAwXG5cbiAgICAgICAgaWYgKHJlZ2lvbjIgPT09IC1yZWdpb24pIHtcbiAgICAgICAgICBjb25zdCB0YXJnZXRfeCA9IGxlZnQgPyBjb29yZF94IDogY29vcmQyX3hcbiAgICAgICAgICBjb25zdCB0YXJnZXRfeSA9IGxlZnQgPyBjb29yZF95IDogY29vcmQyX3lcbiAgICAgICAgICBjb25zdCBsZW5ndGhfc3F1YXJlZCA9IHRhcmdldF94ICogdGFyZ2V0X3ggKyB0YXJnZXRfeSAqIHRhcmdldF95XG5cbiAgICAgICAgICBpZiAobGVuZ3RoX3NxdWFyZWQgPiByYWRpdXNfc3F1YXJlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KGxlbmd0aF9zcXVhcmVkKVxuXG4gICAgICAgICAgICB0bXBfb3ZlcmxhcHBpbmcgPSB0cnVlXG4gICAgICAgICAgICB0bXBfb3ZlcmxhcCA9IGJfcmFkaXVzIC0gbGVuZ3RoXG4gICAgICAgICAgICB0bXBfb3ZlcmxhcF94ID0gdGFyZ2V0X3ggLyBsZW5ndGhcbiAgICAgICAgICAgIHRtcF9vdmVybGFwX3kgPSB0YXJnZXRfeSAvIGxlbmd0aFxuICAgICAgICAgICAgYl9pbl9hID0gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbF94ID0gYV9ub3JtYWxzW2l4XVxuICAgICAgICBjb25zdCBub3JtYWxfeSA9IGFfbm9ybWFsc1tpeV1cbiAgICAgICAgY29uc3QgbGVuZ3RoID0gY29vcmRfeCAqIG5vcm1hbF94ICsgY29vcmRfeSAqIG5vcm1hbF95XG4gICAgICAgIGNvbnN0IGFic29sdXRlX2xlbmd0aCA9IGxlbmd0aCA8IDAgPyAtbGVuZ3RoIDogbGVuZ3RoXG5cbiAgICAgICAgaWYgKGxlbmd0aCA+IDAgJiYgYWJzb2x1dGVfbGVuZ3RoID4gYl9yYWRpdXMpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICB0bXBfb3ZlcmxhcHBpbmcgPSB0cnVlXG4gICAgICAgICAgdG1wX292ZXJsYXAgPSBiX3JhZGl1cyAtIGxlbmd0aFxuICAgICAgICAgIHRtcF9vdmVybGFwX3ggPSBub3JtYWxfeFxuICAgICAgICAgIHRtcF9vdmVybGFwX3kgPSBub3JtYWxfeVxuXG4gICAgICAgICAgaWYgKGJfaW5fYSAmJiAobGVuZ3RoID49IDApIHx8ICh0bXBfb3ZlcmxhcCA8IGJfcmFkaXVzMikpIHtcbiAgICAgICAgICAgIGJfaW5fYSA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0bXBfb3ZlcmxhcHBpbmcgJiYgKG92ZXJsYXAgPT09IG51bGwgfHwgb3ZlcmxhcCA+IHRtcF9vdmVybGFwKSkge1xuICAgICAgICBvdmVybGFwID0gdG1wX292ZXJsYXBcbiAgICAgICAgb3ZlcmxhcF94ID0gdG1wX292ZXJsYXBfeFxuICAgICAgICBvdmVybGFwX3kgPSB0bXBfb3ZlcmxhcF95XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHJlc3VsdCkge1xuICAgIHJlc3VsdC5hX2luX2IgPSByZXZlcnNlID8gYl9pbl9hIDogYV9pbl9iXG4gICAgcmVzdWx0LmJfaW5fYSA9IHJldmVyc2UgPyBhX2luX2IgOiBiX2luX2FcbiAgICByZXN1bHQub3ZlcmxhcCA9IG92ZXJsYXBcbiAgICByZXN1bHQub3ZlcmxhcF94ID0gcmV2ZXJzZSA/IC1vdmVybGFwX3ggOiBvdmVybGFwX3hcbiAgICByZXN1bHQub3ZlcmxhcF95ID0gcmV2ZXJzZSA/IC1vdmVybGFwX3kgOiBvdmVybGFwX3lcbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0d28gY2lyY2xlcyBhcmUgY29sbGlkaW5nXG4gKiBAcGFyYW0ge0NpcmNsZX0gYSBUaGUgc291cmNlIGNpcmNsZSB0byB0ZXN0XG4gKiBAcGFyYW0ge0NpcmNsZX0gYiBUaGUgdGFyZ2V0IGNpcmNsZSB0byB0ZXN0IGFnYWluc3RcbiAqIEBwYXJhbSB7UmVzdWx0fSBbcmVzdWx0ID0gbnVsbF0gQSBSZXN1bHQgb2JqZWN0IG9uIHdoaWNoIHRvIHN0b3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb2xsaXNpb25cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBjaXJjbGVDaXJjbGUgKGEsIGIsIHJlc3VsdCA9IG51bGwpIHtcbiAgY29uc3QgYV9yYWRpdXMgPSBhLnJhZGl1cyAqIGEuc2NhbGVcbiAgY29uc3QgYl9yYWRpdXMgPSBiLnJhZGl1cyAqIGIuc2NhbGVcbiAgY29uc3QgZGlmZmVyZW5jZV94ID0gYi54IC0gYS54XG4gIGNvbnN0IGRpZmZlcmVuY2VfeSA9IGIueSAtIGEueVxuICBjb25zdCByYWRpdXNfc3VtID0gYV9yYWRpdXMgKyBiX3JhZGl1c1xuICBjb25zdCBsZW5ndGhfc3F1YXJlZCA9IGRpZmZlcmVuY2VfeCAqIGRpZmZlcmVuY2VfeCArIGRpZmZlcmVuY2VfeSAqIGRpZmZlcmVuY2VfeVxuXG4gIGlmIChsZW5ndGhfc3F1YXJlZCA+IHJhZGl1c19zdW0gKiByYWRpdXNfc3VtKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBpZiAocmVzdWx0KSB7XG4gICAgY29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KGxlbmd0aF9zcXVhcmVkKVxuXG4gICAgcmVzdWx0LmFfaW5fYiA9IGFfcmFkaXVzIDw9IGJfcmFkaXVzICYmIGxlbmd0aCA8PSBiX3JhZGl1cyAtIGFfcmFkaXVzXG4gICAgcmVzdWx0LmJfaW5fYSA9IGJfcmFkaXVzIDw9IGFfcmFkaXVzICYmIGxlbmd0aCA8PSBhX3JhZGl1cyAtIGJfcmFkaXVzXG4gICAgcmVzdWx0Lm92ZXJsYXAgPSByYWRpdXNfc3VtIC0gbGVuZ3RoXG4gICAgcmVzdWx0Lm92ZXJsYXBfeCA9IGRpZmZlcmVuY2VfeCAvIGxlbmd0aFxuICAgIHJlc3VsdC5vdmVybGFwX3kgPSBkaWZmZXJlbmNlX3kgLyBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0d28gcG9seWdvbnMgYXJlIHNlcGFyYXRlZCBieSBhbiBheGlzXG4gKiBAcGFyYW0ge0FycmF5PE51bWJlcltdPn0gYV9jb29yZHMgVGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2x5Z29uIHRvIHRlc3RcbiAqIEBwYXJhbSB7QXJyYXk8TnVtYmVyW10+fSBiX2Nvb3JkcyBUaGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvbHlnb24gdG8gdGVzdCBhZ2FpbnN0XG4gKiBAcGFyYW0ge051bWJlcn0geCBUaGUgWCBkaXJlY3Rpb24gb2YgdGhlIGF4aXNcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFRoZSBZIGRpcmVjdGlvbiBvZiB0aGUgYXhpc1xuICogQHBhcmFtIHtSZXN1bHR9IFtyZXN1bHQgPSBudWxsXSBBIFJlc3VsdCBvYmplY3Qgb24gd2hpY2ggdG8gc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbGxpc2lvblxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHNlcGFyYXRpbmdBeGlzIChhX2Nvb3JkcywgYl9jb29yZHMsIHgsIHksIHJlc3VsdCA9IG51bGwpIHtcbiAgY29uc3QgYV9jb3VudCA9IGFfY29vcmRzLmxlbmd0aFxuICBjb25zdCBiX2NvdW50ID0gYl9jb29yZHMubGVuZ3RoXG5cbiAgaWYgKCFhX2NvdW50IHx8ICFiX2NvdW50KSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGxldCBhX3N0YXJ0ID0gbnVsbFxuICBsZXQgYV9lbmQgPSBudWxsXG4gIGxldCBiX3N0YXJ0ID0gbnVsbFxuICBsZXQgYl9lbmQgPSBudWxsXG5cbiAgZm9yIChsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgYV9jb3VudDsgaXggKz0gMiwgaXkgKz0gMikge1xuICAgIGNvbnN0IGRvdCA9IGFfY29vcmRzW2l4XSAqIHggKyBhX2Nvb3Jkc1tpeV0gKiB5XG5cbiAgICBpZiAoYV9zdGFydCA9PT0gbnVsbCB8fCBhX3N0YXJ0ID4gZG90KSB7XG4gICAgICBhX3N0YXJ0ID0gZG90XG4gICAgfVxuXG4gICAgaWYgKGFfZW5kID09PSBudWxsIHx8IGFfZW5kIDwgZG90KSB7XG4gICAgICBhX2VuZCA9IGRvdFxuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGl4ID0gMCwgaXkgPSAxOyBpeCA8IGJfY291bnQ7IGl4ICs9IDIsIGl5ICs9IDIpIHtcbiAgICBjb25zdCBkb3QgPSBiX2Nvb3Jkc1tpeF0gKiB4ICsgYl9jb29yZHNbaXldICogeVxuXG4gICAgaWYgKGJfc3RhcnQgPT09IG51bGwgfHwgYl9zdGFydCA+IGRvdCkge1xuICAgICAgYl9zdGFydCA9IGRvdFxuICAgIH1cblxuICAgIGlmIChiX2VuZCA9PT0gbnVsbCB8fCBiX2VuZCA8IGRvdCkge1xuICAgICAgYl9lbmQgPSBkb3RcbiAgICB9XG4gIH1cblxuICBpZiAoYV9zdGFydCA+IGJfZW5kIHx8IGFfZW5kIDwgYl9zdGFydCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBpZiAocmVzdWx0KSB7XG4gICAgbGV0IG92ZXJsYXAgPSAwXG5cbiAgICBpZiAoYV9zdGFydCA8IGJfc3RhcnQpIHtcbiAgICAgIHJlc3VsdC5hX2luX2IgPSBmYWxzZVxuXG4gICAgICBpZiAoYV9lbmQgPCBiX2VuZCkge1xuICAgICAgICBvdmVybGFwID0gYV9lbmQgLSBiX3N0YXJ0XG4gICAgICAgIHJlc3VsdC5iX2luX2EgPSBmYWxzZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uMSA9IGFfZW5kIC0gYl9zdGFydFxuICAgICAgICBjb25zdCBvcHRpb24yID0gYl9lbmQgLSBhX3N0YXJ0XG5cbiAgICAgICAgb3ZlcmxhcCA9IG9wdGlvbjEgPCBvcHRpb24yID8gb3B0aW9uMSA6IC1vcHRpb24yXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5iX2luX2EgPSBmYWxzZVxuXG4gICAgICBpZiAoYV9lbmQgPiBiX2VuZCkge1xuICAgICAgICBvdmVybGFwID0gYV9zdGFydCAtIGJfZW5kXG4gICAgICAgIHJlc3VsdC5hX2luX2IgPSBmYWxzZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uMSA9IGFfZW5kIC0gYl9zdGFydFxuICAgICAgICBjb25zdCBvcHRpb24yID0gYl9lbmQgLSBhX3N0YXJ0XG5cbiAgICAgICAgb3ZlcmxhcCA9IG9wdGlvbjEgPCBvcHRpb24yID8gb3B0aW9uMSA6IC1vcHRpb24yXG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudF9vdmVybGFwID0gcmVzdWx0Lm92ZXJsYXBcbiAgICBjb25zdCBhYnNvbHV0ZV9vdmVybGFwID0gb3ZlcmxhcCA8IDAgPyAtb3ZlcmxhcCA6IG92ZXJsYXBcblxuICAgIGlmIChjdXJyZW50X292ZXJsYXAgPT09IG51bGwgfHwgY3VycmVudF9vdmVybGFwID4gYWJzb2x1dGVfb3ZlcmxhcCkge1xuICAgICAgY29uc3Qgc2lnbiA9IG92ZXJsYXAgPCAwID8gLTEgOiAxXG5cbiAgICAgIHJlc3VsdC5vdmVybGFwID0gYWJzb2x1dGVfb3ZlcmxhcFxuICAgICAgcmVzdWx0Lm92ZXJsYXBfeCA9IHggKiBzaWduXG4gICAgICByZXN1bHQub3ZlcmxhcF95ID0geSAqIHNpZ25cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTQVRcblxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IG1vZHVsZS5leHBvcnRzXG4iLCJjb25zdCBCb2R5ID0gcmVxdWlyZSgnLi9Cb2R5JylcblxuLyoqXG4gKiBBIHBvbHlnb24gdXNlZCB0byBkZXRlY3QgY29sbGlzaW9uc1xuICogQGNsYXNzXG4gKi9cbmNsYXNzIFBvbHlnb24gZXh0ZW5kcyBCb2R5IHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge051bWJlcn0gW3ggPSAwXSBUaGUgc3RhcnRpbmcgWCBjb29yZGluYXRlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbeSA9IDBdIFRoZSBzdGFydGluZyBZIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHtBcnJheTxOdW1iZXJbXT59IFtwb2ludHMgPSBbXV0gQW4gYXJyYXkgb2YgY29vcmRpbmF0ZSBwYWlycyBtYWtpbmcgdXAgdGhlIHBvbHlnb24gLSBbW3gxLCB5MV0sIFt4MiwgeTJdLCAuLi5dXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbYW5nbGUgPSAwXSBUaGUgc3RhcnRpbmcgcm90YXRpb24gaW4gcmFkaWFuc1xuICAgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlX3ggPSAxXSBUaGUgc3RhcnRpbmcgc2NhbGUgYWxvbmcgdGhlIFggYXhpc1xuICAgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlX3kgPSAxXSBUaGUgc3RhcnRpbmcgc2NhbGUgbG9uZyB0aGUgWSBheGlzXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuICAgKi9cbiAgY29uc3RydWN0b3IgKHggPSAwLCB5ID0gMCwgcG9pbnRzID0gW10sIGFuZ2xlID0gMCwgc2NhbGVfeCA9IDEsIHNjYWxlX3kgPSAxLCBwYWRkaW5nID0gMCkge1xuICAgIHN1cGVyKHgsIHksIHBhZGRpbmcpXG5cbiAgICAvKipcbiAgICAgKiBAZGVzYyBUaGUgYW5nbGUgb2YgdGhlIGJvZHkgaW4gcmFkaWFuc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5hbmdsZSA9IGFuZ2xlXG5cbiAgICAvKipcbiAgICAgKiBAZGVzYyBUaGUgc2NhbGUgb2YgdGhlIGJvZHkgYWxvbmcgdGhlIFggYXhpc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zY2FsZV94ID0gc2NhbGVfeFxuXG4gICAgLyoqXG4gICAgICogQGRlc2MgVGhlIHNjYWxlIG9mIHRoZSBib2R5IGFsb25nIHRoZSBZIGF4aXNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuc2NhbGVfeSA9IHNjYWxlX3lcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX3BvbHlnb24gPSB0cnVlXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl94ID0geFxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5feSA9IHlcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX2FuZ2xlID0gYW5nbGVcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX3NjYWxlX3ggPSBzY2FsZV94XG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9zY2FsZV95ID0gc2NhbGVfeVxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fbWluX3ggPSAwXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9taW5feSA9IDBcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX21heF94ID0gMFxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fbWF4X3kgPSAwXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9wb2ludHMgPSBudWxsXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9jb29yZHMgPSBudWxsXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9lZGdlcyA9IG51bGxcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX25vcm1hbHMgPSBudWxsXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9kaXJ0eV9jb29yZHMgPSB0cnVlXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9kaXJ0eV9ub3JtYWxzID0gdHJ1ZVxuXG4gICAgUG9seWdvbi5wcm90b3R5cGUuc2V0UG9pbnRzLmNhbGwodGhpcywgcG9pbnRzKVxuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBwb2x5Z29uIHRvIGEgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEJ3MgY3VycmVudCBwYXRoXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGFkZCB0aGUgc2hhcGUgdG9cbiAgICovXG4gIGRyYXcgKGNvbnRleHQpIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLl9kaXJ0eV9jb29yZHMgfHxcbiAgICAgIHRoaXMueCAhPT0gdGhpcy5feCB8fFxuICAgICAgdGhpcy55ICE9PSB0aGlzLl95IHx8XG4gICAgICB0aGlzLmFuZ2xlICE9PSB0aGlzLl9hbmdsZSB8fFxuICAgICAgdGhpcy5zY2FsZV94ICE9PSB0aGlzLl9zY2FsZV94IHx8XG4gICAgICB0aGlzLnNjYWxlX3kgIT09IHRoaXMuX3NjYWxlX3lcbiAgICApIHtcbiAgICAgIHRoaXMuX2NhbGN1bGF0ZUNvb3JkcygpXG4gICAgfVxuXG4gICAgY29uc3QgY29vcmRzID0gdGhpcy5fY29vcmRzXG5cbiAgICBpZiAoY29vcmRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29udGV4dC5tb3ZlVG8oY29vcmRzWzBdLCBjb29yZHNbMV0pXG4gICAgICBjb250ZXh0LmFyYyhjb29yZHNbMF0sIGNvb3Jkc1sxXSwgMSwgMCwgTWF0aC5QSSAqIDIpXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQubW92ZVRvKGNvb3Jkc1swXSwgY29vcmRzWzFdKVxuXG4gICAgICBmb3IgKGxldCBpID0gMjsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhjb29yZHNbaV0sIGNvb3Jkc1tpICsgMV0pXG4gICAgICB9XG5cbiAgICAgIGlmIChjb29yZHMubGVuZ3RoID4gNCkge1xuICAgICAgICBjb250ZXh0LmxpbmVUbyhjb29yZHNbMF0sIGNvb3Jkc1sxXSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcG9pbnRzIG1ha2luZyB1cCB0aGUgcG9seWdvbi4gSXQncyBpbXBvcnRhbnQgdG8gdXNlIHRoaXMgZnVuY3Rpb24gd2hlbiBjaGFuZ2luZyB0aGUgcG9seWdvbidzIHNoYXBlIHRvIGVuc3VyZSBpbnRlcm5hbCBkYXRhIGlzIGFsc28gdXBkYXRlZC5cbiAgICogQHBhcmFtIHtBcnJheTxOdW1iZXJbXT59IG5ld19wb2ludHMgQW4gYXJyYXkgb2YgY29vcmRpbmF0ZSBwYWlycyBtYWtpbmcgdXAgdGhlIHBvbHlnb24gLSBbW3gxLCB5MV0sIFt4MiwgeTJdLCAuLi5dXG4gICAqL1xuICBzZXRQb2ludHMgKG5ld19wb2ludHMpIHtcbiAgICBjb25zdCBjb3VudCA9IG5ld19wb2ludHMubGVuZ3RoXG5cbiAgICB0aGlzLl9wb2ludHMgPSBuZXcgRmxvYXQ2NEFycmF5KGNvdW50ICogMilcbiAgICB0aGlzLl9jb29yZHMgPSBuZXcgRmxvYXQ2NEFycmF5KGNvdW50ICogMilcbiAgICB0aGlzLl9lZGdlcyA9IG5ldyBGbG9hdDY0QXJyYXkoY291bnQgKiAyKVxuICAgIHRoaXMuX25vcm1hbHMgPSBuZXcgRmxvYXQ2NEFycmF5KGNvdW50ICogMilcblxuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMuX3BvaW50c1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGl4ID0gMCwgaXkgPSAxOyBpIDwgY291bnQ7ICsraSwgaXggKz0gMiwgaXkgKz0gMikge1xuICAgICAgY29uc3QgbmV3X3BvaW50ID0gbmV3X3BvaW50c1tpXVxuXG4gICAgICBwb2ludHNbaXhdID0gbmV3X3BvaW50WzBdXG4gICAgICBwb2ludHNbaXldID0gbmV3X3BvaW50WzFdXG4gICAgfVxuXG4gICAgdGhpcy5fZGlydHlfY29vcmRzID0gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYW5kIGNhY2hlcyB0aGUgcG9seWdvbidzIHdvcmxkIGNvb3JkaW5hdGVzIGJhc2VkIG9uIGl0cyBwb2ludHMsIGFuZ2xlLCBhbmQgc2NhbGVcbiAgICovXG4gIF9jYWxjdWxhdGVDb29yZHMgKCkge1xuICAgIGNvbnN0IHggPSB0aGlzLnhcbiAgICBjb25zdCB5ID0gdGhpcy55XG4gICAgY29uc3QgYW5nbGUgPSB0aGlzLmFuZ2xlXG4gICAgY29uc3Qgc2NhbGVfeCA9IHRoaXMuc2NhbGVfeFxuICAgIGNvbnN0IHNjYWxlX3kgPSB0aGlzLnNjYWxlX3lcbiAgICBjb25zdCBwb2ludHMgPSB0aGlzLl9wb2ludHNcbiAgICBjb25zdCBjb29yZHMgPSB0aGlzLl9jb29yZHNcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGhcblxuICAgIGxldCBtaW5feFxuICAgIGxldCBtYXhfeFxuICAgIGxldCBtaW5feVxuICAgIGxldCBtYXhfeVxuXG4gICAgZm9yIChsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgY291bnQ7IGl4ICs9IDIsIGl5ICs9IDIpIHtcbiAgICAgIGxldCBjb29yZF94ID0gcG9pbnRzW2l4XSAqIHNjYWxlX3hcbiAgICAgIGxldCBjb29yZF95ID0gcG9pbnRzW2l5XSAqIHNjYWxlX3lcblxuICAgICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvbnN0IGNvcyA9IE1hdGguY29zKGFuZ2xlKVxuICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZSlcbiAgICAgICAgY29uc3QgdG1wX3ggPSBjb29yZF94XG4gICAgICAgIGNvbnN0IHRtcF95ID0gY29vcmRfeVxuXG4gICAgICAgIGNvb3JkX3ggPSB0bXBfeCAqIGNvcyAtIHRtcF95ICogc2luXG4gICAgICAgIGNvb3JkX3kgPSB0bXBfeCAqIHNpbiArIHRtcF95ICogY29zXG4gICAgICB9XG5cbiAgICAgIGNvb3JkX3ggKz0geFxuICAgICAgY29vcmRfeSArPSB5XG5cbiAgICAgIGNvb3Jkc1tpeF0gPSBjb29yZF94XG4gICAgICBjb29yZHNbaXldID0gY29vcmRfeVxuXG4gICAgICBpZiAoaXggPT09IDApIHtcbiAgICAgICAgbWluX3ggPSBtYXhfeCA9IGNvb3JkX3hcbiAgICAgICAgbWluX3kgPSBtYXhfeSA9IGNvb3JkX3lcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb29yZF94IDwgbWluX3gpIHtcbiAgICAgICAgICBtaW5feCA9IGNvb3JkX3hcbiAgICAgICAgfSBlbHNlIGlmIChjb29yZF94ID4gbWF4X3gpIHtcbiAgICAgICAgICBtYXhfeCA9IGNvb3JkX3hcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb29yZF95IDwgbWluX3kpIHtcbiAgICAgICAgICBtaW5feSA9IGNvb3JkX3lcbiAgICAgICAgfSBlbHNlIGlmIChjb29yZF95ID4gbWF4X3kpIHtcbiAgICAgICAgICBtYXhfeSA9IGNvb3JkX3lcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3ggPSB4XG4gICAgdGhpcy5feSA9IHlcbiAgICB0aGlzLl9hbmdsZSA9IGFuZ2xlXG4gICAgdGhpcy5fc2NhbGVfeCA9IHNjYWxlX3hcbiAgICB0aGlzLl9zY2FsZV95ID0gc2NhbGVfeVxuICAgIHRoaXMuX21pbl94ID0gbWluX3hcbiAgICB0aGlzLl9taW5feSA9IG1pbl95XG4gICAgdGhpcy5fbWF4X3ggPSBtYXhfeFxuICAgIHRoaXMuX21heF95ID0gbWF4X3lcbiAgICB0aGlzLl9kaXJ0eV9jb29yZHMgPSBmYWxzZVxuICAgIHRoaXMuX2RpcnR5X25vcm1hbHMgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgbm9ybWFscyBhbmQgZWRnZXMgb2YgdGhlIHBvbHlnb24ncyBzaWRlc1xuICAgKi9cbiAgX2NhbGN1bGF0ZU5vcm1hbHMgKCkge1xuICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuX2Nvb3Jkc1xuICAgIGNvbnN0IGVkZ2VzID0gdGhpcy5fZWRnZXNcbiAgICBjb25zdCBub3JtYWxzID0gdGhpcy5fbm9ybWFsc1xuICAgIGNvbnN0IGNvdW50ID0gY29vcmRzLmxlbmd0aFxuXG4gICAgZm9yIChsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgY291bnQ7IGl4ICs9IDIsIGl5ICs9IDIpIHtcbiAgICAgIGNvbnN0IG5leHQgPSBpeCArIDIgPCBjb3VudCA/IGl4ICsgMiA6IDBcbiAgICAgIGNvbnN0IHggPSBjb29yZHNbbmV4dF0gLSBjb29yZHNbaXhdXG4gICAgICBjb25zdCB5ID0gY29vcmRzW25leHQgKyAxXSAtIGNvb3Jkc1tpeV1cbiAgICAgIGNvbnN0IGxlbmd0aCA9IHggfHwgeSA/IE1hdGguc3FydCh4ICogeCArIHkgKiB5KSA6IDBcblxuICAgICAgZWRnZXNbaXhdID0geFxuICAgICAgZWRnZXNbaXldID0geVxuICAgICAgbm9ybWFsc1tpeF0gPSBsZW5ndGggPyB5IC8gbGVuZ3RoIDogMFxuICAgICAgbm9ybWFsc1tpeV0gPSBsZW5ndGggPyAteCAvIGxlbmd0aCA6IDBcbiAgICB9XG5cbiAgICB0aGlzLl9kaXJ0eV9ub3JtYWxzID0gZmFsc2VcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb2x5Z29uXG5cbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0c1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGRyYXdDaXJjbGUoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHg6IG51bWJlciwgeTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgZmlsbDogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuICAgICAgICBpZiAoZmlsbCkge1xuICAgICAgICAgICAgY3R4LmZpbGwoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpXG4gICAgICAgIH1cbiAgICB9XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdUcmlhbmdsZShjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyLCBmaWxsOiBib29sZWFuID0gdHJ1ZSkge1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCAwLCBNYXRoLlBJIC8gMyk7XG4gICAgaWYgKGZpbGwpIHtcbiAgICAgICAgY3R4LmZpbGwoKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5zdHJva2UoKVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJhbmRvbUJlZXR3ZW4oZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSB7XG4gICAgcmV0dXJuIChNYXRoLnJhbmRvbSgpICogdG8pICsgZnJvbTtcbn1cbmV4cG9ydCB0eXBlIFR1cGxlID0gW251bWJlciwgbnVtYmVyXTtcbiIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuICBJbiB0aGVcbi8vIGJyb3dzZXIgdGhpcyBpcyBhIGxpdHRsZSBjb21wbGljYXRlZCBkdWUgdG8gdW5rbm93biBxdWFsaXR5IG9mIE1hdGgucmFuZG9tKClcbi8vIGFuZCBpbmNvbnNpc3RlbnQgc3VwcG9ydCBmb3IgdGhlIGBjcnlwdG9gIEFQSS4gIFdlIGRvIHRoZSBiZXN0IHdlIGNhbiB2aWFcbi8vIGZlYXR1cmUtZGV0ZWN0aW9uXG5cbi8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0b1xuLy8gaW1wbGVtZW50YXRpb24uIEFsc28sIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNyeXB0byBvbiBJRTExLlxudmFyIGdldFJhbmRvbVZhbHVlcyA9ICh0eXBlb2YoY3J5cHRvKSAhPSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YobXNDcnlwdG8pICE9ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cubXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pKTtcblxuaWYgKGdldFJhbmRvbVZhbHVlcykge1xuICAvLyBXSEFUV0cgY3J5cHRvIFJORyAtIGh0dHA6Ly93aWtpLndoYXR3Zy5vcmcvd2lraS9DcnlwdG9cbiAgdmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB3aGF0d2dSTkcoKSB7XG4gICAgZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbiAgICByZXR1cm4gcm5kczg7XG4gIH07XG59IGVsc2Uge1xuICAvLyBNYXRoLnJhbmRvbSgpLWJhc2VkIChSTkcpXG4gIC8vXG4gIC8vIElmIGFsbCBlbHNlIGZhaWxzLCB1c2UgTWF0aC5yYW5kb20oKS4gIEl0J3MgZmFzdCwgYnV0IGlzIG9mIHVuc3BlY2lmaWVkXG4gIC8vIHF1YWxpdHkuXG4gIHZhciBybmRzID0gbmV3IEFycmF5KDE2KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1hdGhSTkcoKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIHI7IGkgPCAxNjsgaSsrKSB7XG4gICAgICBpZiAoKGkgJiAweDAzKSA9PT0gMCkgciA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMDtcbiAgICAgIHJuZHNbaV0gPSByID4+PiAoKGkgJiAweDAzKSA8PCAzKSAmIDB4ZmY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJuZHM7XG4gIH07XG59XG4iLCIvKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbnZhciBieXRlVG9IZXggPSBbXTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4W2ldID0gKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKTtcbn1cblxuZnVuY3Rpb24gYnl0ZXNUb1V1aWQoYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBvZmZzZXQgfHwgMDtcbiAgdmFyIGJ0aCA9IGJ5dGVUb0hleDtcbiAgLy8gam9pbiB1c2VkIHRvIGZpeCBtZW1vcnkgaXNzdWUgY2F1c2VkIGJ5IGNvbmNhdGVuYXRpb246IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMxNzUjYzRcbiAgcmV0dXJuIChbYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLFxuXHRidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsXG5cdGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJyxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSxcblx0YnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXV0pLmpvaW4oJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ5dGVzVG9VdWlkO1xuIiwiaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5pbXBvcnQgeyBHYW1lIH0gZnJvbSAnLi9HYW1lJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IEFzc2V0cyB9IGZyb20gJy4vQXNzZXRzJztcblxuY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5jYW52YXMuaWQgPSAnZGlzcGxheSc7XG5kb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiIzMwMzAzMFwiO1xuXG5jb25zdCBjb25maWcgPSBuZXcgQ29uZmlnKCk7XG5cbmNhbnZhcy53aWR0aCA9IGNvbmZpZy5nYW1lLndpZHRoO1xuY2FudmFzLmhlaWdodCA9IGNvbmZpZy5nYW1lLmhlaWdodDtcblxuY2FudmFzLmNsYXNzTGlzdC5hZGQoJ2dhbWUtZGlzcGxheScpO1xuXG5cbmNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuaWYgKGN0eCA9PSBudWxsKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJQTkhcIik7XG59XG5cbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcblxuY29uc3QgYXNzZXRzID0gQXNzZXRzLmdldEluc3RhbmNlKCk7XG5cbmNvbnN0IGdhbWU6IEdhbWUgPSBuZXcgR2FtZShjb25maWcpO1xuKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCAoZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgcmV0dXJuIGFzc2V0cy5sb2FkKCk7XG4gICAgfSkoKTtcblxuICAgIGxldCB0aW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cbiAgICAoZnVuY3Rpb24gbG9vcCgpIHtcbiAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBjb25zdCBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgY29uc3QgZHQgPSAobm93IC0gdGltZSkgLyAxMDAwO1xuICAgICAgICB0aW1lID0gbm93O1xuXG4gICAgICAgIGdhbWUudXBkYXRlKGR0KTtcbiAgICAgICAgZ2FtZS5yZW5kZXIoY3R4KTtcblxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgfSkoKTtcbn0pKCk7XG5cbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuQGZvbnQtZmFjZSB7XFxuICAgIGZvbnQtZmFtaWx5OiAnUHJlc3MgU3RhcnQgMlAnO1xcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XFxuICAgIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICAgIHNyYzogdXJsKGh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb20vcy9wcmVzc3N0YXJ0MnAvdjYvZTN0NGV1TzhULTI2N29JQVFBdTZqRFF5SzNuVml2Tm00STgxLndvZmYyKSBmb3JtYXQoJ3dvZmYyJyk7XFxuICAgIHVuaWNvZGUtcmFuZ2U6IFUrMDAwMC0wMEZGLCBVKzAxMzEsIFUrMDE1Mi0wMTUzLCBVKzAyQkItMDJCQywgVSswMkM2LCBVKzAyREEsIFUrMDJEQywgVSsyMDAwLTIwNkYsIFUrMjA3NCwgVSsyMEFDLCBVKzIxMjIsIFUrMjE5MSwgVSsyMTkzLCBVKzIyMTIsIFUrMjIxNSwgVStGRUZGLCBVK0ZGRkQ7XFxufVxcblxcbmJvZHksIGh0bWwge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGZvbnQtZmFtaWx5OiAnUHJlc3MgU3RhcnQgMlAnLCBTYW5zU2VyaWYsIEFyaWFsO1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG5jYW52YXMge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gICAgaW1hZ2UtcmVuZGVyaW5nOiBwaXhlbGF0ZWQ7XFxuICAgIGN1cnNvcjogY2VsbDtcXG59XFxuXFxuLmdhbWUtZGlzcGxheSB7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLmdhbWUtdWktY29udGFpbmVyIHtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgd2lkdGg6IDgwMHB4O1xcbiAgICBoZWlnaHQ6IDYwMHB4O1xcbn1cXG5cXG4udG93ZXItc2VsZWN0b3ItY29udGFpbmVyIHtcXG4gICAgcG9pbnRlci1ldmVudHM6IGFsbDtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgICBwYWRkaW5nOiA0MHB4IDVweCAxMHB4O1xcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJy9wdWJsaWMvaW1hZ2VzL3dhbGwucG5nJykgcmVwZWF0O1xcbiAgICB0b3A6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICB3aWR0aDogMTQ1cHg7XFxuICAgIGhlaWdodDogNjAwcHg7XFxufVxcblxcbi50b3dlci1zZWxlY3Rvci10aXRsZSB7XFxuICAgIGNvbG9yOiBnb2xkO1xcbiAgICBvcGFjaXR5OiAwLjc1O1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICB0b3A6IDA7XFxuICAgIGJhY2tncm91bmQ6IHVybCgvcHVibGljL2ltYWdlcy9jaGVzdC5wbmcpIG5vLXJlcGVhdCAxMHB4IDEwcHg7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogMjBweCAyMHB4O1xcbiAgICBwYWRkaW5nOiAxMHB4IDAgMCAzMHB4IDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgd2lkdGg6IDE0NXB4O1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbn1cXG5cXG4udG93ZXItc2VsZWN0b3Ige1xcbiAgICBiYWNrZ3JvdW5kOiB1cmwoL3B1YmxpYy9pbWFnZXMvYm9yZGVyLnBuZykgbm8tcmVwZWF0LHJnYmEoMjU1LDI1NSwyNTUsMC43KTtcXG4gICAgYmFja2dyb3VuZC1zaXplOiA2MHB4IDYwcHg7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgd2lkdGg6IDYwcHg7XFxuICAgIGhlaWdodDogNjBweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcXG59XFxuXFxuLnRvd2VyLXNlbGVjdG9yLmFjdGl2ZSB7XFxuICAgIGJveC1zaGFkb3c6IDAgMCAxNXB4IGdvbGQ7XFxufVxcblxcbi50b3dlci1zZWxlY3RvcjpudGgtb2YtdHlwZSgybisxKSB7XFxuICAgIG1hcmdpbi1yaWdodDogMTVweDtcXG59XFxuXCIsIFwiXCJdKTtcblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuICdAbWVkaWEgJyArIGl0ZW1bMl0gKyAneycgKyBjb250ZW50ICsgJ30nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9ICcoJyArIGl0ZW1bMl0gKyAnKSBhbmQgKCcgKyBtZWRpYVF1ZXJ5ICsgJyknO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuICByZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufSIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImltcG9ydCB7IFBsYXllciB9IGZyb20gJy4vUGxheWVyJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gJy4vZW50aXRpZXMvQ2FtZXJhJztcbmltcG9ydCB7IE1hcCBhcyBHYW1lTWFwIH0gZnJvbSAnLi9NYXAnO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi9lbnRpdGllcy9WZWN0b3InO1xuaW1wb3J0IHsgQ29zbW9uYXV0IH0gZnJvbSAnLi9Db3Ntb25hdXQnO1xuaW1wb3J0IHsgUGl6emEgfSBmcm9tICcuL1BpenphJztcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4vZW50aXRpZXMvVHJhbnNmb3JtJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IENvbGxpc2lvbnMgfSBmcm9tICdkZXRlY3QtY29sbGlzaW9ucyc7XG5pbXBvcnQgeyBXYWxsIH0gZnJvbSAnLi9XYWxsJztcbmltcG9ydCB7IFdBTExTX0xJU1QgfSBmcm9tICcuL29iamVjdHMvd2FsbCc7XG5pbXBvcnQgeyBUT1dOX0xJU1QgfSBmcm9tICcuL29iamVjdHMvdG93bic7XG5pbXBvcnQgeyBUb3duIH0gZnJvbSAnLi9Ub3duJztcbmltcG9ydCB7IFN0YXRpY09iamVjdCB9IGZyb20gJy4vU3RhdGljT2JqZWN0JztcbmltcG9ydCB7IEJvc3MgfSBmcm9tICcuL0Jvc3MnO1xuaW1wb3J0IHsgSG91c2UgfSBmcm9tICcuL0hvdXNlJztcbmltcG9ydCB7IEFzc2V0cyB9IGZyb20gJy4vQXNzZXRzJztcblxuZXhwb3J0IGNsYXNzIEdhbWUge1xuICAgIHBsYXllcjogUGxheWVyO1xuICAgIGNhbWVyYTogQ2FtZXJhO1xuICAgIHJvb206IHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIG1hcDogR2FtZU1hcCB9O1xuICAgIHJpb3RQb2xpY2U6IENvc21vbmF1dFtdID0gW107XG4gICAgcGl6emFzOiBQaXp6YVtdID0gW107XG4gICAgc3lzdGVtO1xuICAgIHdhbGxzOiBBcnJheTxXYWxsPjtcbiAgICB0b3duczogQXJyYXk8VG93bj47XG4gICAgc3RhdGljT2JqZWN0czogU3RhdGljT2JqZWN0W10gPSBbXTtcbiAgICBib3NzOiBCb3NzO1xuICAgIGhvdXNlOiBIb3VzZTtcbiAgICBhc3NldHM6IEFzc2V0cztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBjb25maWc6IENvbmZpZykge1xuICAgICAgICB0aGlzLnN5c3RlbSA9IG5ldyBDb2xsaXNpb25zKCk7XG4gICAgICAgIHRoaXMucGxheWVyID0gbmV3IFBsYXllcihuZXcgVHJhbnNmb3JtKG5ldyBWZWN0b3IoMjA1MCwgMTY1MCksIDApLCB0aGlzKTtcbiAgICAgICAgdGhpcy5yb29tID0ge1xuICAgICAgICAgICAgd2lkdGg6IGNvbmZpZy53b3JsZC53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogY29uZmlnLndvcmxkLmhlaWdodCxcbiAgICAgICAgICAgIG1hcDogbmV3IEdhbWVNYXAoY29uZmlnLndvcmxkLndpZHRoLCBjb25maWcud29ybGQuaGVpZ2h0KVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuY3JlYXRlUmlvdFBvbGljZSgpO1xuICAgICAgICB0aGlzLnJvb20ubWFwLmdlbmVyYXRlKCk7XG5cbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKDAsIDAsIHRoaXMuY29uZmlnLmdhbWUud2lkdGgsIHRoaXMuY29uZmlnLmdhbWUuaGVpZ2h0LCB0aGlzLnJvb20ud2lkdGgsIHRoaXMucm9vbS5oZWlnaHQpO1xuICAgICAgICB0aGlzLmNhbWVyYS5mb2xsb3codGhpcy5wbGF5ZXIudHJhbnNmb3JtLCB0aGlzLmNvbmZpZy5nYW1lLndpZHRoIC8gMiwgdGhpcy5jb25maWcuZ2FtZS5oZWlnaHQgLyAyKTtcbiAgICAgICAgdGhpcy5jcmVhdGVXYWxscygpO1xuICAgICAgICB0aGlzLmNyZWF0ZVRvd25zKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlU3RhdGljKCk7XG4gICAgICAgIHRoaXMuYm9zcyA9IG5ldyBCb3NzKG5ldyBUcmFuc2Zvcm0obmV3IFZlY3RvcigzNDAwLCAxMzAwKSwgTWF0aC5QSSAqIDEuNSksIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuaG91c2UgPSBuZXcgSG91c2UobmV3IFRyYW5zZm9ybShuZXcgVmVjdG9yKDM1NDAsIDEzMjApLCAwKSwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5hc3NldHMgPSBBc3NldHMuZ2V0SW5zdGFuY2UoKTtcbiAgICB9XG5cbiAgICByZW5kZXJTcXVhcmUoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcbiAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmFzc2V0cy5nZXQoJ3NxdWFyZS5zdmcnKSwgLXRoaXMuY2FtZXJhLnhWaWV3LCAtdGhpcy5jYW1lcmEueVZpZXcsIHRoaXMuY29uZmlnLndvcmxkLndpZHRoLCB0aGlzLmNvbmZpZy53b3JsZC5oZWlnaHQpO1xuICAgIH1cblxuICAgIHJlbmRlcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuICAgICAgICB0aGlzLnJlbmRlclNxdWFyZShjdHgpO1xuICAgICAgICAvLyB0aGlzLnJvb20ubWFwLmRyYXcoY3R4LCB0aGlzLmNhbWVyYS54VmlldywgdGhpcy5jYW1lcmEueVZpZXcpO1xuICAgICAgICB0aGlzLnBsYXllci5yZW5kZXIoY3R4LCB0aGlzLmNhbWVyYSk7XG4gICAgICAgIHRoaXMuaG91c2UucmVuZGVyKGN0eCwgdGhpcy5jYW1lcmEpO1xuICAgICAgICB0aGlzLmJvc3MucmVuZGVyKGN0eCwgdGhpcy5jYW1lcmEpO1xuICAgICAgICB0aGlzLnJlbmRlclJpb3RQb2xpY2UoY3R4KTtcbiAgICAgICAgdGhpcy5yZW5kZXJQaXp6YXMoY3R4KTtcbiAgICAgICAgdGhpcy5yZW5kZXJXYWxscyhjdHgpO1xuICAgICAgICB0aGlzLnJlbmRlclRvd25zKGN0eCk7XG4gICAgICAgIHRoaXMucmVuZGVyU3RhdGljKGN0eCk7XG4gICAgfVxuXG4gICAgc2VhcmNoSW50ZXJzZWN0aW9uKCkge1xuICAgICAgICBjb25zdCBhdmFpbGFibGVQaXp6YXM6IE1hcDxQaXp6YSwgeyBjb3Ntb25hdXQ6IENvc21vbmF1dCwgZGlzdGFuY2U6IG51bWJlciB9W10+ID0gbmV3IE1hcCgpO1xuICAgICAgICBpZiAodGhpcy5waXp6YXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnBpenphcy5mb3JFYWNoKHBpenphID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJpb3RQb2xpY2UuZm9yRWFjaChjb3Ntb25hdXQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IFZlY3Rvci5kaXN0YW5jZShjb3Ntb25hdXQudHJhbnNmb3JtLnBvc2l0aW9uLCBwaXp6YS50cmFuc2Zvcm0ucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoVmVjdG9yLmRpc3RhbmNlKGNvc21vbmF1dC50cmFuc2Zvcm0ucG9zaXRpb24sIHBpenphLnRyYW5zZm9ybS5wb3NpdGlvbikgPCA4MDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFwaXp6YS5pc1dhaXRpbmdUb0VhdGluZyAmJiAhY29zbW9uYXV0LnRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXZhaWxhYmxlUGl6emFzLmhhcyhwaXp6YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVQaXp6YXMuZ2V0KHBpenphKS5wdXNoKHsgY29zbW9uYXV0OiBjb3Ntb25hdXQsIGRpc3RhbmNlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVQaXp6YXMuc2V0KHBpenphLCBbeyBjb3Ntb25hdXQ6IGNvc21vbmF1dCwgZGlzdGFuY2UgfV0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGF2YWlsYWJsZVBpenphcy5zaXplKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGF2YWlsYWJsZVBpenphcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtaW5EaXN0YW5jZSA9IHZhbHVlLnJlZHVjZSgobWluLCBwKSA9PiBwLmRpc3RhbmNlIDwgbWluID8gcC5kaXN0YW5jZSA6IG1pbiwgdmFsdWVbMF0uZGlzdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGNvc21vbmF1dCB9ID0gdmFsdWUuZmluZChjb3Ntb25hdXQgPT4gY29zbW9uYXV0LmRpc3RhbmNlID09PSBtaW5EaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvc21vbmF1dC50YXJnZXQgPSBrZXk7XG4gICAgICAgICAgICAgICAgICAgIGtleS5pc1dhaXRpbmdUb0VhdGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlKGR0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zeXN0ZW0udXBkYXRlKCk7XG4gICAgICAgIHRoaXMuaG91c2UudXBkYXRlKGR0KTtcblxuICAgICAgICB0aGlzLnBsYXllci51cGRhdGUoZHQpO1xuICAgICAgICB0aGlzLmJvc3MudXBkYXRlKGR0KTtcbiAgICAgICAgdGhpcy51cGRhdGVSaW90UG9saWNlKGR0KTtcbiAgICAgICAgdGhpcy5jYW1lcmEudXBkYXRlKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyUmlvdFBvbGljZShjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuICAgICAgICB0aGlzLnJpb3RQb2xpY2UuZm9yRWFjaCgoXykgPT4ge1xuICAgICAgICAgICAgXy5yZW5kZXIoY3R4LCB0aGlzLmNhbWVyYSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZVJpb3RQb2xpY2UoZHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLnJpb3RQb2xpY2UuZm9yRWFjaCgoXykgPT4ge1xuICAgICAgICAgICAgXy51cGRhdGUoZHQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXJQaXp6YXMoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcbiAgICAgICAgdGhpcy5waXp6YXMuZm9yRWFjaChfID0+IHtcbiAgICAgICAgICAgIF8ucmVuZGVyKGN0eCwgdGhpcy5jYW1lcmEpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNyZWF0ZVJpb3RQb2xpY2UoKSB7XG4gICAgICAgIEFycmF5LmZyb20oeyBsZW5ndGg6IDI0IH0pLmZvckVhY2goKF8sIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0obmV3IFZlY3RvcigyMTUwLCA3NjAgKyA0MCAqIGkgKyAxKSwgTWF0aC5QSSAqIDEuNSk7XG4gICAgICAgICAgICBjb25zdCBjb3Ntb25hdXQgPSBuZXcgQ29zbW9uYXV0KHRyYW5zZm9ybSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLnJpb3RQb2xpY2UucHVzaChjb3Ntb25hdXQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBlYXRQaXp6YShwaXp6YTogUGl6emEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnBpenphcy5maW5kSW5kZXgoX3BpenphID0+IF9waXp6YS5pZCA9PT0gcGl6emEuaWQpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnBpenphcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlUGl6emFPYmplY3QocG9zaXRpb246IFZlY3Rvcikge1xuICAgICAgICBpZiAodGhpcy5waXp6YXMubGVuZ3RoID49IDUpIHJldHVybjtcbiAgICAgICAgdGhpcy5waXp6YXMucHVzaChuZXcgUGl6emEobmV3IFRyYW5zZm9ybShuZXcgVmVjdG9yKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpLCAwKSkpO1xuICAgICAgICB0aGlzLnNlYXJjaEludGVyc2VjdGlvbigpO1xuICAgIH1cblxuICAgIGNyZWF0ZVdhbGxzKCkge1xuICAgICAgICB0aGlzLndhbGxzID0gV0FMTFNfTElTVC5tYXAoKF93YWxsLCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2ZWN0b3IgPSBuZXcgVmVjdG9yKF93YWxsLngsIF93YWxsLnkpO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybSh2ZWN0b3IsIF93YWxsLnJvdGF0ZSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdhbGwodHJhbnNmb3JtLCB0aGlzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyV2FsbHMoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcbiAgICAgICAgdGhpcy53YWxscy5mb3JFYWNoKHdhbGwgPT4gd2FsbC5yZW5kZXIoY3R4LCB0aGlzLmNhbWVyYSkpO1xuICAgIH1cblxuICAgIGNyZWF0ZVRvd25zKCkge1xuICAgICAgICB0aGlzLnRvd25zID0gVE9XTl9MSVNULm1hcCgoX3Rvd24sIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3IoX3Rvd24ueCwgX3Rvd24ueSk7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKHZlY3RvciwgX3Rvd24ucm90YXRlKTtcbiAgICAgICAgICAgIGNvbnN0IHRvd24gPSBuZXcgVG93bih0cmFuc2Zvcm0sIHRoaXMpO1xuXG4gICAgICAgICAgICByZXR1cm4gdG93bjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyVG93bnMoY3R4KSB7XG4gICAgICAgIHRoaXMudG93bnMuZm9yRWFjaCh0b3duID0+IHRvd24ucmVuZGVyKGN0eCwgdGhpcy5jYW1lcmEpKTtcbiAgICB9XG5cblxuICAgIGNyZWF0ZVN0YXRpYygpIHtcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzLnB1c2gobmV3IFN0YXRpY09iamVjdCgnc2Fsc2Euc3ZnJywgODksIDg5LCBNYXRoLlBJICogMS41LCBuZXcgVmVjdG9yKDE1NTAsIDEyNTApLCB0aGlzKSk7XG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5wdXNoKG5ldyBTdGF0aWNPYmplY3QoJ2RvZG8uc3ZnJywgNTAsIDcwLCBNYXRoLlBJICogMC40LCBuZXcgVmVjdG9yKDEzNTAsIDE0MjApLCB0aGlzKSk7XG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5wdXNoKG5ldyBTdGF0aWNPYmplY3QoJ3NoZXJlbWV0LnN2ZycsIDEyMCwgMTIwLCAwLCBuZXcgVmVjdG9yKDE2NTAsIDE1MjApLCB0aGlzKSk7XG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5wdXNoKG5ldyBTdGF0aWNPYmplY3QoJ3Rlbi1ndWJlcm5hdG9yYS5zdmcnLCA3MCwgNzAsIDAsIG5ldyBWZWN0b3IoMTM4MCwgMTY2MCksIHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzLnB1c2gobmV3IFN0YXRpY09iamVjdCgnbWF4aW1fbWVuYWlsby5zdmcnLCA5MCwgOTAsIDAsIG5ldyBWZWN0b3IoMTM1MCwgOTgwKSwgdGhpcykpO1xuICAgICAgICB0aGlzLnN0YXRpY09iamVjdHMucHVzaChuZXcgU3RhdGljT2JqZWN0KCdkZXZpLXUtcG9wYS5zdmcnLCA1MCwgOTAsIE1hdGguUEkgKiAwLjIsIG5ldyBWZWN0b3IoMTM5NiwgMTAyMCksIHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzLnB1c2gobmV3IFN0YXRpY09iamVjdCgncm9pem1hbi5zdmcnLCAxMjAsIDEyMCwgMCwgbmV3IFZlY3RvcigxMjgwLCAxNTIwKSwgdGhpcykpO1xuICAgICAgICB0aGlzLnN0YXRpY09iamVjdHMucHVzaChuZXcgU3RhdGljT2JqZWN0KCdtZXIuc3ZnJywgMTYwLCAxNjAsIDAsIG5ldyBWZWN0b3IoMTg2MCwgMTc4MCksIHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzLnB1c2gobmV3IFN0YXRpY09iamVjdCgncmluYXQuc3ZnJywgNzAsIDcwLCAwLCBuZXcgVmVjdG9yKDE3NTAsIDEyMzApLCB0aGlzKSk7XG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5wdXNoKG5ldyBTdGF0aWNPYmplY3QoJ3RzYXJpa292LnN2ZycsIDU1LCA4NSwgMCwgbmV3IFZlY3RvcigxNzgwLCAxMTMwKSwgdGhpcykpO1xuICAgICAgICB0aGlzLnN0YXRpY09iamVjdHMucHVzaChuZXcgU3RhdGljT2JqZWN0KCduYXVtLWJsaWsuc3ZnJywgNTUsIDg1LCAwLCBuZXcgVmVjdG9yKDIwNDAsIDg5MCksIHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzLnB1c2gobmV3IFN0YXRpY09iamVjdCgnZGVkLnN2ZycsIDE4MCwgMTMwLCAwLCBuZXcgVmVjdG9yKDE4OTUsIDE0NTApLCB0aGlzKSk7XG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5wdXNoKG5ldyBTdGF0aWNPYmplY3QoJ2RldmEtdmVzbmEuc3ZnJywgNzAsIDkwLCAwLCBuZXcgVmVjdG9yKDE4OTUsIDEyNTApLCB0aGlzKSk7XG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5wdXNoKG5ldyBTdGF0aWNPYmplY3QoJ3NoYWhyaW4uc3ZnJywgOTAsIDkwLCAwLCBuZXcgVmVjdG9yKDEzNTAsIDY1MCksIHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzLnB1c2gobmV3IFN0YXRpY09iamVjdCgnZ3J1cGEyLnN2ZycsIDE1MCwgMTUwLCAwLCBuZXcgVmVjdG9yKDEzNTAsIDg1MCksIHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzLnB1c2gobmV3IFN0YXRpY09iamVjdCgnZ3J1cGEyLnN2ZycsIDE1MCwgMTUwLCAwLCBuZXcgVmVjdG9yKDg1MCwgOTgwKSwgdGhpcykpO1xuICAgICAgICB0aGlzLnN0YXRpY09iamVjdHMucHVzaChuZXcgU3RhdGljT2JqZWN0KCdncnVwYTIuc3ZnJywgMTUwLCAxNTAsIDAsIG5ldyBWZWN0b3IoMTc4MCwgMTQ1MCksIHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzLnB1c2gobmV3IFN0YXRpY09iamVjdCgnZGV2aS11LXBvcGEuc3ZnJywgNTAsIDkwLCBNYXRoLlBJICogMC4yLCBuZXcgVmVjdG9yKDk1MCwgOTgwKSwgdGhpcykpO1xuXG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5wdXNoKG5ldyBTdGF0aWNPYmplY3QoJ3RpdHVzaGtpLnN2ZycsIDQwMCwgNDAwLCBNYXRoLlBJICogMS41LCBuZXcgVmVjdG9yKDM1NTAsIDEzMDApLCB0aGlzLCB0cnVlKSk7XG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5wdXNoKG5ldyBTdGF0aWNPYmplY3QoJ3dlLnN2ZycsIDE5MCwgMjE1LCBNYXRoLlBJICogMS45LCBuZXcgVmVjdG9yKDM1MCwgMTMwMCksIHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzLnB1c2gobmV3IFN0YXRpY09iamVjdCgneWFuZGV4LWVkYS10cmktcGFybnlhLnN2ZycsIDIwMCwgODUsIE1hdGguUEkgKiAxLjksIG5ldyBWZWN0b3IoNTUwLCAxMzAwKSwgdGhpcykpO1xuICAgICAgICB0aGlzLnN0YXRpY09iamVjdHMucHVzaChuZXcgU3RhdGljT2JqZWN0KCd5YW5kZXgtZWRhLXRyaS1wYXJueWEuc3ZnJywgMjAwLCA4NSwgTWF0aC5QSSAqIDEuOSwgbmV3IFZlY3Rvcig2OTAsIDgyMCksIHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzLnB1c2gobmV3IFN0YXRpY09iamVjdCgnZG9kby5zdmcnLCA1MCwgNzAsIE1hdGguUEkgKiAwLjQsIG5ldyBWZWN0b3IoODUwLCA3MjApLCB0aGlzKSk7XG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5wdXNoKG5ldyBTdGF0aWNPYmplY3QoJ2dydXBhMi5zdmcnLCAxNTAsIDE1MCwgTWF0aC5QSSAqIDEuMTUsIG5ldyBWZWN0b3IoOTQwLCA3MjApLCB0aGlzKSk7XG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5wdXNoKG5ldyBTdGF0aWNPYmplY3QoJ2h1bWFuLnN2ZycsIDk1LCA5NSwgMCwgbmV3IFZlY3Rvcig5NDAsIDk2MCksIHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdGF0aWNPYmplY3RzLnB1c2gobmV3IFN0YXRpY09iamVjdCgnaHVtYW4uc3ZnJywgOTUsIDk1LCAwLCBuZXcgVmVjdG9yKDE3ODAsIDEwMjQpLCB0aGlzKSk7XG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5wdXNoKG5ldyBTdGF0aWNPYmplY3QoJ2h1bWFuLnN2ZycsIDk1LCA5NSwgMCwgbmV3IFZlY3RvcigxODgwLCAxMTQ0KSwgdGhpcykpO1xuICAgICAgICB0aGlzLnN0YXRpY09iamVjdHMucHVzaChuZXcgU3RhdGljT2JqZWN0KCdodW1hbi5zdmcnLCA5NSwgOTUsIDAsIG5ldyBWZWN0b3IoNzUwLCAxMzAwKSwgdGhpcykpO1xuXG5cbiAgICB9XG5cbiAgICByZW5kZXJTdGF0aWMoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcblxuXG4gICAgICAgIHRoaXMuc3RhdGljT2JqZWN0cy5mb3JFYWNoKF8gPT4gXy5yZW5kZXIoY3R4LCB0aGlzLmNhbWVyYSkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tICcuL2VudGl0aWVzL0dhbWVPYmplY3QnO1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9lbnRpdGllcy9UcmFuc2Zvcm0nO1xuaW1wb3J0IHsgRHJhd2VyIH0gZnJvbSAnLi9lbnRpdGllcy9EcmF3ZXInO1xuaW1wb3J0IHsgVHVwbGUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gJy4vZW50aXRpZXMvQ2FtZXJhJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4vZW50aXRpZXMvVmVjdG9yJztcbmltcG9ydCB7IEdhbWUgfSBmcm9tICcuL0dhbWUnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSAnZGV0ZWN0LWNvbGxpc2lvbnMnO1xuXG5cbmNsYXNzIFBsYXllckRyYXdlciBleHRlbmRzIERyYXdlciB7XG4gICAgcmVuZGVyKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5hc3NldHMuZ2V0KCdwbGF5ZXIuc3ZnJyksIC0xOCwgLTQ4LCA1MiwgNjMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBsYXllciBleHRlbmRzIEdhbWVPYmplY3Qge1xuICAgIHNwZWVkOiBudW1iZXIgPSA0MDA7XG4gICAgcHJpdmF0ZSBkYW1hZ2VDb2xsaWRlcjogYW55O1xuXG4gICAgY29uc3RydWN0b3IodHJhbnNmb3JtOiBUcmFuc2Zvcm0sIHByaXZhdGUgZ2FtZTogR2FtZSkge1xuICAgICAgICBzdXBlcih0cmFuc2Zvcm0sIG5ldyBQbGF5ZXJEcmF3ZXIodHJhbnNmb3JtKSxcbiAgICAgICAgICAgIGdhbWUuc3lzdGVtLmNyZWF0ZUNpcmNsZSh0cmFuc2Zvcm0ucG9zaXRpb24ueCwgdHJhbnNmb3JtLnBvc2l0aW9uLnksIDI1KSk7XG5cbiAgICAgICAgdGhpcy5kYW1hZ2VDb2xsaWRlciA9IGdhbWUuc3lzdGVtLmNyZWF0ZVBvbHlnb24odHJhbnNmb3JtLnBvc2l0aW9uLngsIHRyYW5zZm9ybS5wb3NpdGlvbi55LCBbXG4gICAgICAgICAgICBbLTEwLCAtMzBdLCBbLTEwLCAzMF0sIFswLCAwXVxuICAgICAgICBdLCB0cmFuc2Zvcm0uYW5nbGUpO1xuXG4gICAgICAgIHRoaXMubGlzdGVuKCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGRpcmVjdGlvbnM6IFJlY29yZDxzdHJpbmcsIFR1cGxlPiA9IHtcbiAgICAgICAgODc6IFswLCAtMV0sXG4gICAgICAgIDY1OiBbLTEsIDBdLFxuICAgICAgICA4MzogWzAsIDFdLFxuICAgICAgICA2ODogWzEsIDBdLFxuICAgIH07XG5cbiAgICBwcml2YXRlIHByZXNzZWRLZXlzOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPiA9IHt9O1xuXG5cbiAgICBsaXN0ZW4oKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJlc3NlZEtleXNbZS5rZXlDb2RlXSA9IHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnByZXNzZWRLZXlzW2Uua2V5Q29kZV0gPSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhbWVyYTogQ2FtZXJhID0gdGhpcy5nYW1lLmNhbWVyYTtcbiAgICAgICAgICAgIGNvbnN0IHYxID0gbmV3IFZlY3RvcihlLnBhZ2VYICsgY2FtZXJhLnhWaWV3LCBlLnBhZ2VZICsgY2FtZXJhLnlWaWV3KTtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLmxvb2tBdCh2MSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHdhbGwgPSB0aGlzLmdhbWUud2FsbHMuZmluZCh3YWxsID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgUmVzdWx0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGFtYWdlQ29sbGlkZXIuY29sbGlkZXMod2FsbC5jb2xsaWRlciwgcmVzdWx0KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAod2FsbCkge1xuICAgICAgICAgICAgICAgIHdhbGwudGFrZURhbWFnZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuY3JlYXRlUGl6emFPYmplY3QodGhpcy50cmFuc2Zvcm0ucG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIoY3R4LCBjYW1lcmEpIHtcbiAgICAgICAgc3VwZXIucmVuZGVyKGN0eCwgY2FtZXJhKTtcblxuICAgICAgICBpZiAodGhpcy5kYW1hZ2VDb2xsaWRlcikge1xuICAgICAgICAgICAgY3R4LnJvdGF0ZSgtdGhpcy50cmFuc2Zvcm0uYW5nbGUpO1xuICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZShcbiAgICAgICAgICAgICAgICAtdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICAtdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24ueVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3JlZCc7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICB0aGlzLmRhbWFnZUNvbGxpZGVyLmRyYXcoY3R4KTtcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcblxuXG4gICAgICAgICAgICBjdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgZGlyZWN0aW9uKCk6IFZlY3RvciB7XG4gICAgICAgIGxldCB2ZWN0b3IgPSBWZWN0b3IuemVybygpO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKFBsYXllci5kaXJlY3Rpb25zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpc1ByZXNzZWQgPSB0aGlzLnByZXNzZWRLZXlzW2tleV0gfHwgZmFsc2U7XG4gICAgICAgICAgICBpZiAoaXNQcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgdmVjdG9yID0gdmVjdG9yLmFkZChuZXcgVmVjdG9yKC4uLlBsYXllci5kaXJlY3Rpb25zW2tleV0pKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdmVjdG9yO1xuICAgIH1cblxuICAgIHVwZGF0ZShkdDogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZShkdCk7XG5cbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuZGlyZWN0aW9uLm11bHRpcGxlKHRoaXMuc3BlZWQpLm11bHRpcGxlKGR0KTtcblxuICAgICAgICB0aGlzLnRyYW5zZm9ybS5zZXRQb3NpdGlvbih0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5hZGQocGF0aCkpO1xuICAgICAgICB0aGlzLmNvbGxpZGVyLnggPSB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi54O1xuICAgICAgICB0aGlzLmNvbGxpZGVyLnkgPSB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi55O1xuXG4gICAgICAgIHRoaXMuZGFtYWdlQ29sbGlkZXIueCA9IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLng7XG4gICAgICAgIHRoaXMuZGFtYWdlQ29sbGlkZXIueSA9IHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnk7XG4gICAgICAgIHRoaXMuZGFtYWdlQ29sbGlkZXIuYW5nbGUgPSB0aGlzLnRyYW5zZm9ybS5hbmdsZTtcblxuICAgICAgICB0aGlzLmdhbWUucmlvdFBvbGljZS5mb3JFYWNoKHBvbGljZSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgUmVzdWx0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5jb2xsaWRlci5jb2xsaWRlcyhwb2xpY2UuY29sbGlkZXIsIHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZWN0b3IgPSBuZXcgVmVjdG9yKC1yZXN1bHQub3ZlcmxhcCAqIHJlc3VsdC5vdmVybGFwX3gsIC1yZXN1bHQub3ZlcmxhcCAqIHJlc3VsdC5vdmVybGFwX3kpO1xuICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnNldFBvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5hZGQodmVjdG9yKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZ2FtZS53YWxscy5mb3JFYWNoKHdhbGwgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFJlc3VsdCgpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NvbGxpc2lvbi4uLi4nLCB3YWxsLmNvbGxpZGVyLCByZXN1bHQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY29sbGlkZXIuY29sbGlkZXMod2FsbC5jb2xsaWRlciwgcmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIGlmICh3YWxsLmhwIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3IoLXJlc3VsdC5vdmVybGFwICogcmVzdWx0Lm92ZXJsYXBfeCwgLXJlc3VsdC5vdmVybGFwICogcmVzdWx0Lm92ZXJsYXBfeSk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2V0UG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldyBWZWN0b3IoMCwwKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5hZGQodmVjdG9yKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZ2FtZS50b3ducy5mb3JFYWNoKHdhbGwgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFJlc3VsdCgpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2NvbGxpc2lvbi4uLi4nLCB3YWxsLmNvbGxpZGVyLCByZXN1bHQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuY29sbGlkZXIuY29sbGlkZXMod2FsbC5jb2xsaWRlciwgcmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3IoLXJlc3VsdC5vdmVybGFwICogcmVzdWx0Lm92ZXJsYXBfeCwgLXJlc3VsdC5vdmVybGFwICogcmVzdWx0Lm92ZXJsYXBfeSk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2V0UG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldyBWZWN0b3IoMCwwKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5hZGQodmVjdG9yKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZ2FtZS5zdGF0aWNPYmplY3RzLmZvckVhY2goX3N0YXRpYyA9PiB7XG4gICAgICAgICAgICBpZiAoX3N0YXRpYy5vZmZDb2xpZGVyKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgUmVzdWx0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5jb2xsaWRlci5jb2xsaWRlcyhfc3RhdGljLnN0YXRpYy5jb2xsaWRlciwgcmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3IoLXJlc3VsdC5vdmVybGFwICogcmVzdWx0Lm92ZXJsYXBfeCwgLXJlc3VsdC5vdmVybGFwICogcmVzdWx0Lm92ZXJsYXBfeSk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2V0UG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmFkZCh2ZWN0b3IpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG4iLCJjb25zdCBCVkhCcmFuY2ggPSByZXF1aXJlKCcuL0JWSEJyYW5jaCcpXG5cbi8qKlxuICogQSBCb3VuZGluZyBWb2x1bWUgSGllcmFyY2h5IChCVkgpIHVzZWQgdG8gZmluZCBwb3RlbnRpYWwgY29sbGlzaW9ucyBxdWlja2x5XG4gKiBAY2xhc3NcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEJWSCB7XG4gIC8qKlxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9oaWVyYXJjaHkgPSBudWxsXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9ib2RpZXMgPSBbXVxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fZGlydHlfYnJhbmNoZXMgPSBbXVxuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydHMgYSBib2R5IGludG8gdGhlIEJWSFxuICAgKiBAcGFyYW0ge0NpcmNsZXxQb2x5Z29ufFBvaW50fSBib2R5IFRoZSBib2R5IHRvIGluc2VydFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFt1cGRhdGluZyA9IGZhbHNlXSBTZXQgdG8gdHJ1ZSBpZiB0aGUgYm9keSBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgQlZIICh1c2VkIGludGVybmFsbHkgd2hlbiB1cGRhdGluZyB0aGUgYm9keSdzIHBvc2l0aW9uKVxuICAgKi9cbiAgaW5zZXJ0IChib2R5LCB1cGRhdGluZyA9IGZhbHNlKSB7XG4gICAgaWYgKCF1cGRhdGluZykge1xuICAgICAgY29uc3QgYnZoID0gYm9keS5fYnZoXG5cbiAgICAgIGlmIChidmggJiYgYnZoICE9PSB0aGlzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQm9keSBiZWxvbmdzIHRvIGFub3RoZXIgY29sbGlzaW9uIHN5c3RlbScpXG4gICAgICB9XG5cbiAgICAgIGJvZHkuX2J2aCA9IHRoaXNcbiAgICAgIHRoaXMuX2JvZGllcy5wdXNoKGJvZHkpXG4gICAgfVxuXG4gICAgY29uc3QgcG9seWdvbiA9IGJvZHkuX3BvbHlnb25cbiAgICBjb25zdCBib2R5X3ggPSBib2R5LnhcbiAgICBjb25zdCBib2R5X3kgPSBib2R5LnlcblxuICAgIGlmIChwb2x5Z29uKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGJvZHkuX2RpcnR5X2Nvb3JkcyB8fFxuICAgICAgICBib2R5LnggIT09IGJvZHkuX3ggfHxcbiAgICAgICAgYm9keS55ICE9PSBib2R5Ll95IHx8XG4gICAgICAgIGJvZHkuYW5nbGUgIT09IGJvZHkuX2FuZ2xlIHx8XG4gICAgICAgIGJvZHkuc2NhbGVfeCAhPT0gYm9keS5fc2NhbGVfeCB8fFxuICAgICAgICBib2R5LnNjYWxlX3kgIT09IGJvZHkuX3NjYWxlX3lcbiAgICAgICkge1xuICAgICAgICBib2R5Ll9jYWxjdWxhdGVDb29yZHMoKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHBhZGRpbmcgPSBib2R5Ll9idmhfcGFkZGluZ1xuICAgIGNvbnN0IHJhZGl1cyA9IHBvbHlnb24gPyAwIDogYm9keS5yYWRpdXMgKiBib2R5LnNjYWxlXG4gICAgY29uc3QgYm9keV9taW5feCA9IChwb2x5Z29uID8gYm9keS5fbWluX3ggOiBib2R5X3ggLSByYWRpdXMpIC0gcGFkZGluZ1xuICAgIGNvbnN0IGJvZHlfbWluX3kgPSAocG9seWdvbiA/IGJvZHkuX21pbl95IDogYm9keV95IC0gcmFkaXVzKSAtIHBhZGRpbmdcbiAgICBjb25zdCBib2R5X21heF94ID0gKHBvbHlnb24gPyBib2R5Ll9tYXhfeCA6IGJvZHlfeCArIHJhZGl1cykgKyBwYWRkaW5nXG4gICAgY29uc3QgYm9keV9tYXhfeSA9IChwb2x5Z29uID8gYm9keS5fbWF4X3kgOiBib2R5X3kgKyByYWRpdXMpICsgcGFkZGluZ1xuXG4gICAgYm9keS5fYnZoX21pbl94ID0gYm9keV9taW5feFxuICAgIGJvZHkuX2J2aF9taW5feSA9IGJvZHlfbWluX3lcbiAgICBib2R5Ll9idmhfbWF4X3ggPSBib2R5X21heF94XG4gICAgYm9keS5fYnZoX21heF95ID0gYm9keV9tYXhfeVxuXG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9oaWVyYXJjaHlcbiAgICBsZXQgc29ydCA9IDBcblxuICAgIGlmICghY3VycmVudCkge1xuICAgICAgdGhpcy5faGllcmFyY2h5ID0gYm9keVxuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAvLyBCcmFuY2hcbiAgICAgICAgaWYgKGN1cnJlbnQuX2J2aF9icmFuY2gpIHtcbiAgICAgICAgICBjb25zdCBsZWZ0ID0gY3VycmVudC5fYnZoX2xlZnRcbiAgICAgICAgICBjb25zdCBsZWZ0X21pbl95ID0gbGVmdC5fYnZoX21pbl95XG4gICAgICAgICAgY29uc3QgbGVmdF9tYXhfeCA9IGxlZnQuX2J2aF9tYXhfeFxuICAgICAgICAgIGNvbnN0IGxlZnRfbWF4X3kgPSBsZWZ0Ll9idmhfbWF4X3lcbiAgICAgICAgICBjb25zdCBsZWZ0X25ld19taW5feCA9IGJvZHlfbWluX3ggPCBsZWZ0Ll9idmhfbWluX3ggPyBib2R5X21pbl94IDogbGVmdC5fYnZoX21pbl94XG4gICAgICAgICAgY29uc3QgbGVmdF9uZXdfbWluX3kgPSBib2R5X21pbl95IDwgbGVmdF9taW5feSA/IGJvZHlfbWluX3kgOiBsZWZ0X21pbl95XG4gICAgICAgICAgY29uc3QgbGVmdF9uZXdfbWF4X3ggPSBib2R5X21heF94ID4gbGVmdF9tYXhfeCA/IGJvZHlfbWF4X3ggOiBsZWZ0X21heF94XG4gICAgICAgICAgY29uc3QgbGVmdF9uZXdfbWF4X3kgPSBib2R5X21heF95ID4gbGVmdF9tYXhfeSA/IGJvZHlfbWF4X3kgOiBsZWZ0X21heF95XG4gICAgICAgICAgY29uc3QgbGVmdF92b2x1bWUgPSAobGVmdF9tYXhfeCAtIGxlZnQuX2J2aF9taW5feCkgKiAobGVmdF9tYXhfeSAtIGxlZnRfbWluX3kpXG4gICAgICAgICAgY29uc3QgbGVmdF9uZXdfdm9sdW1lID0gKGxlZnRfbmV3X21heF94IC0gbGVmdF9uZXdfbWluX3gpICogKGxlZnRfbmV3X21heF95IC0gbGVmdF9uZXdfbWluX3kpXG4gICAgICAgICAgY29uc3QgbGVmdF9kaWZmZXJlbmNlID0gbGVmdF9uZXdfdm9sdW1lIC0gbGVmdF92b2x1bWVcblxuICAgICAgICAgIGNvbnN0IHJpZ2h0ID0gY3VycmVudC5fYnZoX3JpZ2h0XG4gICAgICAgICAgY29uc3QgcmlnaHRfbWluX3ggPSByaWdodC5fYnZoX21pbl94XG4gICAgICAgICAgY29uc3QgcmlnaHRfbWluX3kgPSByaWdodC5fYnZoX21pbl95XG4gICAgICAgICAgY29uc3QgcmlnaHRfbWF4X3ggPSByaWdodC5fYnZoX21heF94XG4gICAgICAgICAgY29uc3QgcmlnaHRfbWF4X3kgPSByaWdodC5fYnZoX21heF95XG4gICAgICAgICAgY29uc3QgcmlnaHRfbmV3X21pbl94ID0gYm9keV9taW5feCA8IHJpZ2h0X21pbl94ID8gYm9keV9taW5feCA6IHJpZ2h0X21pbl94XG4gICAgICAgICAgY29uc3QgcmlnaHRfbmV3X21pbl95ID0gYm9keV9taW5feSA8IHJpZ2h0X21pbl95ID8gYm9keV9taW5feSA6IHJpZ2h0X21pbl95XG4gICAgICAgICAgY29uc3QgcmlnaHRfbmV3X21heF94ID0gYm9keV9tYXhfeCA+IHJpZ2h0X21heF94ID8gYm9keV9tYXhfeCA6IHJpZ2h0X21heF94XG4gICAgICAgICAgY29uc3QgcmlnaHRfbmV3X21heF95ID0gYm9keV9tYXhfeSA+IHJpZ2h0X21heF95ID8gYm9keV9tYXhfeSA6IHJpZ2h0X21heF95XG4gICAgICAgICAgY29uc3QgcmlnaHRfdm9sdW1lID0gKHJpZ2h0X21heF94IC0gcmlnaHRfbWluX3gpICogKHJpZ2h0X21heF95IC0gcmlnaHRfbWluX3kpXG4gICAgICAgICAgY29uc3QgcmlnaHRfbmV3X3ZvbHVtZSA9IChyaWdodF9uZXdfbWF4X3ggLSByaWdodF9uZXdfbWluX3gpICogKHJpZ2h0X25ld19tYXhfeSAtIHJpZ2h0X25ld19taW5feSlcbiAgICAgICAgICBjb25zdCByaWdodF9kaWZmZXJlbmNlID0gcmlnaHRfbmV3X3ZvbHVtZSAtIHJpZ2h0X3ZvbHVtZVxuXG4gICAgICAgICAgY3VycmVudC5fYnZoX3NvcnQgPSBzb3J0KytcbiAgICAgICAgICBjdXJyZW50Ll9idmhfbWluX3ggPSBsZWZ0X25ld19taW5feCA8IHJpZ2h0X25ld19taW5feCA/IGxlZnRfbmV3X21pbl94IDogcmlnaHRfbmV3X21pbl94XG4gICAgICAgICAgY3VycmVudC5fYnZoX21pbl95ID0gbGVmdF9uZXdfbWluX3kgPCByaWdodF9uZXdfbWluX3kgPyBsZWZ0X25ld19taW5feSA6IHJpZ2h0X25ld19taW5feVxuICAgICAgICAgIGN1cnJlbnQuX2J2aF9tYXhfeCA9IGxlZnRfbmV3X21heF94ID4gcmlnaHRfbmV3X21heF94ID8gbGVmdF9uZXdfbWF4X3ggOiByaWdodF9uZXdfbWF4X3hcbiAgICAgICAgICBjdXJyZW50Ll9idmhfbWF4X3kgPSBsZWZ0X25ld19tYXhfeSA+IHJpZ2h0X25ld19tYXhfeSA/IGxlZnRfbmV3X21heF95IDogcmlnaHRfbmV3X21heF95XG5cbiAgICAgICAgICBjdXJyZW50ID0gbGVmdF9kaWZmZXJlbmNlIDw9IHJpZ2h0X2RpZmZlcmVuY2UgPyBsZWZ0IDogcmlnaHRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTGVhZlxuICAgICAgICAgIGNvbnN0IGdyYW5kcGFyZW50ID0gY3VycmVudC5fYnZoX3BhcmVudFxuICAgICAgICAgIGNvbnN0IHBhcmVudF9taW5feCA9IGN1cnJlbnQuX2J2aF9taW5feFxuICAgICAgICAgIGNvbnN0IHBhcmVudF9taW5feSA9IGN1cnJlbnQuX2J2aF9taW5feVxuICAgICAgICAgIGNvbnN0IHBhcmVudF9tYXhfeCA9IGN1cnJlbnQuX2J2aF9tYXhfeFxuICAgICAgICAgIGNvbnN0IHBhcmVudF9tYXhfeSA9IGN1cnJlbnQuX2J2aF9tYXhfeVxuICAgICAgICAgIGNvbnN0IG5ld19wYXJlbnQgPSBjdXJyZW50Ll9idmhfcGFyZW50ID0gYm9keS5fYnZoX3BhcmVudCA9IEJWSEJyYW5jaC5nZXRCcmFuY2goKVxuXG4gICAgICAgICAgbmV3X3BhcmVudC5fYnZoX3BhcmVudCA9IGdyYW5kcGFyZW50XG4gICAgICAgICAgbmV3X3BhcmVudC5fYnZoX2xlZnQgPSBjdXJyZW50XG4gICAgICAgICAgbmV3X3BhcmVudC5fYnZoX3JpZ2h0ID0gYm9keVxuICAgICAgICAgIG5ld19wYXJlbnQuX2J2aF9zb3J0ID0gc29ydCsrXG4gICAgICAgICAgbmV3X3BhcmVudC5fYnZoX21pbl94ID0gYm9keV9taW5feCA8IHBhcmVudF9taW5feCA/IGJvZHlfbWluX3ggOiBwYXJlbnRfbWluX3hcbiAgICAgICAgICBuZXdfcGFyZW50Ll9idmhfbWluX3kgPSBib2R5X21pbl95IDwgcGFyZW50X21pbl95ID8gYm9keV9taW5feSA6IHBhcmVudF9taW5feVxuICAgICAgICAgIG5ld19wYXJlbnQuX2J2aF9tYXhfeCA9IGJvZHlfbWF4X3ggPiBwYXJlbnRfbWF4X3ggPyBib2R5X21heF94IDogcGFyZW50X21heF94XG4gICAgICAgICAgbmV3X3BhcmVudC5fYnZoX21heF95ID0gYm9keV9tYXhfeSA+IHBhcmVudF9tYXhfeSA/IGJvZHlfbWF4X3kgOiBwYXJlbnRfbWF4X3lcblxuICAgICAgICAgIGlmICghZ3JhbmRwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2hpZXJhcmNoeSA9IG5ld19wYXJlbnRcbiAgICAgICAgICB9IGVsc2UgaWYgKGdyYW5kcGFyZW50Ll9idmhfbGVmdCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgZ3JhbmRwYXJlbnQuX2J2aF9sZWZ0ID0gbmV3X3BhcmVudFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBncmFuZHBhcmVudC5fYnZoX3JpZ2h0ID0gbmV3X3BhcmVudFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGJvZHkgZnJvbSB0aGUgQlZIXG4gICAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGJvZHkgVGhlIGJvZHkgdG8gcmVtb3ZlXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3VwZGF0aW5nID0gZmFsc2VdIFNldCB0byB0cnVlIGlmIHRoaXMgaXMgYSB0ZW1wb3JhcnkgcmVtb3ZhbCAodXNlZCBpbnRlcm5hbGx5IHdoZW4gdXBkYXRpbmcgdGhlIGJvZHkncyBwb3NpdGlvbilcbiAgICovXG4gIHJlbW92ZSAoYm9keSwgdXBkYXRpbmcgPSBmYWxzZSkge1xuICAgIGlmICghdXBkYXRpbmcpIHtcbiAgICAgIGNvbnN0IGJ2aCA9IGJvZHkuX2J2aFxuXG4gICAgICBpZiAoYnZoICYmIGJ2aCAhPT0gdGhpcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JvZHkgYmVsb25ncyB0byBhbm90aGVyIGNvbGxpc2lvbiBzeXN0ZW0nKVxuICAgICAgfVxuXG4gICAgICBib2R5Ll9idmggPSBudWxsXG4gICAgICB0aGlzLl9ib2RpZXMuc3BsaWNlKHRoaXMuX2JvZGllcy5pbmRleE9mKGJvZHkpLCAxKVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9oaWVyYXJjaHkgPT09IGJvZHkpIHtcbiAgICAgIHRoaXMuX2hpZXJhcmNoeSA9IG51bGxcblxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcGFyZW50ID0gYm9keS5fYnZoX3BhcmVudFxuICAgIGNvbnN0IGdyYW5kcGFyZW50ID0gcGFyZW50Ll9idmhfcGFyZW50XG4gICAgY29uc3QgcGFyZW50X2xlZnQgPSBwYXJlbnQuX2J2aF9sZWZ0XG4gICAgY29uc3Qgc2libGluZyA9IHBhcmVudF9sZWZ0ID09PSBib2R5ID8gcGFyZW50Ll9idmhfcmlnaHQgOiBwYXJlbnRfbGVmdFxuXG4gICAgc2libGluZy5fYnZoX3BhcmVudCA9IGdyYW5kcGFyZW50XG5cbiAgICBpZiAoc2libGluZy5fYnZoX2JyYW5jaCkge1xuICAgICAgc2libGluZy5fYnZoX3NvcnQgPSBwYXJlbnQuX2J2aF9zb3J0XG4gICAgfVxuXG4gICAgaWYgKGdyYW5kcGFyZW50KSB7XG4gICAgICBpZiAoZ3JhbmRwYXJlbnQuX2J2aF9sZWZ0ID09PSBwYXJlbnQpIHtcbiAgICAgICAgZ3JhbmRwYXJlbnQuX2J2aF9sZWZ0ID0gc2libGluZ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JhbmRwYXJlbnQuX2J2aF9yaWdodCA9IHNpYmxpbmdcbiAgICAgIH1cblxuICAgICAgbGV0IGJyYW5jaCA9IGdyYW5kcGFyZW50XG5cbiAgICAgIHdoaWxlIChicmFuY2gpIHtcbiAgICAgICAgY29uc3QgbGVmdCA9IGJyYW5jaC5fYnZoX2xlZnRcbiAgICAgICAgY29uc3QgbGVmdF9taW5feCA9IGxlZnQuX2J2aF9taW5feFxuICAgICAgICBjb25zdCBsZWZ0X21pbl95ID0gbGVmdC5fYnZoX21pbl95XG4gICAgICAgIGNvbnN0IGxlZnRfbWF4X3ggPSBsZWZ0Ll9idmhfbWF4X3hcbiAgICAgICAgY29uc3QgbGVmdF9tYXhfeSA9IGxlZnQuX2J2aF9tYXhfeVxuXG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gYnJhbmNoLl9idmhfcmlnaHRcbiAgICAgICAgY29uc3QgcmlnaHRfbWluX3ggPSByaWdodC5fYnZoX21pbl94XG4gICAgICAgIGNvbnN0IHJpZ2h0X21pbl95ID0gcmlnaHQuX2J2aF9taW5feVxuICAgICAgICBjb25zdCByaWdodF9tYXhfeCA9IHJpZ2h0Ll9idmhfbWF4X3hcbiAgICAgICAgY29uc3QgcmlnaHRfbWF4X3kgPSByaWdodC5fYnZoX21heF95XG5cbiAgICAgICAgYnJhbmNoLl9idmhfbWluX3ggPSBsZWZ0X21pbl94IDwgcmlnaHRfbWluX3ggPyBsZWZ0X21pbl94IDogcmlnaHRfbWluX3hcbiAgICAgICAgYnJhbmNoLl9idmhfbWluX3kgPSBsZWZ0X21pbl95IDwgcmlnaHRfbWluX3kgPyBsZWZ0X21pbl95IDogcmlnaHRfbWluX3lcbiAgICAgICAgYnJhbmNoLl9idmhfbWF4X3ggPSBsZWZ0X21heF94ID4gcmlnaHRfbWF4X3ggPyBsZWZ0X21heF94IDogcmlnaHRfbWF4X3hcbiAgICAgICAgYnJhbmNoLl9idmhfbWF4X3kgPSBsZWZ0X21heF95ID4gcmlnaHRfbWF4X3kgPyBsZWZ0X21heF95IDogcmlnaHRfbWF4X3lcblxuICAgICAgICBicmFuY2ggPSBicmFuY2guX2J2aF9wYXJlbnRcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faGllcmFyY2h5ID0gc2libGluZ1xuICAgIH1cblxuICAgIEJWSEJyYW5jaC5yZWxlYXNlQnJhbmNoKHBhcmVudClcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBCVkguIE1vdmVkIGJvZGllcyBhcmUgcmVtb3ZlZC9pbnNlcnRlZC5cbiAgICovXG4gIHVwZGF0ZSAoKSB7XG4gICAgY29uc3QgYm9kaWVzID0gdGhpcy5fYm9kaWVzXG4gICAgY29uc3QgY291bnQgPSBib2RpZXMubGVuZ3RoXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IGJvZHkgPSBib2RpZXNbaV1cblxuICAgICAgbGV0IHVwZGF0ZSA9IGZhbHNlXG5cbiAgICAgIGlmICghdXBkYXRlICYmIGJvZHkucGFkZGluZyAhPT0gYm9keS5fYnZoX3BhZGRpbmcpIHtcbiAgICAgICAgYm9keS5fYnZoX3BhZGRpbmcgPSBib2R5LnBhZGRpbmdcbiAgICAgICAgdXBkYXRlID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoIXVwZGF0ZSkge1xuICAgICAgICBjb25zdCBwb2x5Z29uID0gYm9keS5fcG9seWdvblxuXG4gICAgICAgIGlmIChwb2x5Z29uKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgYm9keS5fZGlydHlfY29vcmRzIHx8XG4gICAgICAgICAgICBib2R5LnggIT09IGJvZHkuX3ggfHxcbiAgICAgICAgICAgIGJvZHkueSAhPT0gYm9keS5feSB8fFxuICAgICAgICAgICAgYm9keS5hbmdsZSAhPT0gYm9keS5fYW5nbGUgfHxcbiAgICAgICAgICAgIGJvZHkuc2NhbGVfeCAhPT0gYm9keS5fc2NhbGVfeCB8fFxuICAgICAgICAgICAgYm9keS5zY2FsZV95ICE9PSBib2R5Ll9zY2FsZV95XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBib2R5Ll9jYWxjdWxhdGVDb29yZHMoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHggPSBib2R5LnhcbiAgICAgICAgY29uc3QgeSA9IGJvZHkueVxuICAgICAgICBjb25zdCByYWRpdXMgPSBwb2x5Z29uID8gMCA6IGJvZHkucmFkaXVzICogYm9keS5zY2FsZVxuICAgICAgICBjb25zdCBtaW5feCA9IHBvbHlnb24gPyBib2R5Ll9taW5feCA6IHggLSByYWRpdXNcbiAgICAgICAgY29uc3QgbWluX3kgPSBwb2x5Z29uID8gYm9keS5fbWluX3kgOiB5IC0gcmFkaXVzXG4gICAgICAgIGNvbnN0IG1heF94ID0gcG9seWdvbiA/IGJvZHkuX21heF94IDogeCArIHJhZGl1c1xuICAgICAgICBjb25zdCBtYXhfeSA9IHBvbHlnb24gPyBib2R5Ll9tYXhfeSA6IHkgKyByYWRpdXNcblxuICAgICAgICB1cGRhdGUgPSBtaW5feCA8IGJvZHkuX2J2aF9taW5feCB8fCBtaW5feSA8IGJvZHkuX2J2aF9taW5feSB8fCBtYXhfeCA+IGJvZHkuX2J2aF9tYXhfeCB8fCBtYXhfeSA+IGJvZHkuX2J2aF9tYXhfeVxuICAgICAgfVxuXG4gICAgICBpZiAodXBkYXRlKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKGJvZHksIHRydWUpXG4gICAgICAgIHRoaXMuaW5zZXJ0KGJvZHksIHRydWUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIHBvdGVudGlhbCBjb2xsaXNpb25zIGZvciBhIGJvZHlcbiAgICogQHBhcmFtIHtDaXJjbGV8UG9seWdvbnxQb2ludH0gYm9keSBUaGUgYm9keSB0byB0ZXN0XG4gICAqIEByZXR1cm5zIHtBcnJheTxCb2R5Pn1cbiAgICovXG4gIHBvdGVudGlhbHMgKGJvZHkpIHtcbiAgICBjb25zdCByZXN1bHRzID0gW11cbiAgICBjb25zdCBtaW5feCA9IGJvZHkuX2J2aF9taW5feFxuICAgIGNvbnN0IG1pbl95ID0gYm9keS5fYnZoX21pbl95XG4gICAgY29uc3QgbWF4X3ggPSBib2R5Ll9idmhfbWF4X3hcbiAgICBjb25zdCBtYXhfeSA9IGJvZHkuX2J2aF9tYXhfeVxuXG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9oaWVyYXJjaHlcbiAgICBsZXQgdHJhdmVyc2VfbGVmdCA9IHRydWVcblxuICAgIGlmICghY3VycmVudCB8fCAhY3VycmVudC5fYnZoX2JyYW5jaCkge1xuICAgICAgcmV0dXJuIHJlc3VsdHNcbiAgICB9XG5cbiAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgaWYgKHRyYXZlcnNlX2xlZnQpIHtcbiAgICAgICAgdHJhdmVyc2VfbGVmdCA9IGZhbHNlXG5cbiAgICAgICAgbGV0IGxlZnQgPSBjdXJyZW50Ll9idmhfYnJhbmNoID8gY3VycmVudC5fYnZoX2xlZnQgOiBudWxsXG5cbiAgICAgICAgd2hpbGUgKFxuICAgICAgICAgIGxlZnQgJiZcbiAgICAgICAgICBsZWZ0Ll9idmhfbWF4X3ggPj0gbWluX3ggJiZcbiAgICAgICAgICBsZWZ0Ll9idmhfbWF4X3kgPj0gbWluX3kgJiZcbiAgICAgICAgICBsZWZ0Ll9idmhfbWluX3ggPD0gbWF4X3ggJiZcbiAgICAgICAgICBsZWZ0Ll9idmhfbWluX3kgPD0gbWF4X3lcbiAgICAgICAgKSB7XG4gICAgICAgICAgY3VycmVudCA9IGxlZnRcbiAgICAgICAgICBsZWZ0ID0gY3VycmVudC5fYnZoX2JyYW5jaCA/IGN1cnJlbnQuX2J2aF9sZWZ0IDogbnVsbFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJyYW5jaCA9IGN1cnJlbnQuX2J2aF9icmFuY2hcbiAgICAgIGNvbnN0IHJpZ2h0ID0gYnJhbmNoID8gY3VycmVudC5fYnZoX3JpZ2h0IDogbnVsbFxuXG4gICAgICBpZiAoXG4gICAgICAgIHJpZ2h0ICYmXG4gICAgICAgIHJpZ2h0Ll9idmhfbWF4X3ggPiBtaW5feCAmJlxuICAgICAgICByaWdodC5fYnZoX21heF95ID4gbWluX3kgJiZcbiAgICAgICAgcmlnaHQuX2J2aF9taW5feCA8IG1heF94ICYmXG4gICAgICAgIHJpZ2h0Ll9idmhfbWluX3kgPCBtYXhfeVxuICAgICAgKSB7XG4gICAgICAgIGN1cnJlbnQgPSByaWdodFxuICAgICAgICB0cmF2ZXJzZV9sZWZ0ID0gdHJ1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFicmFuY2ggJiYgY3VycmVudCAhPT0gYm9keSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChjdXJyZW50KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhcmVudCA9IGN1cnJlbnQuX2J2aF9wYXJlbnRcblxuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuX2J2aF9yaWdodCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgY3VycmVudCA9IHBhcmVudFxuICAgICAgICAgICAgcGFyZW50ID0gY3VycmVudC5fYnZoX3BhcmVudFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnQgPSBwYXJlbnRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHNcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgYm9kaWVzIHdpdGhpbiB0aGUgQlZIIHRvIGEgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEJ3MgY3VycmVudCBwYXRoXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGRyYXcgdG9cbiAgICovXG4gIGRyYXcgKGNvbnRleHQpIHtcbiAgICBjb25zdCBib2RpZXMgPSB0aGlzLl9ib2RpZXNcbiAgICBjb25zdCBjb3VudCA9IGJvZGllcy5sZW5ndGhcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuICAgICAgYm9kaWVzW2ldLmRyYXcoY29udGV4dClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgdGhlIEJWSCB0byBhIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCdzIGN1cnJlbnQgcGF0aC4gVGhpcyBpcyB1c2VmdWwgZm9yIHRlc3Rpbmcgb3V0IGRpZmZlcmVudCBwYWRkaW5nIHZhbHVlcyBmb3IgYm9kaWVzLlxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dCBUaGUgY29udGV4dCB0byBkcmF3IHRvXG4gICAqL1xuICBkcmF3QlZIIChjb250ZXh0KSB7XG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9oaWVyYXJjaHlcbiAgICBsZXQgdHJhdmVyc2VfbGVmdCA9IHRydWVcblxuICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICBpZiAodHJhdmVyc2VfbGVmdCkge1xuICAgICAgICB0cmF2ZXJzZV9sZWZ0ID0gZmFsc2VcblxuICAgICAgICBsZXQgbGVmdCA9IGN1cnJlbnQuX2J2aF9icmFuY2ggPyBjdXJyZW50Ll9idmhfbGVmdCA6IG51bGxcblxuICAgICAgICB3aGlsZSAobGVmdCkge1xuICAgICAgICAgIGN1cnJlbnQgPSBsZWZ0XG4gICAgICAgICAgbGVmdCA9IGN1cnJlbnQuX2J2aF9icmFuY2ggPyBjdXJyZW50Ll9idmhfbGVmdCA6IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBicmFuY2ggPSBjdXJyZW50Ll9idmhfYnJhbmNoXG4gICAgICBjb25zdCBtaW5feCA9IGN1cnJlbnQuX2J2aF9taW5feFxuICAgICAgY29uc3QgbWluX3kgPSBjdXJyZW50Ll9idmhfbWluX3lcbiAgICAgIGNvbnN0IG1heF94ID0gY3VycmVudC5fYnZoX21heF94XG4gICAgICBjb25zdCBtYXhfeSA9IGN1cnJlbnQuX2J2aF9tYXhfeVxuICAgICAgY29uc3QgcmlnaHQgPSBicmFuY2ggPyBjdXJyZW50Ll9idmhfcmlnaHQgOiBudWxsXG5cbiAgICAgIGNvbnRleHQubW92ZVRvKG1pbl94LCBtaW5feSlcbiAgICAgIGNvbnRleHQubGluZVRvKG1heF94LCBtaW5feSlcbiAgICAgIGNvbnRleHQubGluZVRvKG1heF94LCBtYXhfeSlcbiAgICAgIGNvbnRleHQubGluZVRvKG1pbl94LCBtYXhfeSlcbiAgICAgIGNvbnRleHQubGluZVRvKG1pbl94LCBtaW5feSlcblxuICAgICAgaWYgKHJpZ2h0KSB7XG4gICAgICAgIGN1cnJlbnQgPSByaWdodFxuICAgICAgICB0cmF2ZXJzZV9sZWZ0ID0gdHJ1ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBhcmVudCA9IGN1cnJlbnQuX2J2aF9wYXJlbnRcblxuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuX2J2aF9yaWdodCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgY3VycmVudCA9IHBhcmVudFxuICAgICAgICAgICAgcGFyZW50ID0gY3VycmVudC5fYnZoX3BhcmVudFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnQgPSBwYXJlbnRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJWSFxuXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gbW9kdWxlLmV4cG9ydHNcbiIsIi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgYnJhbmNoX3Bvb2wgPSBbXVxuXG4vKipcbiAqIEEgYnJhbmNoIHdpdGhpbiBhIEJWSFxuICogQGNsYXNzXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBCVkhCcmFuY2gge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fYnZoX3BhcmVudCA9IG51bGxcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX2J2aF9icmFuY2ggPSB0cnVlXG5cbiAgICAvKiogQHByaXZhdGUgKi9cbiAgICB0aGlzLl9idmhfbGVmdCA9IG51bGxcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX2J2aF9yaWdodCA9IG51bGxcblxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX2J2aF9zb3J0ID0gMFxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fYnZoX21pbl94ID0gMFxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fYnZoX21pbl95ID0gMFxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fYnZoX21heF94ID0gMFxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fYnZoX21heF95ID0gMFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBicmFuY2ggZnJvbSB0aGUgYnJhbmNoIHBvb2wgb3IgY3JlYXRlcyBhIG5ldyBicmFuY2hcbiAgICogQHJldHVybnMge0JWSEJyYW5jaH1cbiAgICovXG4gIHN0YXRpYyBnZXRCcmFuY2ggKCkge1xuICAgIGlmIChicmFuY2hfcG9vbC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBicmFuY2hfcG9vbC5wb3AoKVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQlZIQnJhbmNoKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhIGJyYW5jaCBiYWNrIGludG8gdGhlIGJyYW5jaCBwb29sXG4gICAqIEBwYXJhbSB7QlZIQnJhbmNofSBicmFuY2ggVGhlIGJyYW5jaCB0byByZWxlYXNlXG4gICAqL1xuICBzdGF0aWMgcmVsZWFzZUJyYW5jaCAoYnJhbmNoKSB7XG4gICAgYnJhbmNoX3Bvb2wucHVzaChicmFuY2gpXG4gIH1cblxuICAvKipcbiAgICogU29ydGluZyBjYWxsYmFjayB1c2VkIHRvIHNvcnQgYnJhbmNoZXMgYnkgZGVlcGVzdCBmaXJzdFxuICAgKiBAcGFyYW0ge0JWSEJyYW5jaH0gYSBUaGUgZmlyc3QgYnJhbmNoXG4gICAqIEBwYXJhbSB7QlZIQnJhbmNofSBiIFRoZSBzZWNvbmQgYnJhbmNoXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9XG4gICAqL1xuICBzdGF0aWMgc29ydEJyYW5jaGVzIChhLCBiKSB7XG4gICAgcmV0dXJuIGEuc29ydCA+IGIuc29ydCA/IC0xIDogMVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJWSEJyYW5jaFxuXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gbW9kdWxlLmV4cG9ydHNcbiIsImNvbnN0IEJvZHkgPSByZXF1aXJlKCcuL0JvZHknKVxuXG4vKipcbiAqIEEgY2lyY2xlIHVzZWQgdG8gZGV0ZWN0IGNvbGxpc2lvbnNcbiAqIEBjbGFzc1xuICovXG5jbGFzcyBDaXJjbGUgZXh0ZW5kcyBCb2R5IHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge051bWJlcn0gW3ggPSAwXSBUaGUgc3RhcnRpbmcgWCBjb29yZGluYXRlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbeSA9IDBdIFRoZSBzdGFydGluZyBZIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtyYWRpdXMgPSAwXSBUaGUgcmFkaXVzXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbc2NhbGUgPSAxXSBUaGUgc2NhbGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtwYWRkaW5nID0gMF0gVGhlIGFtb3VudCB0byBwYWQgdGhlIGJvdW5kaW5nIHZvbHVtZSB3aGVuIHRlc3RpbmcgZm9yIHBvdGVudGlhbCBjb2xsaXNpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoeCA9IDAsIHkgPSAwLCByYWRpdXMgPSAwLCBzY2FsZSA9IDEsIHBhZGRpbmcgPSAwKSB7XG4gICAgc3VwZXIoeCwgeSwgcGFkZGluZylcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5yYWRpdXMgPSByYWRpdXNcblxuICAgIC8qKlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zY2FsZSA9IHNjYWxlXG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgdGhlIGNpcmNsZSB0byBhIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCdzIGN1cnJlbnQgcGF0aFxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dCBUaGUgY29udGV4dCB0byBhZGQgdGhlIGFyYyB0b1xuICAgKi9cbiAgZHJhdyAoY29udGV4dCkge1xuICAgIGNvbnN0IHggPSB0aGlzLnhcbiAgICBjb25zdCB5ID0gdGhpcy55XG4gICAgY29uc3QgcmFkaXVzID0gdGhpcy5yYWRpdXMgKiB0aGlzLnNjYWxlXG5cbiAgICBjb250ZXh0Lm1vdmVUbyh4ICsgcmFkaXVzLCB5KVxuICAgIGNvbnRleHQuYXJjKHgsIHksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2lyY2xlXG5cbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0c1xuIiwiY29uc3QgUG9seWdvbiA9IHJlcXVpcmUoJy4vUG9seWdvbicpXG5cbi8qKlxuICogQSBwb2ludCB1c2VkIHRvIGRldGVjdCBjb2xsaXNpb25zXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgUG9pbnQgZXh0ZW5kcyBQb2x5Z29uIHtcbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge051bWJlcn0gW3ggPSAwXSBUaGUgc3RhcnRpbmcgWCBjb29yZGluYXRlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBbeSA9IDBdIFRoZSBzdGFydGluZyBZIGNvb3JkaW5hdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtwYWRkaW5nID0gMF0gVGhlIGFtb3VudCB0byBwYWQgdGhlIGJvdW5kaW5nIHZvbHVtZSB3aGVuIHRlc3RpbmcgZm9yIHBvdGVudGlhbCBjb2xsaXNpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoeCA9IDAsIHkgPSAwLCBwYWRkaW5nID0gMCkge1xuICAgIHN1cGVyKHgsIHksIFtbMCwgMF1dLCAwLCAxLCAxLCBwYWRkaW5nKVxuXG4gICAgLyoqIEBwcml2YXRlICovXG4gICAgdGhpcy5fcG9pbnQgPSB0cnVlXG4gIH1cbn07XG5cblBvaW50LnByb3RvdHlwZS5zZXRQb2ludHMgPSB1bmRlZmluZWRcblxubW9kdWxlLmV4cG9ydHMgPSBQb2ludFxuXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gbW9kdWxlLmV4cG9ydHNcbiIsImltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gJy4vUmVjdGFuZ2xlJztcblxudmFyIEFYSVMgPSB7XG4gICAgTk9ORTogXCJub25lXCIsXG4gICAgSE9SSVpPTlRBTDogXCJob3Jpem9udGFsXCIsXG4gICAgVkVSVElDQUw6IFwidmVydGljYWxcIixcbiAgICBCT1RIOiBcImJvdGhcIlxufTtcblxuZXhwb3J0IGNsYXNzIENhbWVyYSB7XG4gICAgLy8gcG9zaXRpb24gb2YgY2FtZXJhIChsZWZ0LXRvcCBjb29yZGluYXRlKVxuICAgIHhWaWV3OiBudW1iZXI7XG4gICAgeVZpZXc6IG51bWJlcjtcbiAgICB4RGVhZFpvbmU6IG51bWJlcjtcbiAgICB5RGVhZFpvbmU6IG51bWJlcjtcbiAgICB3VmlldzogbnVtYmVyO1xuICAgIGhWaWV3OiBudW1iZXI7XG4gICAgYXhpczogc3RyaW5nO1xuICAgIGZvbGxvd2VkOiBhbnk7XG4gICAgdmlld3BvcnRSZWN0OiBSZWN0YW5nbGU7XG4gICAgd29ybGRSZWN0OiBSZWN0YW5nbGU7XG5cbiAgICBjb25zdHJ1Y3Rvcih4VmlldywgeVZpZXcsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQsIHdvcmxkV2lkdGgsIHdvcmxkSGVpZ2h0KSB7XG4gICAgICAgIHRoaXMueFZpZXcgPSB4VmlldyB8fCAwO1xuICAgICAgICB0aGlzLnlWaWV3ID0geVZpZXcgfHwgMDtcblxuICAgICAgICAvLyBkaXN0YW5jZSBmcm9tIGZvbGxvd2VkIG9iamVjdCB0byBib3JkZXIgYmVmb3JlIGNhbWVyYSBzdGFydHMgbW92ZVxuICAgICAgICB0aGlzLnhEZWFkWm9uZSA9IDA7IC8vIG1pbiBkaXN0YW5jZSB0byBob3Jpem9udGFsIGJvcmRlcnNcbiAgICAgICAgdGhpcy55RGVhZFpvbmUgPSAwOyAvLyBtaW4gZGlzdGFuY2UgdG8gdmVydGljYWwgYm9yZGVyc1xuXG4gICAgICAgIC8vIHZpZXdwb3J0IGRpbWVuc2lvbnNcbiAgICAgICAgdGhpcy53VmlldyA9IGNhbnZhc1dpZHRoO1xuICAgICAgICB0aGlzLmhWaWV3ID0gY2FudmFzSGVpZ2h0O1xuXG4gICAgICAgIC8vIGFsbG93IGNhbWVyYSB0byBtb3ZlIGluIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIGF4aXNcbiAgICAgICAgdGhpcy5heGlzID0gQVhJUy5CT1RIO1xuXG4gICAgICAgIC8vIG9iamVjdCB0aGF0IHNob3VsZCBiZSBmb2xsb3dlZFxuICAgICAgICB0aGlzLmZvbGxvd2VkID0gbnVsbDtcblxuICAgICAgICAvLyByZWN0YW5nbGUgdGhhdCByZXByZXNlbnRzIHRoZSB2aWV3cG9ydFxuICAgICAgICB0aGlzLnZpZXdwb3J0UmVjdCA9IG5ldyBSZWN0YW5nbGUodGhpcy54VmlldywgdGhpcy55VmlldywgdGhpcy53VmlldywgdGhpcy5oVmlldyk7XG5cbiAgICAgICAgLy8gcmVjdGFuZ2xlIHRoYXQgcmVwcmVzZW50cyB0aGUgd29ybGQncyBib3VuZGFyeSAocm9vbSdzIGJvdW5kYXJ5KVxuICAgICAgICB0aGlzLndvcmxkUmVjdCA9IG5ldyBSZWN0YW5nbGUoMCwgMCwgd29ybGRXaWR0aCwgd29ybGRIZWlnaHQpO1xuICAgIH1cblxuICAgIGZvbGxvdyhnYW1lT2JqZWN0LCB4RGVhZFpvbmUsIHlEZWFkWm9uZSkge1xuICAgICAgICB0aGlzLmZvbGxvd2VkID0gZ2FtZU9iamVjdDtcbiAgICAgICAgdGhpcy54RGVhZFpvbmUgPSB4RGVhZFpvbmU7XG4gICAgICAgIHRoaXMueURlYWRab25lID0geURlYWRab25lO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgLy8ga2VlcCBmb2xsb3dpbmcgdGhlIHBsYXllciAob3Igb3RoZXIgZGVzaXJlZCBvYmplY3QpXG4gICAgICAgIGlmICh0aGlzLmZvbGxvd2VkICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmF4aXMgPT0gQVhJUy5IT1JJWk9OVEFMIHx8IHRoaXMuYXhpcyA9PSBBWElTLkJPVEgpIHtcbiAgICAgICAgICAgICAgICAvLyBtb3ZlcyBjYW1lcmEgb24gaG9yaXpvbnRhbCBheGlzIGJhc2VkIG9uIGZvbGxvd2VkIG9iamVjdCBwb3NpdGlvblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZvbGxvd2VkLnBvc2l0aW9uLnggLSB0aGlzLnhWaWV3ICsgdGhpcy54RGVhZFpvbmUgPiB0aGlzLndWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueFZpZXcgPSB0aGlzLmZvbGxvd2VkLnBvc2l0aW9uLnggLSAodGhpcy53VmlldyAtIHRoaXMueERlYWRab25lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5mb2xsb3dlZC5wb3NpdGlvbi54IC0gdGhpcy54RGVhZFpvbmUgPCB0aGlzLnhWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueFZpZXcgPSB0aGlzLmZvbGxvd2VkLnBvc2l0aW9uLnggLSB0aGlzLnhEZWFkWm9uZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmF4aXMgPT0gQVhJUy5WRVJUSUNBTCB8fCB0aGlzLmF4aXMgPT0gQVhJUy5CT1RIKSB7XG4gICAgICAgICAgICAgICAgLy8gbW92ZXMgY2FtZXJhIG9uIHZlcnRpY2FsIGF4aXMgYmFzZWQgb24gZm9sbG93ZWQgb2JqZWN0IHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZm9sbG93ZWQucG9zaXRpb24ueSAtIHRoaXMueVZpZXcgKyB0aGlzLnlEZWFkWm9uZSA+IHRoaXMuaFZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55VmlldyA9IHRoaXMuZm9sbG93ZWQucG9zaXRpb24ueSAtICh0aGlzLmhWaWV3IC0gdGhpcy55RGVhZFpvbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmZvbGxvd2VkLnBvc2l0aW9uLnkgLSB0aGlzLnlEZWFkWm9uZSA8IHRoaXMueVZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55VmlldyA9IHRoaXMuZm9sbG93ZWQucG9zaXRpb24ueSAtIHRoaXMueURlYWRab25lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHZpZXdwb3J0UmVjdFxuICAgICAgICB0aGlzLnZpZXdwb3J0UmVjdC5zZXQodGhpcy54VmlldywgdGhpcy55Vmlldyk7XG5cbiAgICAgICAgLy8gZG9uJ3QgbGV0IGNhbWVyYSBsZWF2ZXMgdGhlIHdvcmxkJ3MgYm91bmRhcnlcbiAgICAgICAgaWYgKCF0aGlzLnZpZXdwb3J0UmVjdC53aXRoaW4odGhpcy53b3JsZFJlY3QpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52aWV3cG9ydFJlY3QubGVmdCA8IHRoaXMud29ybGRSZWN0LmxlZnQpXG4gICAgICAgICAgICAgICAgdGhpcy54VmlldyA9IHRoaXMud29ybGRSZWN0LmxlZnQ7XG4gICAgICAgICAgICBpZiAodGhpcy52aWV3cG9ydFJlY3QudG9wIDwgdGhpcy53b3JsZFJlY3QudG9wKVxuICAgICAgICAgICAgICAgIHRoaXMueVZpZXcgPSB0aGlzLndvcmxkUmVjdC50b3A7XG4gICAgICAgICAgICBpZiAodGhpcy52aWV3cG9ydFJlY3QucmlnaHQgPiB0aGlzLndvcmxkUmVjdC5yaWdodClcbiAgICAgICAgICAgICAgICB0aGlzLnhWaWV3ID0gdGhpcy53b3JsZFJlY3QucmlnaHQgLSB0aGlzLndWaWV3O1xuICAgICAgICAgICAgaWYgKHRoaXMudmlld3BvcnRSZWN0LmJvdHRvbSA+IHRoaXMud29ybGRSZWN0LmJvdHRvbSlcbiAgICAgICAgICAgICAgICB0aGlzLnlWaWV3ID0gdGhpcy53b3JsZFJlY3QuYm90dG9tIC0gdGhpcy5oVmlldztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBSZWN0YW5nbGUge1xuICAgIGxlZnQ6IG51bWJlcjtcbiAgICB0b3A6IG51bWJlcjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHJpZ2h0OiBudW1iZXI7XG4gICAgYm90dG9tOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdCB8fCAwO1xuICAgICAgICB0aGlzLnRvcCA9IHRvcCB8fCAwO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGggfHwgMDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQgfHwgMDtcbiAgICAgICAgdGhpcy5yaWdodCA9IHRoaXMubGVmdCArIHRoaXMud2lkdGg7XG4gICAgICAgIHRoaXMuYm90dG9tID0gdGhpcy50b3AgKyB0aGlzLmhlaWdodDtcbiAgICB9XG5cbiAgICBzZXQgKGxlZnQsIHRvcCwgLypvcHRpb25hbCovd2lkdGg/LCAvKm9wdGlvbmFsKi9oZWlnaHQ/KXtcbiAgICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcbiAgICAgICAgdGhpcy50b3AgPSB0b3A7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCB8fCB0aGlzLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodCB8fCB0aGlzLmhlaWdodFxuICAgICAgICB0aGlzLnJpZ2h0ID0gKHRoaXMubGVmdCArIHRoaXMud2lkdGgpO1xuICAgICAgICB0aGlzLmJvdHRvbSA9ICh0aGlzLnRvcCArIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG5cbiAgICB3aXRoaW4gKHIpIHtcbiAgICAgICAgcmV0dXJuIChyLmxlZnQgPD0gdGhpcy5sZWZ0ICYmXG4gICAgICAgICAgICByLnJpZ2h0ID49IHRoaXMucmlnaHQgJiZcbiAgICAgICAgICAgIHIudG9wIDw9IHRoaXMudG9wICYmXG4gICAgICAgICAgICByLmJvdHRvbSA+PSB0aGlzLmJvdHRvbSk7XG4gICAgfVxuXG4gICAgb3ZlcmxhcHMgKHIpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmxlZnQgPCByLnJpZ2h0ICYmXG4gICAgICAgICAgICByLmxlZnQgPCB0aGlzLnJpZ2h0ICYmXG4gICAgICAgICAgICB0aGlzLnRvcCA8IHIuYm90dG9tICYmXG4gICAgICAgICAgICByLnRvcCA8IHRoaXMuYm90dG9tKTtcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgTWFwe1xuICAgIC8vIG1hcCBkaW1lbnNpb25zXG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBpbWFnZTogYW55O1xuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgICAvLyBtYXAgdGV4dHVyZVxuICAgICAgICB0aGlzLmltYWdlID0gbnVsbDtcbiAgICB9XG5cbiAgICBnZW5lcmF0ZSgpe1xuICAgICAgICB2YXIgY3R4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKS5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgICAgIGN0eC5jYW52YXMud2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgICBjdHguY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuXG4gICAgICAgIHZhciByb3dzID0gfn4odGhpcy53aWR0aC80NCkgKyAxO1xuICAgICAgICB2YXIgY29sdW1ucyA9IH5+KHRoaXMuaGVpZ2h0LzQ0KSArIDE7XG5cbiAgICAgICAgdmFyIGNvbG9yID0gXCJibGFja1wiO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJibGFja1wiO1xuICAgICAgICBmb3IgKHZhciB4ID0gMCwgaSA9IDA7IGkgPCByb3dzOyB4Kz00NCwgaSsrKSB7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBmb3IgKHZhciB5ID0gMCwgaj0wOyBqIDwgY29sdW1uczsgeSs9NDQsIGorKykge1xuICAgICAgICAgICAgICAgIGN0eC5yZWN0ICh4LCB5LCA0MiwgNDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sb3IgPSAnI2ZmZic7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG5cbiAgICAgICAgLy8gc3RvcmUgdGhlIGdlbmVyYXRlIG1hcCBhcyB0aGlzIGltYWdlIHRleHR1cmVcbiAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICB0aGlzLmltYWdlLnNyYyA9IGN0eC5jYW52YXMudG9EYXRhVVJMKFwiaW1hZ2UvcG5nXCIpO1xuXG4gICAgICAgIC8vIGNsZWFyIGNvbnRleHRcbiAgICAgICAgY3R4ID0gbnVsbDtcbiAgICB9XG5cbi8vIGRyYXcgdGhlIG1hcCBhZGp1c3RlZCB0byBjYW1lcmFcbiAgICBkcmF3KGNvbnRleHQsIHhWaWV3LCB5Vmlldyl7XG4gICAgICAgIC8vIGVhc2llc3Qgd2F5OiBkcmF3IHRoZSBlbnRpcmUgbWFwIGNoYW5naW5nIG9ubHkgdGhlIGRlc3RpbmF0aW9uIGNvb3JkaW5hdGUgaW4gY2FudmFzXG4gICAgICAgIC8vIGNhbnZhcyB3aWxsIGN1bGwgdGhlIGltYWdlIGJ5IGl0c2VsZiAobm8gcGVyZm9ybWFuY2UgZ2FwcyAtPiBpbiBoYXJkd2FyZSBhY2NlbGVyYXRlZCBlbnZpcm9ubWVudHMsIGF0IGxlYXN0KVxuICAgICAgICAvL2NvbnRleHQuZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIDAsIDAsIHRoaXMuaW1hZ2Uud2lkdGgsIHRoaXMuaW1hZ2UuaGVpZ2h0LCAteFZpZXcsIC15VmlldywgdGhpcy5pbWFnZS53aWR0aCwgdGhpcy5pbWFnZS5oZWlnaHQpO1xuXG4gICAgICAgIC8vIGRpZGFjdGljIHdheTpcblxuICAgICAgICB2YXIgc3gsIHN5LCBkeCwgZHk7XG4gICAgICAgIHZhciBzV2lkdGgsIHNIZWlnaHQsIGRXaWR0aCwgZEhlaWdodDtcblxuICAgICAgICAvLyBvZmZzZXQgcG9pbnQgdG8gY3JvcCB0aGUgaW1hZ2VcbiAgICAgICAgc3ggPSB4VmlldztcbiAgICAgICAgc3kgPSB5VmlldztcblxuICAgICAgICAvLyBkaW1lbnNpb25zIG9mIGNyb3BwZWQgaW1hZ2VcbiAgICAgICAgc1dpZHRoID0gIGNvbnRleHQuY2FudmFzLndpZHRoO1xuICAgICAgICBzSGVpZ2h0ID0gY29udGV4dC5jYW52YXMuaGVpZ2h0O1xuXG4gICAgICAgIC8vIGlmIGNyb3BwZWQgaW1hZ2UgaXMgc21hbGxlciB0aGFuIGNhbnZhcyB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgc291cmNlIGRpbWVuc2lvbnNcbiAgICAgICAgaWYodGhpcy5pbWFnZS53aWR0aCAtIHN4IDwgc1dpZHRoKXtcbiAgICAgICAgICAgIHNXaWR0aCA9IHRoaXMuaW1hZ2Uud2lkdGggLSBzeDtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLmltYWdlLmhlaWdodCAtIHN5IDwgc0hlaWdodCl7XG4gICAgICAgICAgICBzSGVpZ2h0ID0gdGhpcy5pbWFnZS5oZWlnaHQgLSBzeTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGxvY2F0aW9uIG9uIGNhbnZhcyB0byBkcmF3IHRoZSBjcm9wZWQgaW1hZ2VcbiAgICAgICAgZHggPSAwO1xuICAgICAgICBkeSA9IDA7XG4gICAgICAgIC8vIG1hdGNoIGRlc3RpbmF0aW9uIHdpdGggc291cmNlIHRvIG5vdCBzY2FsZSB0aGUgaW1hZ2VcbiAgICAgICAgZFdpZHRoID0gc1dpZHRoO1xuICAgICAgICBkSGVpZ2h0ID0gc0hlaWdodDtcblxuICAgICAgICBjb250ZXh0LmRyYXdJbWFnZSh0aGlzLmltYWdlLCBzeCwgc3ksIHNXaWR0aCwgc0hlaWdodCwgZHgsIGR5LCBkV2lkdGgsIGRIZWlnaHQpO1xuICAgIH1cblxufVxuXG4vLyBnZW5lcmF0ZSBhbiBleGFtcGxlIG9mIGEgbGFyZ2UgbWFwXG4iLCJpbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSAnLi9lbnRpdGllcy9HYW1lT2JqZWN0JztcbmltcG9ydCB7IERyYXdlciB9IGZyb20gJy4vZW50aXRpZXMvRHJhd2VyJztcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4vZW50aXRpZXMvVHJhbnNmb3JtJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4vZW50aXRpZXMvVmVjdG9yJztcbmltcG9ydCB7IFBpenphIH0gZnJvbSAnLi9QaXp6YSc7XG5pbXBvcnQgeyBnZXRSYW5kb21CZWV0d2VuIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBSZXN1bHQgfSBmcm9tICdkZXRlY3QtY29sbGlzaW9ucyc7XG5cbmNsYXNzIENvc21vbmF1dERyYXdlciBleHRlbmRzIERyYXdlciB7XG4gICAgcmVuZGVyKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5hc3NldHMuZ2V0KCdjb3Ntb25hdXQuc3ZnJyksIC0zMCwgLTU1LCA2MiwgODUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvc21vbmF1dCBleHRlbmRzIEdhbWVPYmplY3Qge1xuICAgIHNwZWVkOiBudW1iZXIgPSBnZXRSYW5kb21CZWV0d2VuKDcwLCAxMDApO1xuICAgIHRhcmdldDogR2FtZU9iamVjdCA9IG51bGw7XG4gICAgX3RyYW5zZm9ybTogVHJhbnNmb3JtO1xuXG4gICAgY29uc3RydWN0b3IodHJhbnNmb3JtOiBUcmFuc2Zvcm0sIHByaXZhdGUgZ2FtZSkge1xuICAgICAgICBzdXBlcih0cmFuc2Zvcm0sIG5ldyBDb3Ntb25hdXREcmF3ZXIodHJhbnNmb3JtKSxcbiAgICAgICAgICAgIGdhbWUuc3lzdGVtLmNyZWF0ZUNpcmNsZSh0cmFuc2Zvcm0ucG9zaXRpb24ueCwgdHJhbnNmb3JtLnBvc2l0aW9uLnksIDE1KSk7XG5cbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtID0gVHJhbnNmb3JtLmNsb25lKHRyYW5zZm9ybSk7XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB3aW5kb3cuY29zbW9uYXV0ID0gdGhpcztcbiAgICB9XG5cbiAgICBnZXQgZGlyZWN0aW9uKCk6IFZlY3RvciB7XG4gICAgICAgIGxldCB2ZWN0b3IgPSBWZWN0b3IuemVybygpO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMudGFyZ2V0ID8gdGhpcy50YXJnZXQudHJhbnNmb3JtLnBvc2l0aW9uIDogdGhpcy5fdHJhbnNmb3JtLnBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChWZWN0b3IuZGlzdGFuY2UodGhpcy50cmFuc2Zvcm0ucG9zaXRpb24sIHBvc2l0aW9uKSA+PSA1KSB7XG4gICAgICAgICAgICB2ZWN0b3IgPSBwb3NpdGlvbi5zdWIodGhpcy50cmFuc2Zvcm0ucG9zaXRpb24pO1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ubG9va0F0KHBvc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5lYXRQaXp6YSh0aGlzLnRhcmdldCBhcyBQaXp6YSk7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ucm90YXRlKHRoaXMuX3RyYW5zZm9ybS5hbmdsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZlY3Rvci5ub3JtYWxpemUoKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoZHQ6IG51bWJlcikge1xuICAgICAgICBzdXBlci51cGRhdGUoZHQpO1xuXG4gICAgICAgIGNvbnN0IHBhdGggPSB0aGlzLmRpcmVjdGlvbi5tdWx0aXBsZSh0aGlzLnNwZWVkICogZHQpO1xuXG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnNldFBvc2l0aW9uKHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmFkZChwYXRoKSk7XG5cbiAgICAgICAgdGhpcy5jb2xsaWRlci54ID0gdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24ueDtcbiAgICAgICAgdGhpcy5jb2xsaWRlci55ID0gdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24ueTtcblxuICAgICAgICB0aGlzLmdhbWUud2FsbHMuZm9yRWFjaCh3YWxsID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBSZXN1bHQoKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjb2xsaXNpb24uLi4uJywgd2FsbC5jb2xsaWRlciwgcmVzdWx0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbGxpZGVyLmNvbGxpZGVzKHdhbGwuY29sbGlkZXIsIHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICBpZiAod2FsbC5ocCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB2ZWN0b3IgPSBuZXcgVmVjdG9yKC1yZXN1bHQub3ZlcmxhcCAqIHJlc3VsdC5vdmVybGFwX3gsIC1yZXN1bHQub3ZlcmxhcCAqIHJlc3VsdC5vdmVybGFwX3kgKyA1KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5zZXRQb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV3IFZlY3RvcigwLDApXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmFkZCh2ZWN0b3IpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5nYW1lLnRvd25zLmZvckVhY2god2FsbCA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgUmVzdWx0KCk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnY29sbGlzaW9uLi4uLicsIHdhbGwuY29sbGlkZXIsIHJlc3VsdCk7XG4gICAgICAgICAgICBpZiAodGhpcy5jb2xsaWRlci5jb2xsaWRlcyh3YWxsLmNvbGxpZGVyLCByZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmVjdG9yID0gbmV3IFZlY3RvcigtcmVzdWx0Lm92ZXJsYXAgKiByZXN1bHQub3ZlcmxhcF94LCAtcmVzdWx0Lm92ZXJsYXAgKiByZXN1bHQub3ZlcmxhcF95ICsgNSk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2V0UG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgIC8vIG5ldyBWZWN0b3IoMCwwKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi5hZGQodmVjdG9yKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZ2FtZS5zdGF0aWNPYmplY3RzLmZvckVhY2goX3N0YXRpYyA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgUmVzdWx0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5jb2xsaWRlci5jb2xsaWRlcyhfc3RhdGljLnN0YXRpYy5jb2xsaWRlciwgcmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDT0xMQVBTRScpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3IoLXJlc3VsdC5vdmVybGFwICogcmVzdWx0Lm92ZXJsYXBfeCwgLXJlc3VsdC5vdmVybGFwICogcmVzdWx0Lm92ZXJsYXBfeSk7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2V0UG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLmFkZCh2ZWN0b3IpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHV1aWQgZnJvbSAndXVpZCc7XG5pbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSAnLi9lbnRpdGllcy9HYW1lT2JqZWN0JztcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4vZW50aXRpZXMvVHJhbnNmb3JtJztcbmltcG9ydCB7IERyYXdlciB9IGZyb20gJy4vZW50aXRpZXMvRHJhd2VyJztcblxuZXhwb3J0IGNsYXNzIFBpenphRHJhd2VyIGV4dGVuZHMgRHJhd2VyIHtcbiAgICByZW5kZXIoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcbiAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmFzc2V0cy5nZXQoJ3BpenphLnN2ZycpLCAtMTUsIC0xNSwgMzAsIDMwKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQaXp6YSBleHRlbmRzIEdhbWVPYmplY3Qge1xuICAgIGlkID0gdXVpZCgpO1xuICAgIGlzV2FpdGluZ1RvRWF0aW5nID0gZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm06IFRyYW5zZm9ybSkge1xuICAgICAgICBzdXBlcih0cmFuc2Zvcm0sIG5ldyBQaXp6YURyYXdlcih0cmFuc2Zvcm0pKTtcbiAgICB9XG59XG4iLCJ2YXIgdjEgPSByZXF1aXJlKCcuL3YxJyk7XG52YXIgdjQgPSByZXF1aXJlKCcuL3Y0Jyk7XG5cbnZhciB1dWlkID0gdjQ7XG51dWlkLnYxID0gdjE7XG51dWlkLnY0ID0gdjQ7XG5cbm1vZHVsZS5leHBvcnRzID0gdXVpZDtcbiIsInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbi8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxudmFyIF9ub2RlSWQ7XG52YXIgX2Nsb2Nrc2VxO1xuXG4vLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcbnZhciBfbGFzdE1TZWNzID0gMDtcbnZhciBfbGFzdE5TZWNzID0gMDtcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9icm9vZmEvbm9kZS11dWlkIGZvciBBUEkgZGV0YWlsc1xuZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG4gIHZhciBiID0gYnVmIHx8IFtdO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCBfbm9kZUlkO1xuICB2YXIgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxO1xuXG4gIC8vIG5vZGUgYW5kIGNsb2Nrc2VxIG5lZWQgdG8gYmUgaW5pdGlhbGl6ZWQgdG8gcmFuZG9tIHZhbHVlcyBpZiB0aGV5J3JlIG5vdFxuICAvLyBzcGVjaWZpZWQuICBXZSBkbyB0aGlzIGxhemlseSB0byBtaW5pbWl6ZSBpc3N1ZXMgcmVsYXRlZCB0byBpbnN1ZmZpY2llbnRcbiAgLy8gc3lzdGVtIGVudHJvcHkuICBTZWUgIzE4OVxuICBpZiAobm9kZSA9PSBudWxsIHx8IGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICB2YXIgc2VlZEJ5dGVzID0gcm5nKCk7XG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuNSwgY3JlYXRlIGFuZCA0OC1iaXQgbm9kZSBpZCwgKDQ3IHJhbmRvbSBiaXRzICsgbXVsdGljYXN0IGJpdCA9IDEpXG4gICAgICBub2RlID0gX25vZGVJZCA9IFtcbiAgICAgICAgc2VlZEJ5dGVzWzBdIHwgMHgwMSxcbiAgICAgICAgc2VlZEJ5dGVzWzFdLCBzZWVkQnl0ZXNbMl0sIHNlZWRCeXRlc1szXSwgc2VlZEJ5dGVzWzRdLCBzZWVkQnl0ZXNbNV1cbiAgICAgIF07XG4gICAgfVxuICAgIGlmIChjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC4yLjIsIHJhbmRvbWl6ZSAoMTQgYml0KSBjbG9ja3NlcVxuICAgICAgY2xvY2tzZXEgPSBfY2xvY2tzZXEgPSAoc2VlZEJ5dGVzWzZdIDw8IDggfCBzZWVkQnl0ZXNbN10pICYgMHgzZmZmO1xuICAgIH1cbiAgfVxuXG4gIC8vIFVVSUQgdGltZXN0YW1wcyBhcmUgMTAwIG5hbm8tc2Vjb25kIHVuaXRzIHNpbmNlIHRoZSBHcmVnb3JpYW4gZXBvY2gsXG4gIC8vICgxNTgyLTEwLTE1IDAwOjAwKS4gIEpTTnVtYmVycyBhcmVuJ3QgcHJlY2lzZSBlbm91Z2ggZm9yIHRoaXMsIHNvXG4gIC8vIHRpbWUgaXMgaGFuZGxlZCBpbnRlcm5hbGx5IGFzICdtc2VjcycgKGludGVnZXIgbWlsbGlzZWNvbmRzKSBhbmQgJ25zZWNzJ1xuICAvLyAoMTAwLW5hbm9zZWNvbmRzIG9mZnNldCBmcm9tIG1zZWNzKSBzaW5jZSB1bml4IGVwb2NoLCAxOTcwLTAxLTAxIDAwOjAwLlxuICB2YXIgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgLy8gUGVyIDQuMi4xLjIsIHVzZSBjb3VudCBvZiB1dWlkJ3MgZ2VuZXJhdGVkIGR1cmluZyB0aGUgY3VycmVudCBjbG9ja1xuICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9ja1xuICB2YXIgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7XG5cbiAgLy8gVGltZSBzaW5jZSBsYXN0IHV1aWQgY3JlYXRpb24gKGluIG1zZWNzKVxuICB2YXIgZHQgPSAobXNlY3MgLSBfbGFzdE1TZWNzKSArIChuc2VjcyAtIF9sYXN0TlNlY3MpLzEwMDAwO1xuXG4gIC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfVxuXG4gIC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcbiAgaWYgKChkdCA8IDAgfHwgbXNlY3MgPiBfbGFzdE1TZWNzKSAmJiBvcHRpb25zLm5zZWNzID09PSB1bmRlZmluZWQpIHtcbiAgICBuc2VjcyA9IDA7XG4gIH1cblxuICAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXVpZC52MSgpOiBDYW5cXCd0IGNyZWF0ZSBtb3JlIHRoYW4gMTBNIHV1aWRzL3NlYycpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxO1xuXG4gIC8vIFBlciA0LjEuNCAtIENvbnZlcnQgZnJvbSB1bml4IGVwb2NoIHRvIEdyZWdvcmlhbiBlcG9jaFxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDtcblxuICAvLyBgdGltZV9sb3dgXG4gIHZhciB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfbWlkYFxuICB2YXIgdG1oID0gKG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCkgJiAweGZmZmZmZmY7XG4gIGJbaSsrXSA9IHRtaCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRtaCAmIDB4ZmY7XG5cbiAgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcbiAgYltpKytdID0gdG1oID4+PiAyNCAmIDB4ZiB8IDB4MTA7IC8vIGluY2x1ZGUgdmVyc2lvblxuICBiW2krK10gPSB0bWggPj4+IDE2ICYgMHhmZjtcblxuICAvLyBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGAgKFBlciA0LjIuMiAtIGluY2x1ZGUgdmFyaWFudClcbiAgYltpKytdID0gY2xvY2tzZXEgPj4+IDggfCAweDgwO1xuXG4gIC8vIGBjbG9ja19zZXFfbG93YFxuICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7XG5cbiAgLy8gYG5vZGVgXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgYltpICsgbl0gPSBub2RlW25dO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZiA/IGJ1ZiA6IGJ5dGVzVG9VdWlkKGIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHYxO1xuIiwidmFyIHJuZyA9IHJlcXVpcmUoJy4vbGliL3JuZycpO1xudmFyIGJ5dGVzVG9VdWlkID0gcmVxdWlyZSgnLi9saWIvYnl0ZXNUb1V1aWQnKTtcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG5cbiAgaWYgKHR5cGVvZihvcHRpb25zKSA9PSAnc3RyaW5nJykge1xuICAgIGJ1ZiA9IG9wdGlvbnMgPT09ICdiaW5hcnknID8gbmV3IEFycmF5KDE2KSA6IG51bGw7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gIC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcbiAgcm5kc1s2XSA9IChybmRzWzZdICYgMHgwZikgfCAweDQwO1xuICBybmRzWzhdID0gKHJuZHNbOF0gJiAweDNmKSB8IDB4ODA7XG5cbiAgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG4gIGlmIChidWYpIHtcbiAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgMTY7ICsraWkpIHtcbiAgICAgIGJ1ZltpICsgaWldID0gcm5kc1tpaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBieXRlc1RvVXVpZChybmRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2NDtcbiIsImltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tICcuL2VudGl0aWVzL0dhbWVPYmplY3QnO1xuaW1wb3J0IHsgRHJhd2VyIH0gZnJvbSAnLi9lbnRpdGllcy9EcmF3ZXInO1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9lbnRpdGllcy9UcmFuc2Zvcm0nO1xuaW1wb3J0IHsgV0FMTF9IRUlHSFQsIFdBTExfV0lEVEggfSBmcm9tICcuL29iamVjdHMvY29uc3RhbnRzJztcbmltcG9ydCB7IGRyYXdDaXJjbGUgfSBmcm9tICcuL3V0aWxzJztcblxuY2xhc3MgV2FsbERyYXdlciBleHRlbmRzIERyYXdlciB7XG4gICAgY29sbGlkZXIgPSBudWxsO1xuICAgIGNhbWVyYSA9IG51bGw7XG5cbiAgICBzdGF0aWMgTUFYX0hQID0gNTtcbiAgICBocCA9IFdhbGxEcmF3ZXIuTUFYX0hQO1xuXG4gICAgd2lkdGggPSBXQUxMX1dJRFRIO1xuICAgIGhlaWdodCA9IFdBTExfSEVJR0hUO1xuXG4gICAgbWFwID0ge1xuICAgICAgICA1OiAnd2FsbC5zdmcnLFxuICAgICAgICA0OiAnd2FsbDEuc3ZnJyxcbiAgICAgICAgMzogJ3dhbGwyLnN2ZycsXG4gICAgICAgIDI6ICd3YWxsMy5zdmcnLFxuICAgICAgICAxOiAnd2FsbDQuc3ZnJyxcbiAgICB9O1xuXG4gICAgcmVuZGVyKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XG4gICAgICAgIGNvbnN0IHNyYyA9IHRoaXMubWFwW3RoaXMuaHBdID8gdGhpcy5tYXBbdGhpcy5ocF0gOiAnd2FsbDUuc3ZnJztcbiAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmFzc2V0cy5nZXQoc3JjKSwgLXRoaXMud2lkdGgsIC10aGlzLmhlaWdodCAvIDIsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29sbGlkZXIpIHtcbiAgICAgICAgICAgIGN0eC5yb3RhdGUoLXRoaXMudHJhbnNmb3JtLmFuZ2xlKTtcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoXG4gICAgICAgICAgICAgICAgLXRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLngsXG4gICAgICAgICAgICAgICAgLXRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLnlcbiAgICAgICAgICAgICk7XG5cblxuICAgICAgICAgICAgZHJhd0NpcmNsZShjdHgsIHRoaXMuY29sbGlkZXIuX3gsIHRoaXMuY29sbGlkZXIuX3ksIDUpO1xuXG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmVkJztcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcblxuICAgICAgICAgICAgLy8gdGhpcy5jb2xsaWRlci5kcmF3KGN0eCk7XG5cbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFdhbGwgZXh0ZW5kcyBHYW1lT2JqZWN0IHtcbiAgICBocCA9IDU7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdHJhbnNmb3JtOiBUcmFuc2Zvcm0sIHByaXZhdGUgZ2FtZSkge1xuICAgICAgICBzdXBlcih0cmFuc2Zvcm0sIG5ldyBXYWxsRHJhd2VyKHRyYW5zZm9ybSksXG4gICAgICAgICAgICBnYW1lLnN5c3RlbS5jcmVhdGVQb2x5Z29uKHRyYW5zZm9ybS5wb3NpdGlvbi54LCB0cmFuc2Zvcm0ucG9zaXRpb24ueSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIFswLCAtV0FMTF9IRUlHSFQgLyAyXSxcbiAgICAgICAgICAgICAgICAgICAgWy1XQUxMX1dJRFRILCAtV0FMTF9IRUlHSFQgLyAyXSxcbiAgICAgICAgICAgICAgICBdLCB0cmFuc2Zvcm0uYW5nbGUpKTtcblxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuZHJhd2VyLmNvbGxpZGVyID0gdGhpcy5jb2xsaWRlcjtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmRyYXdlci5jYW1lcmEgPSB0aGlzLmdhbWUuY2FtZXJhO1xuICAgIH1cblxuICAgIHRha2VEYW1hZ2UoKSB7XG4gICAgICAgIHRoaXMuaHAtLTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLmRyYXdlci5ocC0tO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFRPV05fSEVJR0hULCBUT1dOX1NUQVJULCBXQUxMX0hFSUdIVCwgV0FMTF9TVEFSVCwgV0FMTF9XSURUSCwgV0FMTF9YIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vLyBleHBvcnQgY29uc3QgV0FMTFNfTElTVCA9IFtcbi8vICAgICB7XG4vLyAgICAgICAgIHg6IFdBTExfWCxcbi8vICAgICAgICAgeTogOTE5LFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgICAgeDogV0FMTF9YLFxuLy8gICAgICAgICB5OiAxMDU4LFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgICAgeDogV0FMTF9YLFxuLy8gICAgICAgICB5OiAxMjA1LFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgICAgeDogV0FMTF9YLFxuLy8gICAgICAgICB5OiAxNDI1LFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgICAgeDogV0FMTF9YLFxuLy8gICAgICAgICB5OiAxMzU1LFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgICAgeDogV0FMTF9YLFxuLy8gICAgICAgICB5OiAxNTI0LFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjA2XG4vLyAgICAgfSxcbi8vIF07XG5cbmV4cG9ydCBjb25zdCBXQUxMU19MSVNUID0gKCgpID0+IHtcbiAgICBjb25zdCBsaXN0X2xlZnQgPSBbe1xuICAgICAgICB4OiBXQUxMX1gsXG4gICAgICAgIHk6IFdBTExfU1RBUlQgLSAxLFxuICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbiAgICB9XTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgIGxpc3RfbGVmdC5wdXNoKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHg6IFdBTExfWCxcbiAgICAgICAgICAgICAgICB5OiBsaXN0X2xlZnRbaV0ueSArIFdBTExfV0lEVEgsXG4gICAgICAgICAgICAgICAgcm90YXRlOiBNYXRoLlBJICogMS41XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgbGlzdF90b3AgPSBbe1xuICAgICAgICB4OiBXQUxMX1ggKyAxMjUgLFxuICAgICAgICB5OiBXQUxMX1NUQVJUIC0gMTQsXG4gICAgICAgIHJvdGF0ZTogMC4wMzlcbiAgICB9XTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICBsaXN0X3RvcC5wdXNoKHtcbiAgICAgICAgICAgIHg6IGxpc3RfdG9wW2ldLnggKyAxMTkuNSxcbiAgICAgICAgICAgIHk6IGxpc3RfdG9wW2ldLnkgKyAzLjYsXG4gICAgICAgICAgICByb3RhdGU6IDAuMDM5XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGxpc3RfYm90dG9tX2ZpcnN0ID0gW3tcbiAgICAgICAgeDogV0FMTF9YLFxuICAgICAgICB5OiBsaXN0X2xlZnRbbGlzdF9sZWZ0Lmxlbmd0aCAtIDFdLnkgKyAxNDAsXG4gICAgICAgIHJvdGF0ZTogTWF0aC5QSSAqIDEuMDdcbiAgICB9XTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgOTsgaSsrKSB7XG4gICAgICAgIGxpc3RfYm90dG9tX2ZpcnN0LnB1c2goe1xuICAgICAgICAgICAgeDogbGlzdF9ib3R0b21fZmlyc3RbaV0ueCArIDExNixcbiAgICAgICAgICAgIHk6IGxpc3RfYm90dG9tX2ZpcnN0W2ldLnkgKyAyNixcbiAgICAgICAgICAgIHJvdGF0ZTogTWF0aC5QSSAqIDEuMDdcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0X2JvdHRvbV9zZWNvbmQgPSBbe1xuICAgICAgICB4OiBsaXN0X2JvdHRvbV9maXJzdFtsaXN0X2JvdHRvbV9maXJzdC5sZW5ndGggLSAxXS54ICsgMTE0LFxuICAgICAgICB5OiBsaXN0X2JvdHRvbV9maXJzdFtsaXN0X2xlZnQubGVuZ3RoIC0gMV0ueSArIDE1NCxcbiAgICAgICAgcm90YXRlOiBNYXRoLlBJICogMC45NVxuICAgIH1dO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyBpKyspIHtcbiAgICAgICAgbGlzdF9ib3R0b21fc2Vjb25kLnB1c2goe1xuICAgICAgICAgICAgeDogbGlzdF9ib3R0b21fc2Vjb25kW2ldLnggKyAxMTgsXG4gICAgICAgICAgICB5OiBsaXN0X2JvdHRvbV9zZWNvbmRbaV0ueSAtIDE4LFxuICAgICAgICAgICAgcm90YXRlOiBNYXRoLlBJICogMC45NVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGxpc3RfYm90dG9tX3RoaXJkID0gW3tcbiAgICAgICAgeDogbGlzdF9ib3R0b21fc2Vjb25kW2xpc3RfYm90dG9tX3NlY29uZC5sZW5ndGggLSAxXS54ICsgMTUwLFxuICAgICAgICB5OiBsaXN0X2JvdHRvbV9zZWNvbmRbbGlzdF9ib3R0b21fc2Vjb25kLmxlbmd0aCAtIDFdLnkgLSAzMCxcbiAgICAgICAgcm90YXRlOiBNYXRoLlBJICogMC43NFxuICAgIH1dO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgbGlzdF9ib3R0b21fdGhpcmQucHVzaCh7XG4gICAgICAgICAgICB4OiBsaXN0X2JvdHRvbV90aGlyZFtpXS54ICsgODIsXG4gICAgICAgICAgICB5OiBsaXN0X2JvdHRvbV90aGlyZFtpXS55IC0gODQsXG4gICAgICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAwLjc1XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgbGlzdF9yaWdodCA9IFt7XG4gICAgICAgIHg6IGxpc3RfYm90dG9tX3RoaXJkW2xpc3RfYm90dG9tX3RoaXJkLmxlbmd0aCAtIDFdLnggKyA5NixcbiAgICAgICAgeTogbGlzdF9ib3R0b21fdGhpcmRbbGlzdF9ib3R0b21fdGhpcmQubGVuZ3RoIC0gMV0ueSAtIDEwMCxcbiAgICAgICAgcm90YXRlOiBNYXRoLlBJICogLTEuNVxuICAgIH0sXG4gICAge1xuICAgICAgICB4OiBsaXN0X2JvdHRvbV90aGlyZFtsaXN0X2JvdHRvbV90aGlyZC5sZW5ndGggLSAxXS54ICsgOTYsXG4gICAgICAgIHk6IGxpc3RfYm90dG9tX3RoaXJkW2xpc3RfYm90dG9tX3RoaXJkLmxlbmd0aCAtIDFdLnkgLSAyMTUsXG4gICAgICAgIHJvdGF0ZTogTWF0aC5QSSAqIC0xLjVcbiAgICB9XTtcblxuXG4gICAgY29uc29sZS5sb2cobGlzdF9yaWdodCk7XG5cbiAgICAvLyBmb3IobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgLy8gICAgIGxpc3RfbGVmdC5wdXNoKFxuICAgIC8vICAgICAgICAge1xuICAgIC8vICAgICAgICAgICAgIHg6IFdBTExfWCxcbiAgICAvLyAgICAgICAgICAgICB5OlxuICAgIC8vICAgICAgICAgfVxuICAgIC8vICAgICApO1xuICAgIC8vIH1cblxuICAgIHJldHVybiBsaXN0X2xlZnQuY29uY2F0KGxpc3RfYm90dG9tX2ZpcnN0KS5jb25jYXQobGlzdF9ib3R0b21fc2Vjb25kKS5jb25jYXQobGlzdF9ib3R0b21fdGhpcmQpLmNvbmNhdChsaXN0X3JpZ2h0KS5jb25jYXQobGlzdF90b3ApO1xufSkoKTtcbiIsImltcG9ydCB7IFRPV05fSEVJR0hULCBUT1dOX1NUQVJULCBXQUxMX0hFSUdIVCwgV0FMTF9XSURUSCwgV0FMTF9YIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG4vLyBleHBvcnQgY29uc3QgVE9XTl9MSVNUID0gW1xuLy8gICAgIHtcbi8vICAgICAgICAgeDogV0FMTF9YLFxuLy8gICAgICAgICB5OiBUT1dOX1NUQVJULFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgICAgeDogV0FMTF9YLFxuLy8gICAgICAgICB5OiAxMDQwLFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgICAgeDogV0FMTF9YLFxuLy8gICAgICAgICB5OiAxMTkwLFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgICAgeDogV0FMTF9YLFxuLy8gICAgICAgICB5OiAxMzQ0LFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgICAgeDogV0FMTF9YLFxuLy8gICAgICAgICB5OiAxNTI0LFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbi8vICAgICB9LFxuLy8gICAgIHtcbi8vICAgICAgICAgeDogV0FMTF9YICsgMTIwLFxuLy8gICAgICAgICB5OiAxNTQ0LFxuLy8gICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjA2XG4vLyAgICAgfSxcbi8vIF07XG5cblxuZXhwb3J0IGNvbnN0IFRPV05fTElTVCA9ICgoKSA9PiB7XG4gICAgY29uc3QgbGlzdF9sZWZ0ID0gW3tcbiAgICAgICAgeDogV0FMTF9YLFxuICAgICAgICB5OiBUT1dOX1NUQVJULFxuICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbiAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB4OiBXQUxMX1gsXG4gICAgICAgICAgICB5OiBUT1dOX1NUQVJUICsgV0FMTF9XSURUSCAqIDUgKyAzNixcbiAgICAgICAgICAgIHJvdGF0ZTogTWF0aC5QSSAqIDEuNVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICB4OiAzNzY2LCB5OiAxNzM0LCByb3RhdGU6IE1hdGguUEkgKiAwLjc0XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIHJvdGF0ZTogTWF0aC5QSSAqIDAuNzUsXG4gICAgICAgICAgICB4OiA0MjgxLFxuICAgICAgICAgICAgeTogMTIwOCxcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgeDogNDI4NSwgeTogOTYwLCByb3RhdGU6IE1hdGguUEkgKiAxLjVcbiAgICAgICAgfV07XG5cbiAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIC8vICAgICBsaXN0X2xlZnQucHVzaChcbiAgICAvLyAgICAgICAgIHtcbiAgICAvLyAgICAgICAgICAgICB4OiBXQUxMX1gsXG4gICAgLy8gICAgICAgICAgICAgeTogbGlzdF9sZWZ0W2ldLnkgKyBUT1dOX0hFSUdIVCArIFdBTExfV0lEVEggLSAxMCxcbiAgICAvLyAgICAgICAgICAgICByb3RhdGU6IE1hdGguUEkgKiAxLjVcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgKTtcbiAgICAvLyB9XG5cbiAgICByZXR1cm4gbGlzdF9sZWZ0O1xufSkoKTtcbiIsImltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tICcuL2VudGl0aWVzL0dhbWVPYmplY3QnO1xuaW1wb3J0IHsgRHJhd2VyIH0gZnJvbSAnLi9lbnRpdGllcy9EcmF3ZXInO1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9lbnRpdGllcy9UcmFuc2Zvcm0nO1xuaW1wb3J0IHsgVE9XTl9IRUlHSFQgfSBmcm9tICcuL29iamVjdHMvY29uc3RhbnRzJztcblxuY2xhc3MgVG93bkRyYXdlciBleHRlbmRzIERyYXdlciB7XG4gICAgd2lkdGggPSBUT1dOX0hFSUdIVDtcbiAgICBoZWlnaHQgPSBUT1dOX0hFSUdIVDtcbiAgICByZW5kZXIoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcbiAgICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmFzc2V0cy5nZXQoJ3Rvd24uc3ZnJyksIC10aGlzLndpZHRoIC8gMiwgLXRoaXMuaGVpZ2h0IC8gMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRvd24gZXh0ZW5kcyBHYW1lT2JqZWN0IHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdHJhbnNmb3JtOiBUcmFuc2Zvcm0sIGdhbWUpIHtcbiAgICAgICAgc3VwZXIodHJhbnNmb3JtLCBuZXcgVG93bkRyYXdlcih0cmFuc2Zvcm0pLFxuICAgICAgICAgICAgZ2FtZS5zeXN0ZW0uY3JlYXRlQ2lyY2xlKHRyYW5zZm9ybS5wb3NpdGlvbi54LCB0cmFuc2Zvcm0ucG9zaXRpb24ueSwgMjApKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSAnLi9lbnRpdGllcy9HYW1lT2JqZWN0JztcbmltcG9ydCB7IERyYXdlciB9IGZyb20gJy4vZW50aXRpZXMvRHJhd2VyJztcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gJy4vZW50aXRpZXMvVHJhbnNmb3JtJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4vZW50aXRpZXMvVmVjdG9yJztcbmltcG9ydCB7IENvc21vbmF1dCB9IGZyb20gJy4vQ29zbW9uYXV0JztcbmltcG9ydCB7IENhbWVyYSB9IGZyb20gJy4vZW50aXRpZXMvQ2FtZXJhJztcblxuY2xhc3MgU3RhdGljRHJhd2VyIGV4dGVuZHMgRHJhd2VyIHtcblxuICAgIGNvbnN0cnVjdG9yKHRyYW5zZm9ybTogVHJhbnNmb3JtLCBwcml2YXRlIGltZ1BhdGg6IHN0cmluZywgcHJpdmF0ZSB3OiBudW1iZXIsIHByaXZhdGUgaDogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKHRyYW5zZm9ybSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSB7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5hc3NldHMuZ2V0KHRoaXMuaW1nUGF0aCksIC10aGlzLncgLyAyLCAtdGhpcy5oIC8gMiwgdGhpcy53LCB0aGlzLmgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0YXRpYyBleHRlbmRzIEdhbWVPYmplY3Qge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0cmFuc2Zvcm06IFRyYW5zZm9ybSwgaW1nUGF0aDogc3RyaW5nLCB3OiBudW1iZXIsIGg6IG51bWJlciwgZ2FtZSkge1xuICAgICAgICBzdXBlcih0cmFuc2Zvcm0sIG5ldyBTdGF0aWNEcmF3ZXIodHJhbnNmb3JtLCBpbWdQYXRoLCB3LCBoKSwgZ2FtZS5zeXN0ZW0uY3JlYXRlQ2lyY2xlKHRyYW5zZm9ybS5wb3NpdGlvbi54LCB0cmFuc2Zvcm0ucG9zaXRpb24ueSwgKHcgPiBoID8gdyA6IGgpLzIpKTtcbiAgICAgICAgdGhpcy5jb2xsaWRlci54ID0gdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24ueDtcbiAgICAgICAgdGhpcy5jb2xsaWRlci55ID0gdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24ueTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5jb2xsaWRlci54LCB0aGlzLmNvbGxpZGVyLnkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0YXRpY09iamVjdCB7XG4gICAgc3RhdGljOiBTdGF0aWM7XG4gICAgY29uc3RydWN0b3IoaW1nUGF0aDogc3RyaW5nLCB3OiBudW1iZXIsIGg6IG51bWJlciwgcm90YXRlOiBudW1iZXIsIHZlY3RvcjogVmVjdG9yLCBnYW1lLCBwdWJsaWMgb2ZmQ29saWRlciA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0odmVjdG9yLCByb3RhdGUpO1xuICAgICAgICB0aGlzLnN0YXRpYyA9IG5ldyBTdGF0aWModHJhbnNmb3JtLCBpbWdQYXRoLCB3LCBoLCBnYW1lKTtcbiAgICAgICAgLy8gY29uc3QgY29zbW9uYXV0ID0gbmV3IENvc21vbmF1dCh0cmFuc2Zvcm0sIHRoaXMpO1xuICAgICAgICAvLyB0aGlzLnJpb3RQb2xpY2UucHVzaChjb3Ntb25hdXQpO1xuICAgIH1cblxuICAgIHJlbmRlcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgY2FtZXJhOiBDYW1lcmEpIHtcbiAgICAgICAgdGhpcy5zdGF0aWMucmVuZGVyKGN0eCwgY2FtZXJhKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tICcuL2VudGl0aWVzL0dhbWVPYmplY3QnO1xuaW1wb3J0IHsgRHJhd2VyIH0gZnJvbSAnLi9lbnRpdGllcy9EcmF3ZXInO1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9lbnRpdGllcy9UcmFuc2Zvcm0nO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi9lbnRpdGllcy9WZWN0b3InO1xuaW1wb3J0IHsgUGl6emEgfSBmcm9tICcuL1BpenphJztcbmltcG9ydCB7IGdldFJhbmRvbUJlZXR3ZW4gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IFJlc3VsdCB9IGZyb20gJ2RldGVjdC1jb2xsaXNpb25zJztcbmltcG9ydCB7IEFuaW1hdGlvbiBhcyBBbmltYWwgfSBmcm9tICcuL2VudGl0aWVzL0FuaW1hdGlvbidcbmNsYXNzIEJvc3NEcmF3ZXIgZXh0ZW5kcyBEcmF3ZXIge1xuICAgIHJlbmRlcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuYXNzZXRzLmdldCgnYm9zcy5zdmcnKSwgLTMwLCAtNTUsIDYyLCA4NSk7XG4gICAgfVxufVxuXG5jbGFzcyBCb3NzQW5pbWF0aW9uIGV4dGVuZHMgQW5pbWFsIHtcbiAgICBjb25zdHJ1Y3Rvcihsb29rOiBudW1iZXIsIHRhcmdldDogbnVtYmVyLCBwcml2YXRlIHRyYW5zZm9ybTogVHJhbnNmb3JtKSB7XG4gICAgICAgIHN1cGVyKGxvb2ssIHRhcmdldCwgNTAwKTtcbiAgICB9XG5cbiAgICBzdGVwKCkge1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnZhbHVlKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucm90YXRlKHRoaXMudmFsdWUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJvc3MgZXh0ZW5kcyBHYW1lT2JqZWN0IHtcbiAgICBzcGVlZDogbnVtYmVyID0gMjA7XG4gICAgZGlyZWN0aW9uVmVjdG9yOiBWZWN0b3IgPSBudWxsO1xuICAgIF90cmFuc2Zvcm06IFRyYW5zZm9ybTtcblxuICAgIGNvbnN0cnVjdG9yKHRyYW5zZm9ybTogVHJhbnNmb3JtLCBwcml2YXRlIGdhbWUpIHtcbiAgICAgICAgc3VwZXIodHJhbnNmb3JtLCBuZXcgQm9zc0RyYXdlcih0cmFuc2Zvcm0pLFxuICAgICAgICAgICAgZ2FtZS5zeXN0ZW0uY3JlYXRlQ2lyY2xlKHRyYW5zZm9ybS5wb3NpdGlvbi54LCB0cmFuc2Zvcm0ucG9zaXRpb24ueSwgMjAwKSk7XG5cbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtID0gVHJhbnNmb3JtLmNsb25lKHRyYW5zZm9ybSk7XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB3aW5kb3cuY29zbW9uYXV0ID0gdGhpcztcbiAgICB9XG5cbiAgICBnZXQgZGlyZWN0aW9uKCk6IFZlY3RvciB7XG4gICAgICAgIGxldCB2ZWN0b3IgPSBWZWN0b3IuemVybygpO1xuICAgICAgICAvLyBjb25zdCBwb3NpdGlvbiA9IHRoaXMudGFyZ2V0ID8gdGhpcy50YXJnZXQudHJhbnNmb3JtLnBvc2l0aW9uIDogdGhpcy5fdHJhbnNmb3JtLnBvc2l0aW9uO1xuICAgICAgICAvL1xuICAgICAgICAvLyBpZiAoVmVjdG9yLmRpc3RhbmNlKHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uLCBwb3NpdGlvbikgPj0gNSkge1xuICAgICAgICAvLyAgICAgdmVjdG9yID0gcG9zaXRpb24uc3ViKHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uKTtcbiAgICAgICAgLy8gICAgIHRoaXMudHJhbnNmb3JtLmxvb2tBdChwb3NpdGlvbik7XG4gICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICBpZiAodGhpcy50YXJnZXQpIHtcbiAgICAgICAgLy8gICAgICAgICB0aGlzLmdhbWUuZWF0UGl6emEodGhpcy50YXJnZXQgYXMgUGl6emEpO1xuICAgICAgICAvLyAgICAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gICAgIHRoaXMudHJhbnNmb3JtLnJvdGF0ZSh0aGlzLl90cmFuc2Zvcm0uYW5nbGUpO1xuICAgICAgICAvLyB9XG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGlvblZlY3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aW9uVmVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBWZWN0b3IuemVybygpO1xuICAgIH1cblxuICAgIHVwZGF0ZShkdDogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZShkdCk7XG5cbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuZGlyZWN0aW9uLm11bHRpcGxlKHRoaXMuc3BlZWQgKiBkdCk7XG5cbiAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2V0UG9zaXRpb24odGhpcy50cmFuc2Zvcm0ucG9zaXRpb24uYWRkKHBhdGgpKTtcblxuICAgICAgICB0aGlzLmNvbGxpZGVyLnggPSB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi54O1xuICAgICAgICB0aGlzLmNvbGxpZGVyLnkgPSB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbi55O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBSZXN1bHQoKTtcbiAgICAgICAgaWYgKHRoaXMuY29sbGlkZXIuY29sbGlkZXModGhpcy5nYW1lLnBsYXllci5jb2xsaWRlciwgcmVzdWx0KSkge1xuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25WZWN0b3IgPSBuZXcgVmVjdG9yKDAsIC01KTtcbiAgICAgICAgICAgIGNvbnN0IHZlY3RvciA9IG5ldyBWZWN0b3IoLXJlc3VsdC5vdmVybGFwICogcmVzdWx0Lm92ZXJsYXBfeCwgLXJlc3VsdC5vdmVybGFwICogcmVzdWx0Lm92ZXJsYXBfeSAvIDIpO1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2V0UG9zaXRpb24oXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ucG9zaXRpb24uYWRkKHZlY3RvcilcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgYWJzdHJhY3QgY2xhc3MgQW5pbWF0aW9uIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0YXJ0VmFsdWU6IG51bWJlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0YXJ0VGFyZ2V0OiBudW1iZXI7XG5cbiAgICBwcml2YXRlIGlzU3RvcHBlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdGltZW91dDogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSBjdXJyZW50VGltZSA9IHRoaXMudGltZW91dDtcbiAgICBwcml2YXRlIHN0ZXBWYWx1ZTogbnVtYmVyO1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcm90ZWN0ZWQgdmFsdWU6IG51bWJlciwgcHJvdGVjdGVkIHRhcmdldDogbnVtYmVyLFxuICAgICAgICBwcm90ZWN0ZWQgZHVyYXRpb246IG51bWJlciwgcHJvdGVjdGVkIHJldmVyc2U6IGJvb2xlYW4gPSBmYWxzZVxuICAgICkge1xuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5zdGFydFRhcmdldCA9IHRhcmdldDtcblxuICAgICAgICB0aGlzLnN0ZXBWYWx1ZSA9ICh0aGlzLnRhcmdldCAtIHRoaXMuc3RhcnRWYWx1ZSkgLyA2MDtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gdGhpcy5zdGVwVmFsdWUgLyB0aGlzLmR1cmF0aW9uO1xuICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gdGhpcy50aW1lb3V0O1xuICAgICAgICBjb25zb2xlLmxvZygndG0nLCB0aGlzLnRpbWVvdXQsIHRoaXMuZHVyYXRpb24pXG4gICAgfVxuXG4gICAgYWJzdHJhY3Qgc3RlcCgpO1xuXG4gICAgdXBkYXRlKGR0OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnY3QnLCB0aGlzLmN1cnJlbnRUaW1lLCBkdCk7XG4gICAgICAgIHRoaXMuY3VycmVudFRpbWUgLT0gZHQ7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRUaW1lIDw9IDApe1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50VGltZSA9IHRoaXMudGltZW91dDtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgKz0gdGhpcy52YWx1ZSA+IHRoaXMudGFyZ2V0ID8gLXRoaXMuc3RlcFZhbHVlIDogdGhpcy5zdGVwVmFsdWU7XG4gICAgICAgICAgICB0aGlzLnN0ZXAoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnZhbHVlID49IHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQgPSB0aGlzLnRhcmdldCA9PT0gdGhpcy5zdGFydFRhcmdldCA/IHRoaXMuc3RhcnRWYWx1ZSA6IHRoaXMuc3RhcnRUYXJnZXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tICcuL2VudGl0aWVzL0dhbWVPYmplY3QnO1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSAnLi9lbnRpdGllcy9UcmFuc2Zvcm0nO1xuaW1wb3J0IHsgRHJhd2VyIH0gZnJvbSAnLi9lbnRpdGllcy9EcmF3ZXInO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSAnY29sbGlzaW9ucyc7XG5cbmV4cG9ydCBjbGFzcyBIb3VzZURyYXdlciBleHRlbmRzIERyYXdlciB7XG4gICAgaGlkZTogYm9vbGVhbiA9IGZhbHNlXG5cbiAgICByZW5kZXIoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcbiAgICAgICAgaWYgKHRoaXMuaGlkZSkge1xuICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMC4zO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGltZyA9IHRoaXMuYXNzZXRzLmdldCgnaG91c2Uuc3ZnJyk7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAtaW1nLndpZHRoIC8gMiwgIC1pbWcuaGVpZ2h0IC8gMiwgaW1nLndpZHRoLCBpbWcuaGVpZ2h0KTtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBIb3VzZSBleHRlbmRzIEdhbWVPYmplY3Qge1xuICAgIGNvbnN0cnVjdG9yKHRyYW5zZm9ybTogVHJhbnNmb3JtLCBwcml2YXRlIGdhbWUpIHtcbiAgICAgICAgc3VwZXIodHJhbnNmb3JtLCBuZXcgSG91c2VEcmF3ZXIodHJhbnNmb3JtKSxcbiAgICAgICAgICAgIGdhbWUuc3lzdGVtLmNyZWF0ZUNpcmNsZSh0cmFuc2Zvcm0ucG9zaXRpb24ueCwgdHJhbnNmb3JtLnBvc2l0aW9uLnksIDIwMCkpXG4gICAgfVxuXG4gICAgdXBkYXRlKGR0KSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZShkdCk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFJlc3VsdCgpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMuZHJhd2VyLmhpZGUgPSAhIXRoaXMuY29sbGlkZXIuY29sbGlkZXModGhpcy5nYW1lLnBsYXllci5jb2xsaWRlciwgcmVzdWx0KTtcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgQ29uZmlnIHtcbiAgICBnYW1lID0ge1xuICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LFxuICAgIH07XG4gICAgd29ybGQgPSB7XG4gICAgICAgIHdpZHRoOiA0NDQ0LFxuICAgICAgICBoZWlnaHQ6IDIyMTgsXG4gICAgfTtcbn1cbiIsIi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3QgYnJhbmNoX3Bvb2wgPSBbXTtcblxuLyoqXG4gKiBBIGJyYW5jaCB3aXRoaW4gYSBCVkhcbiAqIEBjbGFzc1xuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQlZIQnJhbmNoIHtcblx0LyoqXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX3BhcmVudCA9IG51bGw7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmhfYnJhbmNoID0gdHJ1ZTtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2J2aF9sZWZ0ID0gbnVsbDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2J2aF9yaWdodCA9IG51bGw7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmhfc29ydCA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmhfbWluX3ggPSAwO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX21pbl95ID0gMDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2J2aF9tYXhfeCA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmhfbWF4X3kgPSAwO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSBicmFuY2ggZnJvbSB0aGUgYnJhbmNoIHBvb2wgb3IgY3JlYXRlcyBhIG5ldyBicmFuY2hcblx0ICogQHJldHVybnMge0JWSEJyYW5jaH1cblx0ICovXG5cdHN0YXRpYyBnZXRCcmFuY2goKSB7XG5cdFx0aWYoYnJhbmNoX3Bvb2wubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gYnJhbmNoX3Bvb2wucG9wKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBCVkhCcmFuY2goKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWxlYXNlcyBhIGJyYW5jaCBiYWNrIGludG8gdGhlIGJyYW5jaCBwb29sXG5cdCAqIEBwYXJhbSB7QlZIQnJhbmNofSBicmFuY2ggVGhlIGJyYW5jaCB0byByZWxlYXNlXG5cdCAqL1xuXHRzdGF0aWMgcmVsZWFzZUJyYW5jaChicmFuY2gpIHtcblx0XHRicmFuY2hfcG9vbC5wdXNoKGJyYW5jaCk7XG5cdH1cblxuXHQvKipcblx0ICogU29ydGluZyBjYWxsYmFjayB1c2VkIHRvIHNvcnQgYnJhbmNoZXMgYnkgZGVlcGVzdCBmaXJzdFxuXHQgKiBAcGFyYW0ge0JWSEJyYW5jaH0gYSBUaGUgZmlyc3QgYnJhbmNoXG5cdCAqIEBwYXJhbSB7QlZIQnJhbmNofSBiIFRoZSBzZWNvbmQgYnJhbmNoXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9XG5cdCAqL1xuXHRzdGF0aWMgc29ydEJyYW5jaGVzKGEsIGIpIHtcblx0XHRyZXR1cm4gYS5zb3J0ID4gYi5zb3J0ID8gLTEgOiAxO1xuXHR9XG59O1xuIiwiaW1wb3J0IEJWSEJyYW5jaCBmcm9tICcuL0JWSEJyYW5jaC5tanMnO1xuXG4vKipcbiAqIEEgQm91bmRpbmcgVm9sdW1lIEhpZXJhcmNoeSAoQlZIKSB1c2VkIHRvIGZpbmQgcG90ZW50aWFsIGNvbGxpc2lvbnMgcXVpY2tseVxuICogQGNsYXNzXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCVkgge1xuXHQvKipcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9oaWVyYXJjaHkgPSBudWxsO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYm9kaWVzID0gW107XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9kaXJ0eV9icmFuY2hlcyA9IFtdO1xuXHR9XG5cblx0LyoqXG5cdCAqIEluc2VydHMgYSBib2R5IGludG8gdGhlIEJWSFxuXHQgKiBAcGFyYW0ge0NpcmNsZXxQb2x5Z29ufFBvaW50fSBib2R5IFRoZSBib2R5IHRvIGluc2VydFxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFt1cGRhdGluZyA9IGZhbHNlXSBTZXQgdG8gdHJ1ZSBpZiB0aGUgYm9keSBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgQlZIICh1c2VkIGludGVybmFsbHkgd2hlbiB1cGRhdGluZyB0aGUgYm9keSdzIHBvc2l0aW9uKVxuXHQgKi9cblx0aW5zZXJ0KGJvZHksIHVwZGF0aW5nID0gZmFsc2UpIHtcblx0XHRpZighdXBkYXRpbmcpIHtcblx0XHRcdGNvbnN0IGJ2aCA9IGJvZHkuX2J2aDtcblxuXHRcdFx0aWYoYnZoICYmIGJ2aCAhPT0gdGhpcykge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0JvZHkgYmVsb25ncyB0byBhbm90aGVyIGNvbGxpc2lvbiBzeXN0ZW0nKTtcblx0XHRcdH1cblxuXHRcdFx0Ym9keS5fYnZoID0gdGhpcztcblx0XHRcdHRoaXMuX2JvZGllcy5wdXNoKGJvZHkpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBvbHlnb24gPSBib2R5Ll9wb2x5Z29uO1xuXHRcdGNvbnN0IGJvZHlfeCAgPSBib2R5Lng7XG5cdFx0Y29uc3QgYm9keV95ICA9IGJvZHkueTtcblxuXHRcdGlmKHBvbHlnb24pIHtcblx0XHRcdGlmKFxuXHRcdFx0XHRib2R5Ll9kaXJ0eV9jb29yZHMgfHxcblx0XHRcdFx0Ym9keS54ICAgICAgICE9PSBib2R5Ll94IHx8XG5cdFx0XHRcdGJvZHkueSAgICAgICAhPT0gYm9keS5feSB8fFxuXHRcdFx0XHRib2R5LmFuZ2xlICAgIT09IGJvZHkuX2FuZ2xlIHx8XG5cdFx0XHRcdGJvZHkuc2NhbGVfeCAhPT0gYm9keS5fc2NhbGVfeCB8fFxuXHRcdFx0XHRib2R5LnNjYWxlX3kgIT09IGJvZHkuX3NjYWxlX3lcblx0XHRcdCkge1xuXHRcdFx0XHRib2R5Ll9jYWxjdWxhdGVDb29yZHMoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCBwYWRkaW5nICAgID0gYm9keS5fYnZoX3BhZGRpbmc7XG5cdFx0Y29uc3QgcmFkaXVzICAgICA9IHBvbHlnb24gPyAwIDogYm9keS5yYWRpdXMgKiBib2R5LnNjYWxlO1xuXHRcdGNvbnN0IGJvZHlfbWluX3ggPSAocG9seWdvbiA/IGJvZHkuX21pbl94IDogYm9keV94IC0gcmFkaXVzKSAtIHBhZGRpbmc7XG5cdFx0Y29uc3QgYm9keV9taW5feSA9IChwb2x5Z29uID8gYm9keS5fbWluX3kgOiBib2R5X3kgLSByYWRpdXMpIC0gcGFkZGluZztcblx0XHRjb25zdCBib2R5X21heF94ID0gKHBvbHlnb24gPyBib2R5Ll9tYXhfeCA6IGJvZHlfeCArIHJhZGl1cykgKyBwYWRkaW5nO1xuXHRcdGNvbnN0IGJvZHlfbWF4X3kgPSAocG9seWdvbiA/IGJvZHkuX21heF95IDogYm9keV95ICsgcmFkaXVzKSArIHBhZGRpbmc7XG5cblx0XHRib2R5Ll9idmhfbWluX3ggPSBib2R5X21pbl94O1xuXHRcdGJvZHkuX2J2aF9taW5feSA9IGJvZHlfbWluX3k7XG5cdFx0Ym9keS5fYnZoX21heF94ID0gYm9keV9tYXhfeDtcblx0XHRib2R5Ll9idmhfbWF4X3kgPSBib2R5X21heF95O1xuXG5cdFx0bGV0IGN1cnJlbnQgPSB0aGlzLl9oaWVyYXJjaHk7XG5cdFx0bGV0IHNvcnQgICAgPSAwO1xuXG5cdFx0aWYoIWN1cnJlbnQpIHtcblx0XHRcdHRoaXMuX2hpZXJhcmNoeSA9IGJvZHk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0d2hpbGUodHJ1ZSkge1xuXHRcdFx0XHQvLyBCcmFuY2hcblx0XHRcdFx0aWYoY3VycmVudC5fYnZoX2JyYW5jaCkge1xuXHRcdFx0XHRcdGNvbnN0IGxlZnQgICAgICAgICAgICA9IGN1cnJlbnQuX2J2aF9sZWZ0O1xuXHRcdFx0XHRcdGNvbnN0IGxlZnRfbWluX3kgICAgICA9IGxlZnQuX2J2aF9taW5feTtcblx0XHRcdFx0XHRjb25zdCBsZWZ0X21heF94ICAgICAgPSBsZWZ0Ll9idmhfbWF4X3g7XG5cdFx0XHRcdFx0Y29uc3QgbGVmdF9tYXhfeSAgICAgID0gbGVmdC5fYnZoX21heF95O1xuXHRcdFx0XHRcdGNvbnN0IGxlZnRfbmV3X21pbl94ICA9IGJvZHlfbWluX3ggPCBsZWZ0Ll9idmhfbWluX3ggPyBib2R5X21pbl94IDogbGVmdC5fYnZoX21pbl94O1xuXHRcdFx0XHRcdGNvbnN0IGxlZnRfbmV3X21pbl95ICA9IGJvZHlfbWluX3kgPCBsZWZ0X21pbl95ID8gYm9keV9taW5feSA6IGxlZnRfbWluX3k7XG5cdFx0XHRcdFx0Y29uc3QgbGVmdF9uZXdfbWF4X3ggID0gYm9keV9tYXhfeCA+IGxlZnRfbWF4X3ggPyBib2R5X21heF94IDogbGVmdF9tYXhfeDtcblx0XHRcdFx0XHRjb25zdCBsZWZ0X25ld19tYXhfeSAgPSBib2R5X21heF95ID4gbGVmdF9tYXhfeSA/IGJvZHlfbWF4X3kgOiBsZWZ0X21heF95O1xuXHRcdFx0XHRcdGNvbnN0IGxlZnRfdm9sdW1lICAgICA9IChsZWZ0X21heF94IC0gbGVmdC5fYnZoX21pbl94KSAqIChsZWZ0X21heF95IC0gbGVmdF9taW5feSk7XG5cdFx0XHRcdFx0Y29uc3QgbGVmdF9uZXdfdm9sdW1lID0gKGxlZnRfbmV3X21heF94IC0gbGVmdF9uZXdfbWluX3gpICogKGxlZnRfbmV3X21heF95IC0gbGVmdF9uZXdfbWluX3kpO1xuXHRcdFx0XHRcdGNvbnN0IGxlZnRfZGlmZmVyZW5jZSA9IGxlZnRfbmV3X3ZvbHVtZSAtIGxlZnRfdm9sdW1lO1xuXG5cdFx0XHRcdFx0Y29uc3QgcmlnaHQgICAgICAgICAgICA9IGN1cnJlbnQuX2J2aF9yaWdodDtcblx0XHRcdFx0XHRjb25zdCByaWdodF9taW5feCAgICAgID0gcmlnaHQuX2J2aF9taW5feDtcblx0XHRcdFx0XHRjb25zdCByaWdodF9taW5feSAgICAgID0gcmlnaHQuX2J2aF9taW5feTtcblx0XHRcdFx0XHRjb25zdCByaWdodF9tYXhfeCAgICAgID0gcmlnaHQuX2J2aF9tYXhfeDtcblx0XHRcdFx0XHRjb25zdCByaWdodF9tYXhfeSAgICAgID0gcmlnaHQuX2J2aF9tYXhfeTtcblx0XHRcdFx0XHRjb25zdCByaWdodF9uZXdfbWluX3ggID0gYm9keV9taW5feCA8IHJpZ2h0X21pbl94ID8gYm9keV9taW5feCA6IHJpZ2h0X21pbl94O1xuXHRcdFx0XHRcdGNvbnN0IHJpZ2h0X25ld19taW5feSAgPSBib2R5X21pbl95IDwgcmlnaHRfbWluX3kgPyBib2R5X21pbl95IDogcmlnaHRfbWluX3k7XG5cdFx0XHRcdFx0Y29uc3QgcmlnaHRfbmV3X21heF94ICA9IGJvZHlfbWF4X3ggPiByaWdodF9tYXhfeCA/IGJvZHlfbWF4X3ggOiByaWdodF9tYXhfeDtcblx0XHRcdFx0XHRjb25zdCByaWdodF9uZXdfbWF4X3kgID0gYm9keV9tYXhfeSA+IHJpZ2h0X21heF95ID8gYm9keV9tYXhfeSA6IHJpZ2h0X21heF95O1xuXHRcdFx0XHRcdGNvbnN0IHJpZ2h0X3ZvbHVtZSAgICAgPSAocmlnaHRfbWF4X3ggLSByaWdodF9taW5feCkgKiAocmlnaHRfbWF4X3kgLSByaWdodF9taW5feSk7XG5cdFx0XHRcdFx0Y29uc3QgcmlnaHRfbmV3X3ZvbHVtZSA9IChyaWdodF9uZXdfbWF4X3ggLSByaWdodF9uZXdfbWluX3gpICogKHJpZ2h0X25ld19tYXhfeSAtIHJpZ2h0X25ld19taW5feSk7XG5cdFx0XHRcdFx0Y29uc3QgcmlnaHRfZGlmZmVyZW5jZSA9IHJpZ2h0X25ld192b2x1bWUgLSByaWdodF92b2x1bWU7XG5cblx0XHRcdFx0XHRjdXJyZW50Ll9idmhfc29ydCAgPSBzb3J0Kys7XG5cdFx0XHRcdFx0Y3VycmVudC5fYnZoX21pbl94ID0gbGVmdF9uZXdfbWluX3ggPCByaWdodF9uZXdfbWluX3ggPyBsZWZ0X25ld19taW5feCA6IHJpZ2h0X25ld19taW5feDtcblx0XHRcdFx0XHRjdXJyZW50Ll9idmhfbWluX3kgPSBsZWZ0X25ld19taW5feSA8IHJpZ2h0X25ld19taW5feSA/IGxlZnRfbmV3X21pbl95IDogcmlnaHRfbmV3X21pbl95O1xuXHRcdFx0XHRcdGN1cnJlbnQuX2J2aF9tYXhfeCA9IGxlZnRfbmV3X21heF94ID4gcmlnaHRfbmV3X21heF94ID8gbGVmdF9uZXdfbWF4X3ggOiByaWdodF9uZXdfbWF4X3g7XG5cdFx0XHRcdFx0Y3VycmVudC5fYnZoX21heF95ID0gbGVmdF9uZXdfbWF4X3kgPiByaWdodF9uZXdfbWF4X3kgPyBsZWZ0X25ld19tYXhfeSA6IHJpZ2h0X25ld19tYXhfeTtcblxuXHRcdFx0XHRcdGN1cnJlbnQgPSBsZWZ0X2RpZmZlcmVuY2UgPD0gcmlnaHRfZGlmZmVyZW5jZSA/IGxlZnQgOiByaWdodDtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBMZWFmXG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdGNvbnN0IGdyYW5kcGFyZW50ICA9IGN1cnJlbnQuX2J2aF9wYXJlbnQ7XG5cdFx0XHRcdFx0Y29uc3QgcGFyZW50X21pbl94ID0gY3VycmVudC5fYnZoX21pbl94O1xuXHRcdFx0XHRcdGNvbnN0IHBhcmVudF9taW5feSA9IGN1cnJlbnQuX2J2aF9taW5feTtcblx0XHRcdFx0XHRjb25zdCBwYXJlbnRfbWF4X3ggPSBjdXJyZW50Ll9idmhfbWF4X3g7XG5cdFx0XHRcdFx0Y29uc3QgcGFyZW50X21heF95ID0gY3VycmVudC5fYnZoX21heF95O1xuXHRcdFx0XHRcdGNvbnN0IG5ld19wYXJlbnQgICA9IGN1cnJlbnQuX2J2aF9wYXJlbnQgPSBib2R5Ll9idmhfcGFyZW50ID0gQlZIQnJhbmNoLmdldEJyYW5jaCgpO1xuXG5cdFx0XHRcdFx0bmV3X3BhcmVudC5fYnZoX3BhcmVudCA9IGdyYW5kcGFyZW50O1xuXHRcdFx0XHRcdG5ld19wYXJlbnQuX2J2aF9sZWZ0ICAgPSBjdXJyZW50O1xuXHRcdFx0XHRcdG5ld19wYXJlbnQuX2J2aF9yaWdodCAgPSBib2R5O1xuXHRcdFx0XHRcdG5ld19wYXJlbnQuX2J2aF9zb3J0ICAgPSBzb3J0Kys7XG5cdFx0XHRcdFx0bmV3X3BhcmVudC5fYnZoX21pbl94ICA9IGJvZHlfbWluX3ggPCBwYXJlbnRfbWluX3ggPyBib2R5X21pbl94IDogcGFyZW50X21pbl94O1xuXHRcdFx0XHRcdG5ld19wYXJlbnQuX2J2aF9taW5feSAgPSBib2R5X21pbl95IDwgcGFyZW50X21pbl95ID8gYm9keV9taW5feSA6IHBhcmVudF9taW5feTtcblx0XHRcdFx0XHRuZXdfcGFyZW50Ll9idmhfbWF4X3ggID0gYm9keV9tYXhfeCA+IHBhcmVudF9tYXhfeCA/IGJvZHlfbWF4X3ggOiBwYXJlbnRfbWF4X3g7XG5cdFx0XHRcdFx0bmV3X3BhcmVudC5fYnZoX21heF95ICA9IGJvZHlfbWF4X3kgPiBwYXJlbnRfbWF4X3kgPyBib2R5X21heF95IDogcGFyZW50X21heF95O1xuXG5cdFx0XHRcdFx0aWYoIWdyYW5kcGFyZW50KSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9oaWVyYXJjaHkgPSBuZXdfcGFyZW50O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmKGdyYW5kcGFyZW50Ll9idmhfbGVmdCA9PT0gY3VycmVudCkge1xuXHRcdFx0XHRcdFx0Z3JhbmRwYXJlbnQuX2J2aF9sZWZ0ID0gbmV3X3BhcmVudDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRncmFuZHBhcmVudC5fYnZoX3JpZ2h0ID0gbmV3X3BhcmVudDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGEgYm9keSBmcm9tIHRoZSBCVkhcblx0ICogQHBhcmFtIHtDaXJjbGV8UG9seWdvbnxQb2ludH0gYm9keSBUaGUgYm9keSB0byByZW1vdmVcblx0ICogQHBhcmFtIHtCb29sZWFufSBbdXBkYXRpbmcgPSBmYWxzZV0gU2V0IHRvIHRydWUgaWYgdGhpcyBpcyBhIHRlbXBvcmFyeSByZW1vdmFsICh1c2VkIGludGVybmFsbHkgd2hlbiB1cGRhdGluZyB0aGUgYm9keSdzIHBvc2l0aW9uKVxuXHQgKi9cblx0cmVtb3ZlKGJvZHksIHVwZGF0aW5nID0gZmFsc2UpIHtcblx0XHRpZighdXBkYXRpbmcpIHtcblx0XHRcdGNvbnN0IGJ2aCA9IGJvZHkuX2J2aDtcblxuXHRcdFx0aWYoYnZoICYmIGJ2aCAhPT0gdGhpcykge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0JvZHkgYmVsb25ncyB0byBhbm90aGVyIGNvbGxpc2lvbiBzeXN0ZW0nKTtcblx0XHRcdH1cblxuXHRcdFx0Ym9keS5fYnZoID0gbnVsbDtcblx0XHRcdHRoaXMuX2JvZGllcy5zcGxpY2UodGhpcy5fYm9kaWVzLmluZGV4T2YoYm9keSksIDEpO1xuXHRcdH1cblxuXHRcdGlmKHRoaXMuX2hpZXJhcmNoeSA9PT0gYm9keSkge1xuXHRcdFx0dGhpcy5faGllcmFyY2h5ID0gbnVsbDtcblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBhcmVudCAgICAgICA9IGJvZHkuX2J2aF9wYXJlbnQ7XG5cdFx0Y29uc3QgZ3JhbmRwYXJlbnQgID0gcGFyZW50Ll9idmhfcGFyZW50O1xuXHRcdGNvbnN0IHBhcmVudF9sZWZ0ICA9IHBhcmVudC5fYnZoX2xlZnQ7XG5cdFx0Y29uc3Qgc2libGluZyAgICAgID0gcGFyZW50X2xlZnQgPT09IGJvZHkgPyBwYXJlbnQuX2J2aF9yaWdodCA6IHBhcmVudF9sZWZ0O1xuXG5cdFx0c2libGluZy5fYnZoX3BhcmVudCA9IGdyYW5kcGFyZW50O1xuXG5cdFx0aWYoc2libGluZy5fYnZoX2JyYW5jaCkge1xuXHRcdFx0c2libGluZy5fYnZoX3NvcnQgPSBwYXJlbnQuX2J2aF9zb3J0O1xuXHRcdH1cblxuXHRcdGlmKGdyYW5kcGFyZW50KSB7XG5cdFx0XHRpZihncmFuZHBhcmVudC5fYnZoX2xlZnQgPT09IHBhcmVudCkge1xuXHRcdFx0XHRncmFuZHBhcmVudC5fYnZoX2xlZnQgPSBzaWJsaW5nO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGdyYW5kcGFyZW50Ll9idmhfcmlnaHQgPSBzaWJsaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgYnJhbmNoID0gZ3JhbmRwYXJlbnQ7XG5cblx0XHRcdHdoaWxlKGJyYW5jaCkge1xuXHRcdFx0XHRjb25zdCBsZWZ0ICAgICAgID0gYnJhbmNoLl9idmhfbGVmdDtcblx0XHRcdFx0Y29uc3QgbGVmdF9taW5feCA9IGxlZnQuX2J2aF9taW5feDtcblx0XHRcdFx0Y29uc3QgbGVmdF9taW5feSA9IGxlZnQuX2J2aF9taW5feTtcblx0XHRcdFx0Y29uc3QgbGVmdF9tYXhfeCA9IGxlZnQuX2J2aF9tYXhfeDtcblx0XHRcdFx0Y29uc3QgbGVmdF9tYXhfeSA9IGxlZnQuX2J2aF9tYXhfeTtcblxuXHRcdFx0XHRjb25zdCByaWdodCAgICAgICA9IGJyYW5jaC5fYnZoX3JpZ2h0O1xuXHRcdFx0XHRjb25zdCByaWdodF9taW5feCA9IHJpZ2h0Ll9idmhfbWluX3g7XG5cdFx0XHRcdGNvbnN0IHJpZ2h0X21pbl95ID0gcmlnaHQuX2J2aF9taW5feTtcblx0XHRcdFx0Y29uc3QgcmlnaHRfbWF4X3ggPSByaWdodC5fYnZoX21heF94O1xuXHRcdFx0XHRjb25zdCByaWdodF9tYXhfeSA9IHJpZ2h0Ll9idmhfbWF4X3k7XG5cblx0XHRcdFx0YnJhbmNoLl9idmhfbWluX3ggPSBsZWZ0X21pbl94IDwgcmlnaHRfbWluX3ggPyBsZWZ0X21pbl94IDogcmlnaHRfbWluX3g7XG5cdFx0XHRcdGJyYW5jaC5fYnZoX21pbl95ID0gbGVmdF9taW5feSA8IHJpZ2h0X21pbl95ID8gbGVmdF9taW5feSA6IHJpZ2h0X21pbl95O1xuXHRcdFx0XHRicmFuY2guX2J2aF9tYXhfeCA9IGxlZnRfbWF4X3ggPiByaWdodF9tYXhfeCA/IGxlZnRfbWF4X3ggOiByaWdodF9tYXhfeDtcblx0XHRcdFx0YnJhbmNoLl9idmhfbWF4X3kgPSBsZWZ0X21heF95ID4gcmlnaHRfbWF4X3kgPyBsZWZ0X21heF95IDogcmlnaHRfbWF4X3k7XG5cblx0XHRcdFx0YnJhbmNoID0gYnJhbmNoLl9idmhfcGFyZW50O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHRoaXMuX2hpZXJhcmNoeSA9IHNpYmxpbmc7XG5cdFx0fVxuXG5cdFx0QlZIQnJhbmNoLnJlbGVhc2VCcmFuY2gocGFyZW50KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSBCVkguIE1vdmVkIGJvZGllcyBhcmUgcmVtb3ZlZC9pbnNlcnRlZC5cblx0ICovXG5cdHVwZGF0ZSgpIHtcblx0XHRjb25zdCBib2RpZXMgPSB0aGlzLl9ib2RpZXM7XG5cdFx0Y29uc3QgY291bnQgID0gYm9kaWVzLmxlbmd0aDtcblxuXHRcdGZvcihsZXQgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG5cdFx0XHRjb25zdCBib2R5ID0gYm9kaWVzW2ldO1xuXG5cdFx0XHRsZXQgdXBkYXRlID0gZmFsc2U7XG5cblx0XHRcdGlmKCF1cGRhdGUgJiYgYm9keS5wYWRkaW5nICE9PSBib2R5Ll9idmhfcGFkZGluZykge1xuXHRcdFx0XHRib2R5Ll9idmhfcGFkZGluZyA9IGJvZHkucGFkZGluZztcblx0XHRcdFx0dXBkYXRlID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYoIXVwZGF0ZSkge1xuXHRcdFx0XHRjb25zdCBwb2x5Z29uID0gYm9keS5fcG9seWdvbjtcblxuXHRcdFx0XHRpZihwb2x5Z29uKSB7XG5cdFx0XHRcdFx0aWYoXG5cdFx0XHRcdFx0XHRib2R5Ll9kaXJ0eV9jb29yZHMgfHxcblx0XHRcdFx0XHRcdGJvZHkueCAgICAgICAhPT0gYm9keS5feCB8fFxuXHRcdFx0XHRcdFx0Ym9keS55ICAgICAgICE9PSBib2R5Ll95IHx8XG5cdFx0XHRcdFx0XHRib2R5LmFuZ2xlICAgIT09IGJvZHkuX2FuZ2xlIHx8XG5cdFx0XHRcdFx0XHRib2R5LnNjYWxlX3ggIT09IGJvZHkuX3NjYWxlX3ggfHxcblx0XHRcdFx0XHRcdGJvZHkuc2NhbGVfeSAhPT0gYm9keS5fc2NhbGVfeVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0Ym9keS5fY2FsY3VsYXRlQ29vcmRzKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgeCAgICAgID0gYm9keS54O1xuXHRcdFx0XHRjb25zdCB5ICAgICAgPSBib2R5Lnk7XG5cdFx0XHRcdGNvbnN0IHJhZGl1cyA9IHBvbHlnb24gPyAwIDogYm9keS5yYWRpdXMgKiBib2R5LnNjYWxlO1xuXHRcdFx0XHRjb25zdCBtaW5feCAgPSBwb2x5Z29uID8gYm9keS5fbWluX3ggOiB4IC0gcmFkaXVzO1xuXHRcdFx0XHRjb25zdCBtaW5feSAgPSBwb2x5Z29uID8gYm9keS5fbWluX3kgOiB5IC0gcmFkaXVzO1xuXHRcdFx0XHRjb25zdCBtYXhfeCAgPSBwb2x5Z29uID8gYm9keS5fbWF4X3ggOiB4ICsgcmFkaXVzO1xuXHRcdFx0XHRjb25zdCBtYXhfeSAgPSBwb2x5Z29uID8gYm9keS5fbWF4X3kgOiB5ICsgcmFkaXVzO1xuXG5cdFx0XHRcdHVwZGF0ZSA9IG1pbl94IDwgYm9keS5fYnZoX21pbl94IHx8IG1pbl95IDwgYm9keS5fYnZoX21pbl95IHx8IG1heF94ID4gYm9keS5fYnZoX21heF94IHx8IG1heF95ID4gYm9keS5fYnZoX21heF95O1xuXHRcdFx0fVxuXG5cdFx0XHRpZih1cGRhdGUpIHtcblx0XHRcdFx0dGhpcy5yZW1vdmUoYm9keSwgdHJ1ZSk7XG5cdFx0XHRcdHRoaXMuaW5zZXJ0KGJvZHksIHRydWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbGlzdCBvZiBwb3RlbnRpYWwgY29sbGlzaW9ucyBmb3IgYSBib2R5XG5cdCAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGJvZHkgVGhlIGJvZHkgdG8gdGVzdFxuXHQgKiBAcmV0dXJucyB7QXJyYXk8Qm9keT59XG5cdCAqL1xuXHRwb3RlbnRpYWxzKGJvZHkpIHtcblx0XHRjb25zdCByZXN1bHRzID0gW107XG5cdFx0Y29uc3QgbWluX3ggICA9IGJvZHkuX2J2aF9taW5feDtcblx0XHRjb25zdCBtaW5feSAgID0gYm9keS5fYnZoX21pbl95O1xuXHRcdGNvbnN0IG1heF94ICAgPSBib2R5Ll9idmhfbWF4X3g7XG5cdFx0Y29uc3QgbWF4X3kgICA9IGJvZHkuX2J2aF9tYXhfeTtcblxuXHRcdGxldCBjdXJyZW50ICAgICAgID0gdGhpcy5faGllcmFyY2h5O1xuXHRcdGxldCB0cmF2ZXJzZV9sZWZ0ID0gdHJ1ZTtcblxuXHRcdGlmKCFjdXJyZW50IHx8ICFjdXJyZW50Ll9idmhfYnJhbmNoKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9XG5cblx0XHR3aGlsZShjdXJyZW50KSB7XG5cdFx0XHRpZih0cmF2ZXJzZV9sZWZ0KSB7XG5cdFx0XHRcdHRyYXZlcnNlX2xlZnQgPSBmYWxzZTtcblxuXHRcdFx0XHRsZXQgbGVmdCA9IGN1cnJlbnQuX2J2aF9icmFuY2ggPyBjdXJyZW50Ll9idmhfbGVmdCA6IG51bGw7XG5cblx0XHRcdFx0d2hpbGUoXG5cdFx0XHRcdFx0bGVmdCAmJlxuXHRcdFx0XHRcdGxlZnQuX2J2aF9tYXhfeCA+PSBtaW5feCAmJlxuXHRcdFx0XHRcdGxlZnQuX2J2aF9tYXhfeSA+PSBtaW5feSAmJlxuXHRcdFx0XHRcdGxlZnQuX2J2aF9taW5feCA8PSBtYXhfeCAmJlxuXHRcdFx0XHRcdGxlZnQuX2J2aF9taW5feSA8PSBtYXhfeVxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRjdXJyZW50ID0gbGVmdDtcblx0XHRcdFx0XHRsZWZ0ICAgID0gY3VycmVudC5fYnZoX2JyYW5jaCA/IGN1cnJlbnQuX2J2aF9sZWZ0IDogbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBicmFuY2ggPSBjdXJyZW50Ll9idmhfYnJhbmNoO1xuXHRcdFx0Y29uc3QgcmlnaHQgID0gYnJhbmNoID8gY3VycmVudC5fYnZoX3JpZ2h0IDogbnVsbDtcblxuXHRcdFx0aWYoXG5cdFx0XHRcdHJpZ2h0ICYmXG5cdFx0XHRcdHJpZ2h0Ll9idmhfbWF4X3ggPiBtaW5feCAmJlxuXHRcdFx0XHRyaWdodC5fYnZoX21heF95ID4gbWluX3kgJiZcblx0XHRcdFx0cmlnaHQuX2J2aF9taW5feCA8IG1heF94ICYmXG5cdFx0XHRcdHJpZ2h0Ll9idmhfbWluX3kgPCBtYXhfeVxuXHRcdFx0KSB7XG5cdFx0XHRcdGN1cnJlbnQgICAgICAgPSByaWdodDtcblx0XHRcdFx0dHJhdmVyc2VfbGVmdCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0aWYoIWJyYW5jaCAmJiBjdXJyZW50ICE9PSBib2R5KSB7XG5cdFx0XHRcdFx0cmVzdWx0cy5wdXNoKGN1cnJlbnQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IHBhcmVudCA9IGN1cnJlbnQuX2J2aF9wYXJlbnQ7XG5cblx0XHRcdFx0aWYocGFyZW50KSB7XG5cdFx0XHRcdFx0d2hpbGUocGFyZW50ICYmIHBhcmVudC5fYnZoX3JpZ2h0ID09PSBjdXJyZW50KSB7XG5cdFx0XHRcdFx0XHRjdXJyZW50ID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0cGFyZW50ICA9IGN1cnJlbnQuX2J2aF9wYXJlbnQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3VycmVudCA9IHBhcmVudDtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0LyoqXG5cdCAqIERyYXdzIHRoZSBib2RpZXMgd2l0aGluIHRoZSBCVkggdG8gYSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQncyBjdXJyZW50IHBhdGhcblx0ICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gZHJhdyB0b1xuXHQgKi9cblx0ZHJhdyhjb250ZXh0KSB7XG5cdFx0Y29uc3QgYm9kaWVzID0gdGhpcy5fYm9kaWVzO1xuXHRcdGNvbnN0IGNvdW50ICA9IGJvZGllcy5sZW5ndGg7XG5cblx0XHRmb3IobGV0IGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuXHRcdFx0Ym9kaWVzW2ldLmRyYXcoY29udGV4dCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIERyYXdzIHRoZSBCVkggdG8gYSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQncyBjdXJyZW50IHBhdGguIFRoaXMgaXMgdXNlZnVsIGZvciB0ZXN0aW5nIG91dCBkaWZmZXJlbnQgcGFkZGluZyB2YWx1ZXMgZm9yIGJvZGllcy5cblx0ICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gZHJhdyB0b1xuXHQgKi9cblx0ZHJhd0JWSChjb250ZXh0KSB7XG5cdFx0bGV0IGN1cnJlbnQgICAgICAgPSB0aGlzLl9oaWVyYXJjaHk7XG5cdFx0bGV0IHRyYXZlcnNlX2xlZnQgPSB0cnVlO1xuXG5cdFx0d2hpbGUoY3VycmVudCkge1xuXHRcdFx0aWYodHJhdmVyc2VfbGVmdCkge1xuXHRcdFx0XHR0cmF2ZXJzZV9sZWZ0ID0gZmFsc2U7XG5cblx0XHRcdFx0bGV0IGxlZnQgPSBjdXJyZW50Ll9idmhfYnJhbmNoID8gY3VycmVudC5fYnZoX2xlZnQgOiBudWxsO1xuXG5cdFx0XHRcdHdoaWxlKGxlZnQpIHtcblx0XHRcdFx0XHRjdXJyZW50ID0gbGVmdDtcblx0XHRcdFx0XHRsZWZ0ICAgID0gY3VycmVudC5fYnZoX2JyYW5jaCA/IGN1cnJlbnQuX2J2aF9sZWZ0IDogbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBicmFuY2ggPSBjdXJyZW50Ll9idmhfYnJhbmNoO1xuXHRcdFx0Y29uc3QgbWluX3ggID0gY3VycmVudC5fYnZoX21pbl94O1xuXHRcdFx0Y29uc3QgbWluX3kgID0gY3VycmVudC5fYnZoX21pbl95O1xuXHRcdFx0Y29uc3QgbWF4X3ggID0gY3VycmVudC5fYnZoX21heF94O1xuXHRcdFx0Y29uc3QgbWF4X3kgID0gY3VycmVudC5fYnZoX21heF95O1xuXHRcdFx0Y29uc3QgcmlnaHQgID0gYnJhbmNoID8gY3VycmVudC5fYnZoX3JpZ2h0IDogbnVsbDtcblxuXHRcdFx0Y29udGV4dC5tb3ZlVG8obWluX3gsIG1pbl95KTtcblx0XHRcdGNvbnRleHQubGluZVRvKG1heF94LCBtaW5feSk7XG5cdFx0XHRjb250ZXh0LmxpbmVUbyhtYXhfeCwgbWF4X3kpO1xuXHRcdFx0Y29udGV4dC5saW5lVG8obWluX3gsIG1heF95KTtcblx0XHRcdGNvbnRleHQubGluZVRvKG1pbl94LCBtaW5feSk7XG5cblx0XHRcdGlmKHJpZ2h0KSB7XG5cdFx0XHRcdGN1cnJlbnQgICAgICAgPSByaWdodDtcblx0XHRcdFx0dHJhdmVyc2VfbGVmdCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0bGV0IHBhcmVudCA9IGN1cnJlbnQuX2J2aF9wYXJlbnQ7XG5cblx0XHRcdFx0aWYocGFyZW50KSB7XG5cdFx0XHRcdFx0d2hpbGUocGFyZW50ICYmIHBhcmVudC5fYnZoX3JpZ2h0ID09PSBjdXJyZW50KSB7XG5cdFx0XHRcdFx0XHRjdXJyZW50ID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0cGFyZW50ICA9IGN1cnJlbnQuX2J2aF9wYXJlbnQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3VycmVudCA9IHBhcmVudDtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcbiIsIi8qKlxuICogQW4gb2JqZWN0IHVzZWQgdG8gY29sbGVjdCB0aGUgZGV0YWlsZWQgcmVzdWx0cyBvZiBhIGNvbGxpc2lvbiB0ZXN0XG4gKlxuICogPiAqKk5vdGU6KiogSXQgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHlvdSByZWN5Y2xlIHRoZSBzYW1lIFJlc3VsdCBvYmplY3QgaWYgcG9zc2libGUgaW4gb3JkZXIgdG8gYXZvaWQgd2FzdGluZyBtZW1vcnlcbiAqIEBjbGFzc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN1bHQge1xuXHQvKipcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvKipcblx0XHQgKiBAZGVzYyBUcnVlIGlmIGEgY29sbGlzaW9uIHdhcyBkZXRlY3RlZFxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuY29sbGlzaW9uID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUaGUgc291cmNlIGJvZHkgdGVzdGVkXG5cdFx0ICogQHR5cGUge0NpcmNsZXxQb2x5Z29ufFBvaW50fVxuXHRcdCAqL1xuXHRcdHRoaXMuYSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUaGUgdGFyZ2V0IGJvZHkgdGVzdGVkIGFnYWluc3Rcblx0XHQgKiBAdHlwZSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9XG5cdFx0ICovXG5cdFx0dGhpcy5iID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEBkZXNjIFRydWUgaWYgQSBpcyBjb21wbGV0ZWx5IGNvbnRhaW5lZCB3aXRoaW4gQlxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuYV9pbl9iID0gZmFsc2U7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUcnVlIGlmIEIgaXMgY29tcGxldGVseSBjb250YWluZWQgd2l0aGluIEFcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLmFfaW5fYiA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogQGRlc2MgVGhlIG1hZ25pdHVkZSBvZiB0aGUgc2hvcnRlc3QgYXhpcyBvZiBvdmVybGFwXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLm92ZXJsYXAgPSAwO1xuXG5cdFx0LyoqXG5cdFx0ICogQGRlc2MgVGhlIFggZGlyZWN0aW9uIG9mIHRoZSBzaG9ydGVzdCBheGlzIG9mIG92ZXJsYXBcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMub3ZlcmxhcF94ID0gMDtcblxuXHRcdC8qKlxuXHRcdCAqIEBkZXNjIFRoZSBZIGRpcmVjdGlvbiBvZiB0aGUgc2hvcnRlc3QgYXhpcyBvZiBvdmVybGFwXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLm92ZXJsYXBfeSA9IDA7XG5cdH1cbn07XG4iLCIvKipcbiAqIERldGVybWluZXMgaWYgdHdvIGJvZGllcyBhcmUgY29sbGlkaW5nIHVzaW5nIHRoZSBTZXBhcmF0aW5nIEF4aXMgVGhlb3JlbVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGEgVGhlIHNvdXJjZSBib2R5IHRvIHRlc3RcbiAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGIgVGhlIHRhcmdldCBib2R5IHRvIHRlc3QgYWdhaW5zdFxuICogQHBhcmFtIHtSZXN1bHR9IFtyZXN1bHQgPSBudWxsXSBBIFJlc3VsdCBvYmplY3Qgb24gd2hpY2ggdG8gc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbGxpc2lvblxuICogQHBhcmFtIHtCb29sZWFufSBbYWFiYiA9IHRydWVdIFNldCB0byBmYWxzZSB0byBza2lwIHRoZSBBQUJCIHRlc3QgKHVzZWZ1bCBpZiB5b3UgdXNlIHlvdXIgb3duIGNvbGxpc2lvbiBoZXVyaXN0aWMpXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU0FUKGEsIGIsIHJlc3VsdCA9IG51bGwsIGFhYmIgPSB0cnVlKSB7XG5cdGNvbnN0IGFfcG9seWdvbiA9IGEuX3BvbHlnb247XG5cdGNvbnN0IGJfcG9seWdvbiA9IGIuX3BvbHlnb247XG5cblx0bGV0IGNvbGxpc2lvbiA9IGZhbHNlO1xuXG5cdGlmKHJlc3VsdCkge1xuXHRcdHJlc3VsdC5hICAgICAgICAgPSBhO1xuXHRcdHJlc3VsdC5iICAgICAgICAgPSBiO1xuXHRcdHJlc3VsdC5hX2luX2IgICAgPSB0cnVlO1xuXHRcdHJlc3VsdC5iX2luX2EgICAgPSB0cnVlO1xuXHRcdHJlc3VsdC5vdmVybGFwICAgPSBudWxsO1xuXHRcdHJlc3VsdC5vdmVybGFwX3ggPSAwO1xuXHRcdHJlc3VsdC5vdmVybGFwX3kgPSAwO1xuXHR9XG5cblx0aWYoYV9wb2x5Z29uKSB7XG5cdFx0aWYoXG5cdFx0XHRhLl9kaXJ0eV9jb29yZHMgfHxcblx0XHRcdGEueCAgICAgICAhPT0gYS5feCB8fFxuXHRcdFx0YS55ICAgICAgICE9PSBhLl95IHx8XG5cdFx0XHRhLmFuZ2xlICAgIT09IGEuX2FuZ2xlIHx8XG5cdFx0XHRhLnNjYWxlX3ggIT09IGEuX3NjYWxlX3ggfHxcblx0XHRcdGEuc2NhbGVfeSAhPT0gYS5fc2NhbGVfeVxuXHRcdCkge1xuXHRcdFx0YS5fY2FsY3VsYXRlQ29vcmRzKCk7XG5cdFx0fVxuXHR9XG5cblx0aWYoYl9wb2x5Z29uKSB7XG5cdFx0aWYoXG5cdFx0XHRiLl9kaXJ0eV9jb29yZHMgfHxcblx0XHRcdGIueCAgICAgICAhPT0gYi5feCB8fFxuXHRcdFx0Yi55ICAgICAgICE9PSBiLl95IHx8XG5cdFx0XHRiLmFuZ2xlICAgIT09IGIuX2FuZ2xlIHx8XG5cdFx0XHRiLnNjYWxlX3ggIT09IGIuX3NjYWxlX3ggfHxcblx0XHRcdGIuc2NhbGVfeSAhPT0gYi5fc2NhbGVfeVxuXHRcdCkge1xuXHRcdFx0Yi5fY2FsY3VsYXRlQ29vcmRzKCk7XG5cdFx0fVxuXHR9XG5cblx0aWYoIWFhYmIgfHwgYWFiYkFBQkIoYSwgYikpIHtcblx0XHRpZihhX3BvbHlnb24gJiYgYS5fZGlydHlfbm9ybWFscykge1xuXHRcdFx0YS5fY2FsY3VsYXRlTm9ybWFscygpO1xuXHRcdH1cblxuXHRcdGlmKGJfcG9seWdvbiAmJiBiLl9kaXJ0eV9ub3JtYWxzKSB7XG5cdFx0XHRiLl9jYWxjdWxhdGVOb3JtYWxzKCk7XG5cdFx0fVxuXG5cdFx0Y29sbGlzaW9uID0gKFxuXHRcdFx0YV9wb2x5Z29uICYmIGJfcG9seWdvbiA/IHBvbHlnb25Qb2x5Z29uKGEsIGIsIHJlc3VsdCkgOlxuXHRcdFx0YV9wb2x5Z29uID8gcG9seWdvbkNpcmNsZShhLCBiLCByZXN1bHQsIGZhbHNlKSA6XG5cdFx0XHRiX3BvbHlnb24gPyBwb2x5Z29uQ2lyY2xlKGIsIGEsIHJlc3VsdCwgdHJ1ZSkgOlxuXHRcdFx0Y2lyY2xlQ2lyY2xlKGEsIGIsIHJlc3VsdClcblx0XHQpO1xuXHR9XG5cblx0aWYocmVzdWx0KSB7XG5cdFx0cmVzdWx0LmNvbGxpc2lvbiA9IGNvbGxpc2lvbjtcblx0fVxuXG5cdHJldHVybiBjb2xsaXNpb247XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdHdvIGJvZGllcycgYXhpcyBhbGlnbmVkIGJvdW5kaW5nIGJveGVzIGFyZSBjb2xsaWRpbmdcbiAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGEgVGhlIHNvdXJjZSBib2R5IHRvIHRlc3RcbiAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGIgVGhlIHRhcmdldCBib2R5IHRvIHRlc3QgYWdhaW5zdFxuICovXG5mdW5jdGlvbiBhYWJiQUFCQihhLCBiKSB7XG5cdGNvbnN0IGFfcG9seWdvbiA9IGEuX3BvbHlnb247XG5cdGNvbnN0IGFfeCAgICAgICA9IGFfcG9seWdvbiA/IDAgOiBhLng7XG5cdGNvbnN0IGFfeSAgICAgICA9IGFfcG9seWdvbiA/IDAgOiBhLnk7XG5cdGNvbnN0IGFfcmFkaXVzICA9IGFfcG9seWdvbiA/IDAgOiBhLnJhZGl1cyAqIGEuc2NhbGU7XG5cdGNvbnN0IGFfbWluX3ggICA9IGFfcG9seWdvbiA/IGEuX21pbl94IDogYV94IC0gYV9yYWRpdXM7XG5cdGNvbnN0IGFfbWluX3kgICA9IGFfcG9seWdvbiA/IGEuX21pbl95IDogYV95IC0gYV9yYWRpdXM7XG5cdGNvbnN0IGFfbWF4X3ggICA9IGFfcG9seWdvbiA/IGEuX21heF94IDogYV94ICsgYV9yYWRpdXM7XG5cdGNvbnN0IGFfbWF4X3kgICA9IGFfcG9seWdvbiA/IGEuX21heF95IDogYV95ICsgYV9yYWRpdXM7XG5cblx0Y29uc3QgYl9wb2x5Z29uID0gYi5fcG9seWdvbjtcblx0Y29uc3QgYl94ICAgICAgID0gYl9wb2x5Z29uID8gMCA6IGIueDtcblx0Y29uc3QgYl95ICAgICAgID0gYl9wb2x5Z29uID8gMCA6IGIueTtcblx0Y29uc3QgYl9yYWRpdXMgID0gYl9wb2x5Z29uID8gMCA6IGIucmFkaXVzICogYi5zY2FsZTtcblx0Y29uc3QgYl9taW5feCAgID0gYl9wb2x5Z29uID8gYi5fbWluX3ggOiBiX3ggLSBiX3JhZGl1cztcblx0Y29uc3QgYl9taW5feSAgID0gYl9wb2x5Z29uID8gYi5fbWluX3kgOiBiX3kgLSBiX3JhZGl1cztcblx0Y29uc3QgYl9tYXhfeCAgID0gYl9wb2x5Z29uID8gYi5fbWF4X3ggOiBiX3ggKyBiX3JhZGl1cztcblx0Y29uc3QgYl9tYXhfeSAgID0gYl9wb2x5Z29uID8gYi5fbWF4X3kgOiBiX3kgKyBiX3JhZGl1cztcblxuXHRyZXR1cm4gYV9taW5feCA8IGJfbWF4X3ggJiYgYV9taW5feSA8IGJfbWF4X3kgJiYgYV9tYXhfeCA+IGJfbWluX3ggJiYgYV9tYXhfeSA+IGJfbWluX3k7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0d28gcG9seWdvbnMgYXJlIGNvbGxpZGluZ1xuICogQHBhcmFtIHtQb2x5Z29ufSBhIFRoZSBzb3VyY2UgcG9seWdvbiB0byB0ZXN0XG4gKiBAcGFyYW0ge1BvbHlnb259IGIgVGhlIHRhcmdldCBwb2x5Z29uIHRvIHRlc3QgYWdhaW5zdFxuICogQHBhcmFtIHtSZXN1bHR9IFtyZXN1bHQgPSBudWxsXSBBIFJlc3VsdCBvYmplY3Qgb24gd2hpY2ggdG8gc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbGxpc2lvblxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHBvbHlnb25Qb2x5Z29uKGEsIGIsIHJlc3VsdCA9IG51bGwpIHtcblx0Y29uc3QgYV9jb3VudCA9IGEuX2Nvb3Jkcy5sZW5ndGg7XG5cdGNvbnN0IGJfY291bnQgPSBiLl9jb29yZHMubGVuZ3RoO1xuXG5cdC8vIEhhbmRsZSBwb2ludHMgc3BlY2lhbGx5XG5cdGlmKGFfY291bnQgPT09IDIgJiYgYl9jb3VudCA9PT0gMikge1xuXHRcdGNvbnN0IGFfY29vcmRzID0gYS5fY29vcmRzO1xuXHRcdGNvbnN0IGJfY29vcmRzID0gYi5fY29vcmRzO1xuXG5cdFx0aWYocmVzdWx0KSB7XG5cdFx0XHRyZXN1bHQub3ZlcmxhcCA9IDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFfY29vcmRzWzBdID09PSBiX2Nvb3Jkc1swXSAmJiBhX2Nvb3Jkc1sxXSA9PT0gYl9jb29yZHNbMV07XG5cdH1cblxuXHRjb25zdCBhX2Nvb3JkcyAgPSBhLl9jb29yZHM7XG5cdGNvbnN0IGJfY29vcmRzICA9IGIuX2Nvb3Jkcztcblx0Y29uc3QgYV9ub3JtYWxzID0gYS5fbm9ybWFscztcblx0Y29uc3QgYl9ub3JtYWxzID0gYi5fbm9ybWFscztcblxuXHRpZihhX2NvdW50ID4gMikge1xuXHRcdGZvcihsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgYV9jb3VudDsgaXggKz0gMiwgaXkgKz0gMikge1xuXHRcdFx0aWYoc2VwYXJhdGluZ0F4aXMoYV9jb29yZHMsIGJfY29vcmRzLCBhX25vcm1hbHNbaXhdLCBhX25vcm1hbHNbaXldLCByZXN1bHQpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZihiX2NvdW50ID4gMikge1xuXHRcdGZvcihsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgYl9jb3VudDsgaXggKz0gMiwgaXkgKz0gMikge1xuXHRcdFx0aWYoc2VwYXJhdGluZ0F4aXMoYV9jb29yZHMsIGJfY29vcmRzLCBiX25vcm1hbHNbaXhdLCBiX25vcm1hbHNbaXldLCByZXN1bHQpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgcG9seWdvbiBhbmQgYSBjaXJjbGUgYXJlIGNvbGxpZGluZ1xuICogQHBhcmFtIHtQb2x5Z29ufSBhIFRoZSBzb3VyY2UgcG9seWdvbiB0byB0ZXN0XG4gKiBAcGFyYW0ge0NpcmNsZX0gYiBUaGUgdGFyZ2V0IGNpcmNsZSB0byB0ZXN0IGFnYWluc3RcbiAqIEBwYXJhbSB7UmVzdWx0fSBbcmVzdWx0ID0gbnVsbF0gQSBSZXN1bHQgb2JqZWN0IG9uIHdoaWNoIHRvIHN0b3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb2xsaXNpb25cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3JldmVyc2UgPSBmYWxzZV0gU2V0IHRvIHRydWUgdG8gcmV2ZXJzZSBhIGFuZCBiIGluIHRoZSByZXN1bHQgcGFyYW1ldGVyIHdoZW4gdGVzdGluZyBjaXJjbGUtPnBvbHlnb24gaW5zdGVhZCBvZiBwb2x5Z29uLT5jaXJjbGVcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBwb2x5Z29uQ2lyY2xlKGEsIGIsIHJlc3VsdCA9IG51bGwsIHJldmVyc2UgPSBmYWxzZSkge1xuXHRjb25zdCBhX2Nvb3JkcyAgICAgICA9IGEuX2Nvb3Jkcztcblx0Y29uc3QgYV9lZGdlcyAgICAgICAgPSBhLl9lZGdlcztcblx0Y29uc3QgYV9ub3JtYWxzICAgICAgPSBhLl9ub3JtYWxzO1xuXHRjb25zdCBiX3ggICAgICAgICAgICA9IGIueDtcblx0Y29uc3QgYl95ICAgICAgICAgICAgPSBiLnk7XG5cdGNvbnN0IGJfcmFkaXVzICAgICAgID0gYi5yYWRpdXMgKiBiLnNjYWxlO1xuXHRjb25zdCBiX3JhZGl1czIgICAgICA9IGJfcmFkaXVzICogMjtcblx0Y29uc3QgcmFkaXVzX3NxdWFyZWQgPSBiX3JhZGl1cyAqIGJfcmFkaXVzO1xuXHRjb25zdCBjb3VudCAgICAgICAgICA9IGFfY29vcmRzLmxlbmd0aDtcblxuXHRsZXQgYV9pbl9iICAgID0gdHJ1ZTtcblx0bGV0IGJfaW5fYSAgICA9IHRydWU7XG5cdGxldCBvdmVybGFwICAgPSBudWxsO1xuXHRsZXQgb3ZlcmxhcF94ID0gMDtcblx0bGV0IG92ZXJsYXBfeSA9IDA7XG5cblx0Ly8gSGFuZGxlIHBvaW50cyBzcGVjaWFsbHlcblx0aWYoY291bnQgPT09IDIpIHtcblx0XHRjb25zdCBjb29yZF94ICAgICAgICA9IGJfeCAtIGFfY29vcmRzWzBdO1xuXHRcdGNvbnN0IGNvb3JkX3kgICAgICAgID0gYl95IC0gYV9jb29yZHNbMV07XG5cdFx0Y29uc3QgbGVuZ3RoX3NxdWFyZWQgPSBjb29yZF94ICogY29vcmRfeCArIGNvb3JkX3kgKiBjb29yZF95O1xuXG5cdFx0aWYobGVuZ3RoX3NxdWFyZWQgPiByYWRpdXNfc3F1YXJlZCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmKHJlc3VsdCkge1xuXHRcdFx0Y29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KGxlbmd0aF9zcXVhcmVkKTtcblxuXHRcdFx0b3ZlcmxhcCAgID0gYl9yYWRpdXMgLSBsZW5ndGg7XG5cdFx0XHRvdmVybGFwX3ggPSBjb29yZF94IC8gbGVuZ3RoO1xuXHRcdFx0b3ZlcmxhcF95ID0gY29vcmRfeSAvIGxlbmd0aDtcblx0XHRcdGJfaW5fYSAgICA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXHRlbHNlIHtcblx0XHRmb3IobGV0IGl4ID0gMCwgaXkgPSAxOyBpeCA8IGNvdW50OyBpeCArPSAyLCBpeSArPSAyKSB7XG5cdFx0XHRjb25zdCBjb29yZF94ID0gYl94IC0gYV9jb29yZHNbaXhdO1xuXHRcdFx0Y29uc3QgY29vcmRfeSA9IGJfeSAtIGFfY29vcmRzW2l5XTtcblx0XHRcdGNvbnN0IGVkZ2VfeCAgPSBhX2VkZ2VzW2l4XTtcblx0XHRcdGNvbnN0IGVkZ2VfeSAgPSBhX2VkZ2VzW2l5XTtcblx0XHRcdGNvbnN0IGRvdCAgICAgPSBjb29yZF94ICogZWRnZV94ICsgY29vcmRfeSAqIGVkZ2VfeTtcblx0XHRcdGNvbnN0IHJlZ2lvbiAgPSBkb3QgPCAwID8gLTEgOiBkb3QgPiBlZGdlX3ggKiBlZGdlX3ggKyBlZGdlX3kgKiBlZGdlX3kgPyAxIDogMDtcblxuXHRcdFx0bGV0IHRtcF9vdmVybGFwcGluZyA9IGZhbHNlO1xuXHRcdFx0bGV0IHRtcF9vdmVybGFwICAgICA9IDA7XG5cdFx0XHRsZXQgdG1wX292ZXJsYXBfeCAgID0gMDtcblx0XHRcdGxldCB0bXBfb3ZlcmxhcF95ICAgPSAwO1xuXG5cdFx0XHRpZihyZXN1bHQgJiYgYV9pbl9iICYmIGNvb3JkX3ggKiBjb29yZF94ICsgY29vcmRfeSAqIGNvb3JkX3kgPiByYWRpdXNfc3F1YXJlZCkge1xuXHRcdFx0XHRhX2luX2IgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYocmVnaW9uKSB7XG5cdFx0XHRcdGNvbnN0IGxlZnQgICAgID0gcmVnaW9uID09PSAtMTtcblx0XHRcdFx0Y29uc3Qgb3RoZXJfeCAgPSBsZWZ0ID8gKGl4ID09PSAwID8gY291bnQgLSAyIDogaXggLSAyKSA6IChpeCA9PT0gY291bnQgLSAyID8gMCA6IGl4ICsgMik7XG5cdFx0XHRcdGNvbnN0IG90aGVyX3kgID0gb3RoZXJfeCArIDE7XG5cdFx0XHRcdGNvbnN0IGNvb3JkMl94ID0gYl94IC0gYV9jb29yZHNbb3RoZXJfeF07XG5cdFx0XHRcdGNvbnN0IGNvb3JkMl95ID0gYl95IC0gYV9jb29yZHNbb3RoZXJfeV07XG5cdFx0XHRcdGNvbnN0IGVkZ2UyX3ggID0gYV9lZGdlc1tvdGhlcl94XTtcblx0XHRcdFx0Y29uc3QgZWRnZTJfeSAgPSBhX2VkZ2VzW290aGVyX3ldO1xuXHRcdFx0XHRjb25zdCBkb3QyICAgICA9IGNvb3JkMl94ICogZWRnZTJfeCArIGNvb3JkMl95ICogZWRnZTJfeTtcblx0XHRcdFx0Y29uc3QgcmVnaW9uMiAgPSBkb3QyIDwgMCA/IC0xIDogZG90MiA+IGVkZ2UyX3ggKiBlZGdlMl94ICsgZWRnZTJfeSAqIGVkZ2UyX3kgPyAxIDogMDtcblxuXHRcdFx0XHRpZihyZWdpb24yID09PSAtcmVnaW9uKSB7XG5cdFx0XHRcdFx0Y29uc3QgdGFyZ2V0X3ggICAgICAgPSBsZWZ0ID8gY29vcmRfeCA6IGNvb3JkMl94O1xuXHRcdFx0XHRcdGNvbnN0IHRhcmdldF95ICAgICAgID0gbGVmdCA/IGNvb3JkX3kgOiBjb29yZDJfeTtcblx0XHRcdFx0XHRjb25zdCBsZW5ndGhfc3F1YXJlZCA9IHRhcmdldF94ICogdGFyZ2V0X3ggKyB0YXJnZXRfeSAqIHRhcmdldF95O1xuXG5cdFx0XHRcdFx0aWYobGVuZ3RoX3NxdWFyZWQgPiByYWRpdXNfc3F1YXJlZCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKHJlc3VsdCkge1xuXHRcdFx0XHRcdFx0Y29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KGxlbmd0aF9zcXVhcmVkKTtcblxuXHRcdFx0XHRcdFx0dG1wX292ZXJsYXBwaW5nID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHRtcF9vdmVybGFwICAgICA9IGJfcmFkaXVzIC0gbGVuZ3RoO1xuXHRcdFx0XHRcdFx0dG1wX292ZXJsYXBfeCAgID0gdGFyZ2V0X3ggLyBsZW5ndGg7XG5cdFx0XHRcdFx0XHR0bXBfb3ZlcmxhcF95ICAgPSB0YXJnZXRfeSAvIGxlbmd0aDtcblx0XHRcdFx0XHRcdGJfaW5fYSAgICAgICAgICA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGNvbnN0IG5vcm1hbF94ICAgICAgICA9IGFfbm9ybWFsc1tpeF07XG5cdFx0XHRcdGNvbnN0IG5vcm1hbF95ICAgICAgICA9IGFfbm9ybWFsc1tpeV07XG5cdFx0XHRcdGNvbnN0IGxlbmd0aCAgICAgICAgICA9IGNvb3JkX3ggKiBub3JtYWxfeCArIGNvb3JkX3kgKiBub3JtYWxfeTtcblx0XHRcdFx0Y29uc3QgYWJzb2x1dGVfbGVuZ3RoID0gbGVuZ3RoIDwgMCA/IC1sZW5ndGggOiBsZW5ndGg7XG5cblx0XHRcdFx0aWYobGVuZ3RoID4gMCAmJiBhYnNvbHV0ZV9sZW5ndGggPiBiX3JhZGl1cykge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKHJlc3VsdCkge1xuXHRcdFx0XHRcdHRtcF9vdmVybGFwcGluZyA9IHRydWU7XG5cdFx0XHRcdFx0dG1wX292ZXJsYXAgICAgID0gYl9yYWRpdXMgLSBsZW5ndGg7XG5cdFx0XHRcdFx0dG1wX292ZXJsYXBfeCAgID0gbm9ybWFsX3g7XG5cdFx0XHRcdFx0dG1wX292ZXJsYXBfeSAgID0gbm9ybWFsX3k7XG5cblx0XHRcdFx0XHRpZihiX2luX2EgJiYgbGVuZ3RoID49IDAgfHwgdG1wX292ZXJsYXAgPCBiX3JhZGl1czIpIHtcblx0XHRcdFx0XHRcdGJfaW5fYSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZih0bXBfb3ZlcmxhcHBpbmcgJiYgKG92ZXJsYXAgPT09IG51bGwgfHwgb3ZlcmxhcCA+IHRtcF9vdmVybGFwKSkge1xuXHRcdFx0XHRvdmVybGFwICAgPSB0bXBfb3ZlcmxhcDtcblx0XHRcdFx0b3ZlcmxhcF94ID0gdG1wX292ZXJsYXBfeDtcblx0XHRcdFx0b3ZlcmxhcF95ID0gdG1wX292ZXJsYXBfeTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZihyZXN1bHQpIHtcblx0XHRyZXN1bHQuYV9pbl9iICAgID0gcmV2ZXJzZSA/IGJfaW5fYSA6IGFfaW5fYjtcblx0XHRyZXN1bHQuYl9pbl9hICAgID0gcmV2ZXJzZSA/IGFfaW5fYiA6IGJfaW5fYTtcblx0XHRyZXN1bHQub3ZlcmxhcCAgID0gb3ZlcmxhcDtcblx0XHRyZXN1bHQub3ZlcmxhcF94ID0gcmV2ZXJzZSA/IC1vdmVybGFwX3ggOiBvdmVybGFwX3g7XG5cdFx0cmVzdWx0Lm92ZXJsYXBfeSA9IHJldmVyc2UgPyAtb3ZlcmxhcF95IDogb3ZlcmxhcF95O1xuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0d28gY2lyY2xlcyBhcmUgY29sbGlkaW5nXG4gKiBAcGFyYW0ge0NpcmNsZX0gYSBUaGUgc291cmNlIGNpcmNsZSB0byB0ZXN0XG4gKiBAcGFyYW0ge0NpcmNsZX0gYiBUaGUgdGFyZ2V0IGNpcmNsZSB0byB0ZXN0IGFnYWluc3RcbiAqIEBwYXJhbSB7UmVzdWx0fSBbcmVzdWx0ID0gbnVsbF0gQSBSZXN1bHQgb2JqZWN0IG9uIHdoaWNoIHRvIHN0b3JlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb2xsaXNpb25cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBjaXJjbGVDaXJjbGUoYSwgYiwgcmVzdWx0ID0gbnVsbCkge1xuXHRjb25zdCBhX3JhZGl1cyAgICAgICA9IGEucmFkaXVzICogYS5zY2FsZTtcblx0Y29uc3QgYl9yYWRpdXMgICAgICAgPSBiLnJhZGl1cyAqIGIuc2NhbGU7XG5cdGNvbnN0IGRpZmZlcmVuY2VfeCAgID0gYi54IC0gYS54O1xuXHRjb25zdCBkaWZmZXJlbmNlX3kgICA9IGIueSAtIGEueTtcblx0Y29uc3QgcmFkaXVzX3N1bSAgICAgPSBhX3JhZGl1cyArIGJfcmFkaXVzO1xuXHRjb25zdCBsZW5ndGhfc3F1YXJlZCA9IGRpZmZlcmVuY2VfeCAqIGRpZmZlcmVuY2VfeCArIGRpZmZlcmVuY2VfeSAqIGRpZmZlcmVuY2VfeTtcblxuXHRpZihsZW5ndGhfc3F1YXJlZCA+IHJhZGl1c19zdW0gKiByYWRpdXNfc3VtKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYocmVzdWx0KSB7XG5cdFx0Y29uc3QgbGVuZ3RoID0gTWF0aC5zcXJ0KGxlbmd0aF9zcXVhcmVkKTtcblxuXHRcdHJlc3VsdC5hX2luX2IgICAgPSBhX3JhZGl1cyA8PSBiX3JhZGl1cyAmJiBsZW5ndGggPD0gYl9yYWRpdXMgLSBhX3JhZGl1cztcblx0XHRyZXN1bHQuYl9pbl9hICAgID0gYl9yYWRpdXMgPD0gYV9yYWRpdXMgJiYgbGVuZ3RoIDw9IGFfcmFkaXVzIC0gYl9yYWRpdXM7XG5cdFx0cmVzdWx0Lm92ZXJsYXAgICA9IHJhZGl1c19zdW0gLSBsZW5ndGg7XG5cdFx0cmVzdWx0Lm92ZXJsYXBfeCA9IGRpZmZlcmVuY2VfeCAvIGxlbmd0aDtcblx0XHRyZXN1bHQub3ZlcmxhcF95ID0gZGlmZmVyZW5jZV95IC8gbGVuZ3RoO1xuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0d28gcG9seWdvbnMgYXJlIHNlcGFyYXRlZCBieSBhbiBheGlzXG4gKiBAcGFyYW0ge0FycmF5PE51bWJlcltdPn0gYV9jb29yZHMgVGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2x5Z29uIHRvIHRlc3RcbiAqIEBwYXJhbSB7QXJyYXk8TnVtYmVyW10+fSBiX2Nvb3JkcyBUaGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvbHlnb24gdG8gdGVzdCBhZ2FpbnN0XG4gKiBAcGFyYW0ge051bWJlcn0geCBUaGUgWCBkaXJlY3Rpb24gb2YgdGhlIGF4aXNcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFRoZSBZIGRpcmVjdGlvbiBvZiB0aGUgYXhpc1xuICogQHBhcmFtIHtSZXN1bHR9IFtyZXN1bHQgPSBudWxsXSBBIFJlc3VsdCBvYmplY3Qgb24gd2hpY2ggdG8gc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbGxpc2lvblxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHNlcGFyYXRpbmdBeGlzKGFfY29vcmRzLCBiX2Nvb3JkcywgeCwgeSwgcmVzdWx0ID0gbnVsbCkge1xuXHRjb25zdCBhX2NvdW50ID0gYV9jb29yZHMubGVuZ3RoO1xuXHRjb25zdCBiX2NvdW50ID0gYl9jb29yZHMubGVuZ3RoO1xuXG5cdGlmKCFhX2NvdW50IHx8ICFiX2NvdW50KSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRsZXQgYV9zdGFydCA9IG51bGw7XG5cdGxldCBhX2VuZCAgID0gbnVsbDtcblx0bGV0IGJfc3RhcnQgPSBudWxsO1xuXHRsZXQgYl9lbmQgICA9IG51bGw7XG5cblx0Zm9yKGxldCBpeCA9IDAsIGl5ID0gMTsgaXggPCBhX2NvdW50OyBpeCArPSAyLCBpeSArPSAyKSB7XG5cdFx0Y29uc3QgZG90ID0gYV9jb29yZHNbaXhdICogeCArIGFfY29vcmRzW2l5XSAqIHk7XG5cblx0XHRpZihhX3N0YXJ0ID09PSBudWxsIHx8IGFfc3RhcnQgPiBkb3QpIHtcblx0XHRcdGFfc3RhcnQgPSBkb3Q7XG5cdFx0fVxuXG5cdFx0aWYoYV9lbmQgPT09IG51bGwgfHwgYV9lbmQgPCBkb3QpIHtcblx0XHRcdGFfZW5kID0gZG90O1xuXHRcdH1cblx0fVxuXG5cdGZvcihsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgYl9jb3VudDsgaXggKz0gMiwgaXkgKz0gMikge1xuXHRcdGNvbnN0IGRvdCA9IGJfY29vcmRzW2l4XSAqIHggKyBiX2Nvb3Jkc1tpeV0gKiB5O1xuXG5cdFx0aWYoYl9zdGFydCA9PT0gbnVsbCB8fCBiX3N0YXJ0ID4gZG90KSB7XG5cdFx0XHRiX3N0YXJ0ID0gZG90O1xuXHRcdH1cblxuXHRcdGlmKGJfZW5kID09PSBudWxsIHx8IGJfZW5kIDwgZG90KSB7XG5cdFx0XHRiX2VuZCA9IGRvdDtcblx0XHR9XG5cdH1cblxuXHRpZihhX3N0YXJ0ID4gYl9lbmQgfHwgYV9lbmQgPCBiX3N0YXJ0KSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZihyZXN1bHQpIHtcblx0XHRsZXQgb3ZlcmxhcCA9IDA7XG5cblx0XHRpZihhX3N0YXJ0IDwgYl9zdGFydCkge1xuXHRcdFx0cmVzdWx0LmFfaW5fYiA9IGZhbHNlO1xuXG5cdFx0XHRpZihhX2VuZCA8IGJfZW5kKSB7XG5cdFx0XHRcdG92ZXJsYXAgICAgICAgPSBhX2VuZCAtIGJfc3RhcnQ7XG5cdFx0XHRcdHJlc3VsdC5iX2luX2EgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRjb25zdCBvcHRpb24xID0gYV9lbmQgLSBiX3N0YXJ0O1xuXHRcdFx0XHRjb25zdCBvcHRpb24yID0gYl9lbmQgLSBhX3N0YXJ0O1xuXG5cdFx0XHRcdG92ZXJsYXAgPSBvcHRpb24xIDwgb3B0aW9uMiA/IG9wdGlvbjEgOiAtb3B0aW9uMjtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRyZXN1bHQuYl9pbl9hID0gZmFsc2U7XG5cblx0XHRcdGlmKGFfZW5kID4gYl9lbmQpIHtcblx0XHRcdFx0b3ZlcmxhcCAgICAgICA9IGFfc3RhcnQgLSBiX2VuZDtcblx0XHRcdFx0cmVzdWx0LmFfaW5fYiA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGNvbnN0IG9wdGlvbjEgPSBhX2VuZCAtIGJfc3RhcnQ7XG5cdFx0XHRcdGNvbnN0IG9wdGlvbjIgPSBiX2VuZCAtIGFfc3RhcnQ7XG5cblx0XHRcdFx0b3ZlcmxhcCA9IG9wdGlvbjEgPCBvcHRpb24yID8gb3B0aW9uMSA6IC1vcHRpb24yO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IGN1cnJlbnRfb3ZlcmxhcCAgPSByZXN1bHQub3ZlcmxhcDtcblx0XHRjb25zdCBhYnNvbHV0ZV9vdmVybGFwID0gb3ZlcmxhcCA8IDAgPyAtb3ZlcmxhcCA6IG92ZXJsYXA7XG5cblx0XHRpZihjdXJyZW50X292ZXJsYXAgPT09IG51bGwgfHwgY3VycmVudF9vdmVybGFwID4gYWJzb2x1dGVfb3ZlcmxhcCkge1xuXHRcdFx0Y29uc3Qgc2lnbiA9IG92ZXJsYXAgPCAwID8gLTEgOiAxO1xuXG5cdFx0XHRyZXN1bHQub3ZlcmxhcCAgID0gYWJzb2x1dGVfb3ZlcmxhcDtcblx0XHRcdHJlc3VsdC5vdmVybGFwX3ggPSB4ICogc2lnbjtcblx0XHRcdHJlc3VsdC5vdmVybGFwX3kgPSB5ICogc2lnbjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgUmVzdWx0IGZyb20gJy4vUmVzdWx0Lm1qcyc7XG5pbXBvcnQgU0FUICAgIGZyb20gJy4vU0FULm1qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZm9yIGJvZGllcyB1c2VkIHRvIGRldGVjdCBjb2xsaXNpb25zXG4gKiBAY2xhc3NcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9keSB7XG5cdC8qKlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt4ID0gMF0gVGhlIHN0YXJ0aW5nIFggY29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3kgPSAwXSBUaGUgc3RhcnRpbmcgWSBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKi9cblx0Y29uc3RydWN0b3IoeCA9IDAsIHkgPSAwLCBwYWRkaW5nID0gMCkge1xuXHRcdC8qKlxuXHRcdCAqIEBkZXNjIFRoZSBYIGNvb3JkaW5hdGUgb2YgdGhlIGJvZHlcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMueCA9IHg7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUaGUgWSBjb29yZGluYXRlIG9mIHRoZSBib2R5XG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0LyoqXG5cdFx0ICogQGRlc2MgVGhlIGFtb3VudCB0byBwYWQgdGhlIGJvdW5kaW5nIHZvbHVtZSB3aGVuIHRlc3RpbmcgZm9yIHBvdGVudGlhbCBjb2xsaXNpb25zXG5cdFx0ICogQHR5cGUge051bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLnBhZGRpbmcgPSBwYWRkaW5nO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fY2lyY2xlID0gZmFsc2U7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9wb2x5Z29uID0gZmFsc2U7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9wb2ludCA9IGZhbHNlO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoID0gbnVsbDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2J2aF9wYXJlbnQgPSBudWxsO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX2JyYW5jaCA9IGZhbHNlO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX3BhZGRpbmcgPSBwYWRkaW5nO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX21pbl94ID0gMDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2J2aF9taW5feSA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmhfbWF4X3ggPSAwO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYnZoX21heF95ID0gMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIGlmIHRoZSBib2R5IGlzIGNvbGxpZGluZyB3aXRoIGFub3RoZXIgYm9keVxuXHQgKiBAcGFyYW0ge0NpcmNsZXxQb2x5Z29ufFBvaW50fSB0YXJnZXQgVGhlIHRhcmdldCBib2R5IHRvIHRlc3QgYWdhaW5zdFxuXHQgKiBAcGFyYW0ge1Jlc3VsdH0gW3Jlc3VsdCA9IG51bGxdIEEgUmVzdWx0IG9iamVjdCBvbiB3aGljaCB0byBzdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29sbGlzaW9uXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FhYmIgPSB0cnVlXSBTZXQgdG8gZmFsc2UgdG8gc2tpcCB0aGUgQUFCQiB0ZXN0ICh1c2VmdWwgaWYgeW91IHVzZSB5b3VyIG93biBwb3RlbnRpYWwgY29sbGlzaW9uIGhldXJpc3RpYylcblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqL1xuXHRjb2xsaWRlcyh0YXJnZXQsIHJlc3VsdCA9IG51bGwsIGFhYmIgPSB0cnVlKSB7XG5cdFx0cmV0dXJuIFNBVCh0aGlzLCB0YXJnZXQsIHJlc3VsdCwgYWFiYik7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhIGxpc3Qgb2YgcG90ZW50aWFsIGNvbGxpc2lvbnNcblx0ICogQHJldHVybnMge0FycmF5PEJvZHk+fVxuXHQgKi9cblx0cG90ZW50aWFscygpIHtcblx0XHRjb25zdCBidmggPSB0aGlzLl9idmg7XG5cblx0XHRpZihidmggPT09IG51bGwpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignQm9keSBkb2VzIG5vdCBiZWxvbmcgdG8gYSBjb2xsaXNpb24gc3lzdGVtJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJ2aC5wb3RlbnRpYWxzKHRoaXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgdGhlIGJvZHkgZnJvbSBpdHMgY3VycmVudCBjb2xsaXNpb24gc3lzdGVtXG5cdCAqL1xuXHRyZW1vdmUoKSB7XG5cdFx0Y29uc3QgYnZoID0gdGhpcy5fYnZoO1xuXG5cdFx0aWYoYnZoKSB7XG5cdFx0XHRidmgucmVtb3ZlKHRoaXMsIGZhbHNlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHtAbGluayBSZXN1bHR9IHVzZWQgdG8gY29sbGVjdCB0aGUgZGV0YWlsZWQgcmVzdWx0cyBvZiBhIGNvbGxpc2lvbiB0ZXN0XG5cdCAqL1xuXHRjcmVhdGVSZXN1bHQoKSB7XG5cdFx0cmV0dXJuIG5ldyBSZXN1bHQoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgUmVzdWx0IHVzZWQgdG8gY29sbGVjdCB0aGUgZGV0YWlsZWQgcmVzdWx0cyBvZiBhIGNvbGxpc2lvbiB0ZXN0XG5cdCAqL1xuXHRzdGF0aWMgY3JlYXRlUmVzdWx0KCkge1xuXHRcdHJldHVybiBuZXcgUmVzdWx0KCk7XG5cdH1cbn07XG4iLCJpbXBvcnQgQm9keSBmcm9tICcuL0JvZHkubWpzJztcblxuLyoqXG4gKiBBIGNpcmNsZSB1c2VkIHRvIGRldGVjdCBjb2xsaXNpb25zXG4gKiBAY2xhc3NcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2lyY2xlIGV4dGVuZHMgQm9keSB7XG5cdC8qKlxuXHQgKiBAY29uc3RydWN0b3Jcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt4ID0gMF0gVGhlIHN0YXJ0aW5nIFggY29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3kgPSAwXSBUaGUgc3RhcnRpbmcgWSBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcmFkaXVzID0gMF0gVGhlIHJhZGl1c1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlID0gMV0gVGhlIHNjYWxlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKi9cblx0Y29uc3RydWN0b3IoeCA9IDAsIHkgPSAwLCByYWRpdXMgPSAwLCBzY2FsZSA9IDEsIHBhZGRpbmcgPSAwKSB7XG5cdFx0c3VwZXIoeCwgeSwgcGFkZGluZyk7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzY1xuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5yYWRpdXMgPSByYWRpdXM7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzY1xuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5zY2FsZSA9IHNjYWxlO1xuXHR9XG5cblx0LyoqXG5cdCAqIERyYXdzIHRoZSBjaXJjbGUgdG8gYSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQncyBjdXJyZW50IHBhdGhcblx0ICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gYWRkIHRoZSBhcmMgdG9cblx0ICovXG5cdGRyYXcoY29udGV4dCkge1xuXHRcdGNvbnN0IHggICAgICA9IHRoaXMueDtcblx0XHRjb25zdCB5ICAgICAgPSB0aGlzLnk7XG5cdFx0Y29uc3QgcmFkaXVzID0gdGhpcy5yYWRpdXMgKiB0aGlzLnNjYWxlO1xuXG5cdFx0Y29udGV4dC5tb3ZlVG8oeCArIHJhZGl1cywgeSk7XG5cdFx0Y29udGV4dC5hcmMoeCwgeSwgcmFkaXVzLCAwLCBNYXRoLlBJICogMik7XG5cdH1cbn07XG4iLCJpbXBvcnQgQm9keSBmcm9tICcuL0JvZHkubWpzJztcblxuLyoqXG4gKiBBIHBvbHlnb24gdXNlZCB0byBkZXRlY3QgY29sbGlzaW9uc1xuICogQGNsYXNzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvbHlnb24gZXh0ZW5kcyBCb2R5IHtcblx0LyoqXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3ggPSAwXSBUaGUgc3RhcnRpbmcgWCBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbeSA9IDBdIFRoZSBzdGFydGluZyBZIGNvb3JkaW5hdGVcblx0ICogQHBhcmFtIHtBcnJheTxOdW1iZXJbXT59IFtwb2ludHMgPSBbXV0gQW4gYXJyYXkgb2YgY29vcmRpbmF0ZSBwYWlycyBtYWtpbmcgdXAgdGhlIHBvbHlnb24gLSBbW3gxLCB5MV0sIFt4MiwgeTJdLCAuLi5dXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbYW5nbGUgPSAwXSBUaGUgc3RhcnRpbmcgcm90YXRpb24gaW4gcmFkaWFuc1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlX3ggPSAxXSBUaGUgc3RhcnRpbmcgc2NhbGUgYWxvbmcgdGhlIFggYXhpc1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlX3kgPSAxXSBUaGUgc3RhcnRpbmcgc2NhbGUgbG9uZyB0aGUgWSBheGlzXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKi9cblx0Y29uc3RydWN0b3IoeCA9IDAsIHkgPSAwLCBwb2ludHMgPSBbXSwgYW5nbGUgPSAwLCBzY2FsZV94ID0gMSwgc2NhbGVfeSA9IDEsIHBhZGRpbmcgPSAwKSB7XG5cdFx0c3VwZXIoeCwgeSwgcGFkZGluZyk7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUaGUgYW5nbGUgb2YgdGhlIGJvZHkgaW4gcmFkaWFuc1xuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5hbmdsZSA9IGFuZ2xlO1xuXG5cdFx0LyoqXG5cdFx0ICogQGRlc2MgVGhlIHNjYWxlIG9mIHRoZSBib2R5IGFsb25nIHRoZSBYIGF4aXNcblx0XHQgKiBAdHlwZSB7TnVtYmVyfVxuXHRcdCAqL1xuXHRcdHRoaXMuc2NhbGVfeCA9IHNjYWxlX3g7XG5cblx0XHQvKipcblx0XHQgKiBAZGVzYyBUaGUgc2NhbGUgb2YgdGhlIGJvZHkgYWxvbmcgdGhlIFkgYXhpc1xuXHRcdCAqIEB0eXBlIHtOdW1iZXJ9XG5cdFx0ICovXG5cdFx0dGhpcy5zY2FsZV95ID0gc2NhbGVfeTtcblxuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fcG9seWdvbiA9IHRydWU7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl94ID0geDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX3kgPSB5O1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fYW5nbGUgPSBhbmdsZTtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX3NjYWxlX3ggPSBzY2FsZV94O1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fc2NhbGVfeSA9IHNjYWxlX3k7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9taW5feCA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9taW5feSA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9tYXhfeCA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9tYXhfeSA9IDA7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9wb2ludHMgPSBudWxsO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fY29vcmRzID0gbnVsbDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2VkZ2VzID0gbnVsbDtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX25vcm1hbHMgPSBudWxsO1xuXG5cdFx0LyoqIEBwcml2YXRlICovXG5cdFx0dGhpcy5fZGlydHlfY29vcmRzID0gdHJ1ZTtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqL1xuXHRcdHRoaXMuX2RpcnR5X25vcm1hbHMgPSB0cnVlO1xuXG5cdFx0UG9seWdvbi5wcm90b3R5cGUuc2V0UG9pbnRzLmNhbGwodGhpcywgcG9pbnRzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEcmF3cyB0aGUgcG9seWdvbiB0byBhIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCdzIGN1cnJlbnQgcGF0aFxuXHQgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY29udGV4dCBUaGUgY29udGV4dCB0byBhZGQgdGhlIHNoYXBlIHRvXG5cdCAqL1xuXHRkcmF3KGNvbnRleHQpIHtcblx0XHRpZihcblx0XHRcdHRoaXMuX2RpcnR5X2Nvb3JkcyB8fFxuXHRcdFx0dGhpcy54ICAgICAgICE9PSB0aGlzLl94IHx8XG5cdFx0XHR0aGlzLnkgICAgICAgIT09IHRoaXMuX3kgfHxcblx0XHRcdHRoaXMuYW5nbGUgICAhPT0gdGhpcy5fYW5nbGUgfHxcblx0XHRcdHRoaXMuc2NhbGVfeCAhPT0gdGhpcy5fc2NhbGVfeCB8fFxuXHRcdFx0dGhpcy5zY2FsZV95ICE9PSB0aGlzLl9zY2FsZV95XG5cdFx0KSB7XG5cdFx0XHR0aGlzLl9jYWxjdWxhdGVDb29yZHMoKTtcblx0XHR9XG5cblx0XHRjb25zdCBjb29yZHMgPSB0aGlzLl9jb29yZHM7XG5cblx0XHRpZihjb29yZHMubGVuZ3RoID09PSAyKSB7XG5cdFx0XHRjb250ZXh0Lm1vdmVUbyhjb29yZHNbMF0sIGNvb3Jkc1sxXSk7XG5cdFx0XHRjb250ZXh0LmFyYyhjb29yZHNbMF0sIGNvb3Jkc1sxXSwgMSwgMCwgTWF0aC5QSSAqIDIpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGNvbnRleHQubW92ZVRvKGNvb3Jkc1swXSwgY29vcmRzWzFdKTtcblxuXHRcdFx0Zm9yKGxldCBpID0gMjsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkgKz0gMikge1xuXHRcdFx0XHRjb250ZXh0LmxpbmVUbyhjb29yZHNbaV0sIGNvb3Jkc1tpICsgMV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZihjb29yZHMubGVuZ3RoID4gNCkge1xuXHRcdFx0XHRjb250ZXh0LmxpbmVUbyhjb29yZHNbMF0sIGNvb3Jkc1sxXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIHBvaW50cyBtYWtpbmcgdXAgdGhlIHBvbHlnb24uIEl0J3MgaW1wb3J0YW50IHRvIHVzZSB0aGlzIGZ1bmN0aW9uIHdoZW4gY2hhbmdpbmcgdGhlIHBvbHlnb24ncyBzaGFwZSB0byBlbnN1cmUgaW50ZXJuYWwgZGF0YSBpcyBhbHNvIHVwZGF0ZWQuXG5cdCAqIEBwYXJhbSB7QXJyYXk8TnVtYmVyW10+fSBuZXdfcG9pbnRzIEFuIGFycmF5IG9mIGNvb3JkaW5hdGUgcGFpcnMgbWFraW5nIHVwIHRoZSBwb2x5Z29uIC0gW1t4MSwgeTFdLCBbeDIsIHkyXSwgLi4uXVxuXHQgKi9cblx0c2V0UG9pbnRzKG5ld19wb2ludHMpIHtcblx0XHRjb25zdCBjb3VudCA9IG5ld19wb2ludHMubGVuZ3RoO1xuXG5cdFx0dGhpcy5fcG9pbnRzICA9IG5ldyBGbG9hdDY0QXJyYXkoY291bnQgKiAyKTtcblx0XHR0aGlzLl9jb29yZHMgID0gbmV3IEZsb2F0NjRBcnJheShjb3VudCAqIDIpO1xuXHRcdHRoaXMuX2VkZ2VzICAgPSBuZXcgRmxvYXQ2NEFycmF5KGNvdW50ICogMik7XG5cdFx0dGhpcy5fbm9ybWFscyA9IG5ldyBGbG9hdDY0QXJyYXkoY291bnQgKiAyKTtcblxuXHRcdGNvbnN0IHBvaW50cyA9IHRoaXMuX3BvaW50cztcblxuXHRcdGZvcihsZXQgaSA9IDAsIGl4ID0gMCwgaXkgPSAxOyBpIDwgY291bnQ7ICsraSwgaXggKz0gMiwgaXkgKz0gMikge1xuXHRcdFx0Y29uc3QgbmV3X3BvaW50ID0gbmV3X3BvaW50c1tpXTtcblxuXHRcdFx0cG9pbnRzW2l4XSA9IG5ld19wb2ludFswXTtcblx0XHRcdHBvaW50c1tpeV0gPSBuZXdfcG9pbnRbMV07XG5cdFx0fVxuXG5cdFx0dGhpcy5fZGlydHlfY29vcmRzID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDYWxjdWxhdGVzIGFuZCBjYWNoZXMgdGhlIHBvbHlnb24ncyB3b3JsZCBjb29yZGluYXRlcyBiYXNlZCBvbiBpdHMgcG9pbnRzLCBhbmdsZSwgYW5kIHNjYWxlXG5cdCAqL1xuXHRfY2FsY3VsYXRlQ29vcmRzKCkge1xuXHRcdGNvbnN0IHggICAgICAgPSB0aGlzLng7XG5cdFx0Y29uc3QgeSAgICAgICA9IHRoaXMueTtcblx0XHRjb25zdCBhbmdsZSAgID0gdGhpcy5hbmdsZTtcblx0XHRjb25zdCBzY2FsZV94ID0gdGhpcy5zY2FsZV94O1xuXHRcdGNvbnN0IHNjYWxlX3kgPSB0aGlzLnNjYWxlX3k7XG5cdFx0Y29uc3QgcG9pbnRzICA9IHRoaXMuX3BvaW50cztcblx0XHRjb25zdCBjb29yZHMgID0gdGhpcy5fY29vcmRzO1xuXHRcdGNvbnN0IGNvdW50ICAgPSBwb2ludHMubGVuZ3RoO1xuXG5cdFx0bGV0IG1pbl94O1xuXHRcdGxldCBtYXhfeDtcblx0XHRsZXQgbWluX3k7XG5cdFx0bGV0IG1heF95O1xuXG5cdFx0Zm9yKGxldCBpeCA9IDAsIGl5ID0gMTsgaXggPCBjb3VudDsgaXggKz0gMiwgaXkgKz0gMikge1xuXHRcdFx0bGV0IGNvb3JkX3ggPSBwb2ludHNbaXhdICogc2NhbGVfeDtcblx0XHRcdGxldCBjb29yZF95ID0gcG9pbnRzW2l5XSAqIHNjYWxlX3k7XG5cblx0XHRcdGlmKGFuZ2xlKSB7XG5cdFx0XHRcdGNvbnN0IGNvcyAgID0gTWF0aC5jb3MoYW5nbGUpO1xuXHRcdFx0XHRjb25zdCBzaW4gICA9IE1hdGguc2luKGFuZ2xlKTtcblx0XHRcdFx0Y29uc3QgdG1wX3ggPSBjb29yZF94O1xuXHRcdFx0XHRjb25zdCB0bXBfeSA9IGNvb3JkX3k7XG5cblx0XHRcdFx0Y29vcmRfeCA9IHRtcF94ICogY29zIC0gdG1wX3kgKiBzaW47XG5cdFx0XHRcdGNvb3JkX3kgPSB0bXBfeCAqIHNpbiArIHRtcF95ICogY29zO1xuXHRcdFx0fVxuXG5cdFx0XHRjb29yZF94ICs9IHg7XG5cdFx0XHRjb29yZF95ICs9IHk7XG5cblx0XHRcdGNvb3Jkc1tpeF0gPSBjb29yZF94O1xuXHRcdFx0Y29vcmRzW2l5XSA9IGNvb3JkX3k7XG5cblx0XHRcdGlmKGl4ID09PSAwKSB7XG5cdFx0XHRcdG1pbl94ID0gbWF4X3ggPSBjb29yZF94O1xuXHRcdFx0XHRtaW5feSA9IG1heF95ID0gY29vcmRfeTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRpZihjb29yZF94IDwgbWluX3gpIHtcblx0XHRcdFx0XHRtaW5feCA9IGNvb3JkX3g7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZihjb29yZF94ID4gbWF4X3gpIHtcblx0XHRcdFx0XHRtYXhfeCA9IGNvb3JkX3g7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihjb29yZF95IDwgbWluX3kpIHtcblx0XHRcdFx0XHRtaW5feSA9IGNvb3JkX3k7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSBpZihjb29yZF95ID4gbWF4X3kpIHtcblx0XHRcdFx0XHRtYXhfeSA9IGNvb3JkX3k7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLl94ICAgICAgICAgICAgID0geDtcblx0XHR0aGlzLl95ICAgICAgICAgICAgID0geTtcblx0XHR0aGlzLl9hbmdsZSAgICAgICAgID0gYW5nbGU7XG5cdFx0dGhpcy5fc2NhbGVfeCAgICAgICA9IHNjYWxlX3g7XG5cdFx0dGhpcy5fc2NhbGVfeSAgICAgICA9IHNjYWxlX3k7XG5cdFx0dGhpcy5fbWluX3ggICAgICAgICA9IG1pbl94O1xuXHRcdHRoaXMuX21pbl95ICAgICAgICAgPSBtaW5feTtcblx0XHR0aGlzLl9tYXhfeCAgICAgICAgID0gbWF4X3g7XG5cdFx0dGhpcy5fbWF4X3kgICAgICAgICA9IG1heF95O1xuXHRcdHRoaXMuX2RpcnR5X2Nvb3JkcyAgPSBmYWxzZTtcblx0XHR0aGlzLl9kaXJ0eV9ub3JtYWxzID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDYWxjdWxhdGVzIHRoZSBub3JtYWxzIGFuZCBlZGdlcyBvZiB0aGUgcG9seWdvbidzIHNpZGVzXG5cdCAqL1xuXHRfY2FsY3VsYXRlTm9ybWFscygpIHtcblx0XHRjb25zdCBjb29yZHMgID0gdGhpcy5fY29vcmRzO1xuXHRcdGNvbnN0IGVkZ2VzICAgPSB0aGlzLl9lZGdlcztcblx0XHRjb25zdCBub3JtYWxzID0gdGhpcy5fbm9ybWFscztcblx0XHRjb25zdCBjb3VudCAgID0gY29vcmRzLmxlbmd0aDtcblxuXHRcdGZvcihsZXQgaXggPSAwLCBpeSA9IDE7IGl4IDwgY291bnQ7IGl4ICs9IDIsIGl5ICs9IDIpIHtcblx0XHRcdGNvbnN0IG5leHQgICA9IGl4ICsgMiA8IGNvdW50ID8gaXggKyAyIDogMDtcblx0XHRcdGNvbnN0IHggICAgICA9IGNvb3Jkc1tuZXh0XSAtIGNvb3Jkc1tpeF07XG5cdFx0XHRjb25zdCB5ICAgICAgPSBjb29yZHNbbmV4dCArIDFdIC0gY29vcmRzW2l5XTtcblx0XHRcdGNvbnN0IGxlbmd0aCA9IHggfHwgeSA/IE1hdGguc3FydCh4ICogeCArIHkgKiB5KSA6IDA7XG5cblx0XHRcdGVkZ2VzW2l4XSAgID0geDtcblx0XHRcdGVkZ2VzW2l5XSAgID0geTtcblx0XHRcdG5vcm1hbHNbaXhdID0gbGVuZ3RoID8geSAvIGxlbmd0aCA6IDA7XG5cdFx0XHRub3JtYWxzW2l5XSA9IGxlbmd0aCA/IC14IC8gbGVuZ3RoIDogMDtcblx0XHR9XG5cblx0XHR0aGlzLl9kaXJ0eV9ub3JtYWxzID0gZmFsc2U7XG5cdH1cbn07XG4iLCJpbXBvcnQgUG9seWdvbiBmcm9tICcuL1BvbHlnb24ubWpzJztcblxuLyoqXG4gKiBBIHBvaW50IHVzZWQgdG8gZGV0ZWN0IGNvbGxpc2lvbnNcbiAqIEBjbGFzc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb2ludCBleHRlbmRzIFBvbHlnb24ge1xuXHQvKipcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbeCA9IDBdIFRoZSBzdGFydGluZyBYIGNvb3JkaW5hdGVcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt5ID0gMF0gVGhlIHN0YXJ0aW5nIFkgY29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3BhZGRpbmcgPSAwXSBUaGUgYW1vdW50IHRvIHBhZCB0aGUgYm91bmRpbmcgdm9sdW1lIHdoZW4gdGVzdGluZyBmb3IgcG90ZW50aWFsIGNvbGxpc2lvbnNcblx0ICovXG5cdGNvbnN0cnVjdG9yKHggPSAwLCB5ID0gMCwgcGFkZGluZyA9IDApIHtcblx0XHRzdXBlcih4LCB5LCBbWzAsIDBdXSwgMCwgMSwgMSwgcGFkZGluZyk7XG5cblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9wb2ludCA9IHRydWU7XG5cdH1cbn07XG5cblBvaW50LnByb3RvdHlwZS5zZXRQb2ludHMgPSB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgQlZIICAgICBmcm9tICcuL21vZHVsZXMvQlZILm1qcyc7XG5pbXBvcnQgQ2lyY2xlICBmcm9tICcuL21vZHVsZXMvQ2lyY2xlLm1qcyc7XG5pbXBvcnQgUG9seWdvbiBmcm9tICcuL21vZHVsZXMvUG9seWdvbi5tanMnO1xuaW1wb3J0IFBvaW50ICAgZnJvbSAnLi9tb2R1bGVzL1BvaW50Lm1qcyc7XG5pbXBvcnQgUmVzdWx0ICBmcm9tICcuL21vZHVsZXMvUmVzdWx0Lm1qcyc7XG5pbXBvcnQgU0FUICAgICBmcm9tICcuL21vZHVsZXMvU0FULm1qcyc7XG5cbi8qKlxuICogQSBjb2xsaXNpb24gc3lzdGVtIHVzZWQgdG8gdHJhY2sgYm9kaWVzIGluIG9yZGVyIHRvIGltcHJvdmUgY29sbGlzaW9uIGRldGVjdGlvbiBwZXJmb3JtYW5jZVxuICogQGNsYXNzXG4gKi9cbmNsYXNzIENvbGxpc2lvbnMge1xuXHQvKipcblx0ICogQGNvbnN0cnVjdG9yXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvKiogQHByaXZhdGUgKi9cblx0XHR0aGlzLl9idmggPSBuZXcgQlZIKCk7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHtAbGluayBDaXJjbGV9IGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIGNvbGxpc2lvbiBzeXN0ZW1cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt4ID0gMF0gVGhlIHN0YXJ0aW5nIFggY29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3kgPSAwXSBUaGUgc3RhcnRpbmcgWSBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcmFkaXVzID0gMF0gVGhlIHJhZGl1c1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlID0gMV0gVGhlIHNjYWxlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKiBAcmV0dXJucyB7Q2lyY2xlfVxuXHQgKi9cblx0Y3JlYXRlQ2lyY2xlKHggPSAwLCB5ID0gMCwgcmFkaXVzID0gMCwgc2NhbGUgPSAxLCBwYWRkaW5nID0gMCkge1xuXHRcdGNvbnN0IGJvZHkgPSBuZXcgQ2lyY2xlKHgsIHksIHJhZGl1cywgc2NhbGUsIHBhZGRpbmcpO1xuXG5cdFx0dGhpcy5fYnZoLmluc2VydChib2R5KTtcblxuXHRcdHJldHVybiBib2R5O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSB7QGxpbmsgUG9seWdvbn0gYW5kIGluc2VydHMgaXQgaW50byB0aGUgY29sbGlzaW9uIHN5c3RlbVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3ggPSAwXSBUaGUgc3RhcnRpbmcgWCBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbeSA9IDBdIFRoZSBzdGFydGluZyBZIGNvb3JkaW5hdGVcblx0ICogQHBhcmFtIHtBcnJheTxOdW1iZXJbXT59IFtwb2ludHMgPSBbXV0gQW4gYXJyYXkgb2YgY29vcmRpbmF0ZSBwYWlycyBtYWtpbmcgdXAgdGhlIHBvbHlnb24gLSBbW3gxLCB5MV0sIFt4MiwgeTJdLCAuLi5dXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbYW5nbGUgPSAwXSBUaGUgc3RhcnRpbmcgcm90YXRpb24gaW4gcmFkaWFuc1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlX3ggPSAxXSBUaGUgc3RhcnRpbmcgc2NhbGUgYWxvbmcgdGhlIFggYXhpc1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlX3kgPSAxXSBUaGUgc3RhcnRpbmcgc2NhbGUgbG9uZyB0aGUgWSBheGlzXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKiBAcmV0dXJucyB7UG9seWdvbn1cblx0ICovXG5cdGNyZWF0ZVBvbHlnb24oeCA9IDAsIHkgPSAwLCBwb2ludHMgPSBbWzAsIDBdXSwgYW5nbGUgPSAwLCBzY2FsZV94ID0gMSwgc2NhbGVfeSA9IDEsIHBhZGRpbmcgPSAwKSB7XG5cdFx0Y29uc3QgYm9keSA9IG5ldyBQb2x5Z29uKHgsIHksIHBvaW50cywgYW5nbGUsIHNjYWxlX3gsIHNjYWxlX3ksIHBhZGRpbmcpO1xuXG5cdFx0dGhpcy5fYnZoLmluc2VydChib2R5KTtcblxuXHRcdHJldHVybiBib2R5O1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSB7QGxpbmsgUG9pbnR9IGFuZCBpbnNlcnRzIGl0IGludG8gdGhlIGNvbGxpc2lvbiBzeXN0ZW1cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt4ID0gMF0gVGhlIHN0YXJ0aW5nIFggY29vcmRpbmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3kgPSAwXSBUaGUgc3RhcnRpbmcgWSBjb29yZGluYXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcGFkZGluZyA9IDBdIFRoZSBhbW91bnQgdG8gcGFkIHRoZSBib3VuZGluZyB2b2x1bWUgd2hlbiB0ZXN0aW5nIGZvciBwb3RlbnRpYWwgY29sbGlzaW9uc1xuXHQgKiBAcmV0dXJucyB7UG9pbnR9XG5cdCAqL1xuXHRjcmVhdGVQb2ludCh4ID0gMCwgeSA9IDAsIHBhZGRpbmcgPSAwKSB7XG5cdFx0Y29uc3QgYm9keSA9IG5ldyBQb2ludCh4LCB5LCBwYWRkaW5nKTtcblxuXHRcdHRoaXMuX2J2aC5pbnNlcnQoYm9keSk7XG5cblx0XHRyZXR1cm4gYm9keTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEge0BsaW5rIFJlc3VsdH0gdXNlZCB0byBjb2xsZWN0IHRoZSBkZXRhaWxlZCByZXN1bHRzIG9mIGEgY29sbGlzaW9uIHRlc3Rcblx0ICovXG5cdGNyZWF0ZVJlc3VsdCgpIHtcblx0XHRyZXR1cm4gbmV3IFJlc3VsdCgpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBSZXN1bHQgdXNlZCB0byBjb2xsZWN0IHRoZSBkZXRhaWxlZCByZXN1bHRzIG9mIGEgY29sbGlzaW9uIHRlc3Rcblx0ICovXG5cdHN0YXRpYyBjcmVhdGVSZXN1bHQoKSB7XG5cdFx0cmV0dXJuIG5ldyBSZXN1bHQoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbnNlcnRzIGJvZGllcyBpbnRvIHRoZSBjb2xsaXNpb24gc3lzdGVtXG5cdCAqIEBwYXJhbSB7Li4uQ2lyY2xlfC4uLlBvbHlnb258Li4uUG9pbnR9IGJvZGllc1xuXHQgKi9cblx0aW5zZXJ0KC4uLmJvZGllcykge1xuXHRcdGZvcihjb25zdCBib2R5IG9mIGJvZGllcykge1xuXHRcdFx0dGhpcy5fYnZoLmluc2VydChib2R5LCBmYWxzZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBib2RpZXMgZnJvbSB0aGUgY29sbGlzaW9uIHN5c3RlbVxuXHQgKiBAcGFyYW0gey4uLkNpcmNsZXwuLi5Qb2x5Z29ufC4uLlBvaW50fSBib2RpZXNcblx0ICovXG5cdHJlbW92ZSguLi5ib2RpZXMpIHtcblx0XHRmb3IoY29uc3QgYm9keSBvZiBib2RpZXMpIHtcblx0XHRcdHRoaXMuX2J2aC5yZW1vdmUoYm9keSwgZmFsc2UpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIGNvbGxpc2lvbiBzeXN0ZW0uIFRoaXMgc2hvdWxkIGJlIGNhbGxlZCBiZWZvcmUgYW55IGNvbGxpc2lvbnMgYXJlIHRlc3RlZC5cblx0ICovXG5cdHVwZGF0ZSgpIHtcblx0XHR0aGlzLl9idmgudXBkYXRlKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBEcmF3cyB0aGUgYm9kaWVzIHdpdGhpbiB0aGUgc3lzdGVtIHRvIGEgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEJ3MgY3VycmVudCBwYXRoXG5cdCAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGRyYXcgdG9cblx0ICovXG5cdGRyYXcoY29udGV4dCkge1xuXHRcdHJldHVybiB0aGlzLl9idmguZHJhdyhjb250ZXh0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEcmF3cyB0aGUgc3lzdGVtJ3MgQlZIIHRvIGEgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEJ3MgY3VycmVudCBwYXRoLiBUaGlzIGlzIHVzZWZ1bCBmb3IgdGVzdGluZyBvdXQgZGlmZmVyZW50IHBhZGRpbmcgdmFsdWVzIGZvciBib2RpZXMuXG5cdCAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIGRyYXcgdG9cblx0ICovXG5cdGRyYXdCVkgoY29udGV4dCkge1xuXHRcdHJldHVybiB0aGlzLl9idmguZHJhd0JWSChjb250ZXh0KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgbGlzdCBvZiBwb3RlbnRpYWwgY29sbGlzaW9ucyBmb3IgYSBib2R5XG5cdCAqIEBwYXJhbSB7Q2lyY2xlfFBvbHlnb258UG9pbnR9IGJvZHkgVGhlIGJvZHkgdG8gdGVzdCBmb3IgcG90ZW50aWFsIGNvbGxpc2lvbnMgYWdhaW5zdFxuXHQgKiBAcmV0dXJucyB7QXJyYXk8Qm9keT59XG5cdCAqL1xuXHRwb3RlbnRpYWxzKGJvZHkpIHtcblx0XHRyZXR1cm4gdGhpcy5fYnZoLnBvdGVudGlhbHMoYm9keSk7XG5cdH1cblxuXHQvKipcblx0ICogRGV0ZXJtaW5lcyBpZiB0d28gYm9kaWVzIGFyZSBjb2xsaWRpbmdcblx0ICogQHBhcmFtIHtDaXJjbGV8UG9seWdvbnxQb2ludH0gdGFyZ2V0IFRoZSB0YXJnZXQgYm9keSB0byB0ZXN0IGFnYWluc3Rcblx0ICogQHBhcmFtIHtSZXN1bHR9IFtyZXN1bHQgPSBudWxsXSBBIFJlc3VsdCBvYmplY3Qgb24gd2hpY2ggdG8gc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNvbGxpc2lvblxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFthYWJiID0gdHJ1ZV0gU2V0IHRvIGZhbHNlIHRvIHNraXAgdGhlIEFBQkIgdGVzdCAodXNlZnVsIGlmIHlvdSB1c2UgeW91ciBvd24gcG90ZW50aWFsIGNvbGxpc2lvbiBoZXVyaXN0aWMpXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgKi9cblx0Y29sbGlkZXMoc291cmNlLCB0YXJnZXQsIHJlc3VsdCA9IG51bGwsIGFhYmIgPSB0cnVlKSB7XG5cdFx0cmV0dXJuIFNBVChzb3VyY2UsIHRhcmdldCwgcmVzdWx0LCBhYWJiKTtcblx0fVxufTtcblxuZXhwb3J0IHtcblx0Q29sbGlzaW9ucyBhcyBkZWZhdWx0LFxuXHRDb2xsaXNpb25zLFxuXHRSZXN1bHQsXG5cdENpcmNsZSxcblx0UG9seWdvbixcblx0UG9pbnQsXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==