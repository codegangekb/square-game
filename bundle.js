!function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=1)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n{constructor(t,e){this.x=t,this.y=e}add(t){return new n(this.x+t.x,this.y+t.y)}multiple(t,e){return new n(this.x*t,this.y*(null!=e?e:t))}static zero(){return new n(0,0)}static angle(t,e){return Math.atan2(t.x-e.x,-(t.y-e.y))}}e.Vector=n},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i(2);const n=i(7),o=i(13),r=document.createElement("canvas");r.id="display",document.body.style.backgroundColor="#303030";const s=new o.Config;r.width=s.game.width,r.height=s.game.height,r.classList.add("game-display");const a=r.getContext("2d");if(null==a)throw Error("PNH");document.body.appendChild(r);const h=new n.Game(s);let l=performance.now();!function t(){a.clearRect(0,0,r.width,r.height);const e=performance.now(),i=(e-l)/1e3;l=e,h.update(i),h.render(a),requestAnimationFrame(t)}()},function(t,e,i){var n=i(3);"string"==typeof n&&(n=[[t.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};i(5)(n,o);n.locals&&(t.exports=n.locals)},function(t,e,i){(t.exports=i(4)(!1)).push([t.i,"\n@font-face {\n    font-family: 'Press Start 2P';\n    font-style: normal;\n    font-weight: 400;\n    src: url(https://fonts.gstatic.com/s/pressstart2p/v6/e3t4euO8T-267oIAQAu6jDQyK3nVivNm4I81.woff2) format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\nbody, html {\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    height: 100%;\n    font-family: 'Press Start 2P', SansSerif, Arial;\n}\n\nbody {\n    user-select: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\ncanvas {\n    border: 1px solid black;\n    image-rendering: pixelated;\n    cursor: cell;\n}\n\n.game-display {\n    position: relative;\n}\n\n.game-ui-container {\n    pointer-events: none;\n    position: absolute;\n    width: 800px;\n    height: 600px;\n}\n\n.tower-selector-container {\n    pointer-events: all;\n    position: absolute;\n    box-sizing: border-box;\n    justify-content: space-between;\n    align-items: flex-start;\n    padding: 40px 5px 10px;\n    background: url('/public/images/wall.png') repeat;\n    top: 0;\n    right: 0;\n    width: 145px;\n    height: 600px;\n}\n\n.tower-selector-title {\n    color: gold;\n    opacity: 0.75;\n    position: absolute;\n    right: 0;\n    top: 0;\n    background: url(/public/images/chest.png) no-repeat 10px 10px;\n    background-size: 20px 20px;\n    padding: 10px 0 0 30px ;\n    box-sizing: border-box;\n    width: 145px;\n    text-align: left;\n}\n\n.tower-selector {\n    background: url(/public/images/border.png) no-repeat,rgba(255,255,255,0.7);\n    background-size: 60px 60px;\n    display: inline-block;\n    width: 60px;\n    height: 60px;\n    margin-bottom: 15px;\n}\n\n.tower-selector.active {\n    box-shadow: 0 0 15px gold;\n}\n\n.tower-selector:nth-of-type(2n+1) {\n    margin-right: 15px;\n}\n",""])},function(t,e,i){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var i=function(t,e){var i=t[1]||"",n=t[3];if(!n)return i;if(e&&"function"==typeof btoa){var o=(s=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),r=n.sources.map(function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"});return[i].concat(r).concat([o]).join("\n")}var s;return[i].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+i+"}":i}).join("")},e.i=function(t,i){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},o=0;o<this.length;o++){var r=this[o][0];null!=r&&(n[r]=!0)}for(o=0;o<t.length;o++){var s=t[o];null!=s[0]&&n[s[0]]||(i&&!s[2]?s[2]=i:i&&(s[2]="("+s[2]+") and ("+i+")"),e.push(s))}},e}},function(t,e,i){var n,o,r={},s=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=n.apply(this,arguments)),o}),a=function(t){var e={};return function(t,i){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,i);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),h=null,l=0,c=[],d=i(6);function u(t,e){for(var i=0;i<t.length;i++){var n=t[i],o=r[n.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](n.parts[s]);for(;s<n.parts.length;s++)o.parts.push(y(n.parts[s],e))}else{var a=[];for(s=0;s<n.parts.length;s++)a.push(y(n.parts[s],e));r[n.id]={id:n.id,refs:1,parts:a}}}}function f(t,e){for(var i=[],n={},o=0;o<t.length;o++){var r=t[o],s=e.base?r[0]+e.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};n[s]?n[s].parts.push(a):i.push(n[s]={id:s,parts:[a]})}return i}function p(t,e){var i=a(t.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=c[c.length-1];if("top"===t.insertAt)n?n.nextSibling?i.insertBefore(e,n.nextSibling):i.appendChild(e):i.insertBefore(e,i.firstChild),c.push(e);else if("bottom"===t.insertAt)i.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(t.insertAt.before,i);i.insertBefore(e,o)}}function w(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=c.indexOf(t);e>=0&&c.splice(e,1)}function g(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var n=function(){0;return i.nc}();n&&(t.attrs.nonce=n)}return m(e,t.attrs),p(t,e),e}function m(t,e){Object.keys(e).forEach(function(i){t.setAttribute(i,e[i])})}function y(t,e){var i,n,o,r;if(e.transform&&t.css){if(!(r="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=r}if(e.singleton){var s=l++;i=h||(h=g(e)),n=x.bind(null,i,s,!1),o=x.bind(null,i,s,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",m(e,t.attrs),p(t,e),e}(e),n=function(t,e,i){var n=i.css,o=i.sourceMap,r=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||r)&&(n=d(n));o&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([n],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,i,e),o=function(){w(i),i.href&&URL.revokeObjectURL(i.href)}):(i=g(e),n=function(t,e){var i=e.css,n=e.media;n&&t.setAttribute("media",n);if(t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}.bind(null,i),o=function(){w(i)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var i=f(t,e);return u(i,e),function(t){for(var n=[],o=0;o<i.length;o++){var s=i[o];(a=r[s.id]).refs--,n.push(a)}t&&u(f(t,e),e);for(o=0;o<n.length;o++){var a;if(0===(a=n[o]).refs){for(var h=0;h<a.parts.length;h++)a.parts[h]();delete r[a.id]}}}};var v,b=(v=[],function(t,e){return v[t]=e,v.filter(Boolean).join("\n")});function x(t,e,i,n){var o=i?"":n.css;if(t.styleSheet)t.styleSheet.cssText=b(e,o);else{var r=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(r,s[e]):t.appendChild(r)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var i=e.protocol+"//"+e.host,n=i+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,r=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?t:(o=0===r.indexOf("//")?r:0===r.indexOf("/")?i+r:n+r.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(8),o=i(10),r=i(12),s=i(0);e.Game=class{constructor(t){this.config=t,this.player=new n.Player(new n.PlayerData(new s.Vector(400,500),0,this),this),this.room={width:t.world.width,height:t.world.height,map:new r.Map(t.world.width,t.world.height)},this.room.map.generate(),this.camera=new o.Camera(0,0,this.config.game.width,this.config.game.height,this.room.width,this.room.height),this.camera.follow(this.player.data,this.config.game.width/2,this.config.game.height/2)}render(t){this.room.map.draw(t,this.camera.xView,this.camera.yView),this.player.render(t,this.camera.xView,this.camera.yView)}update(t){this.player.update(t),this.camera.update()}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(0),o=i(9);class r{constructor(t,e){this.data=t,this.config=e,this.fill="#3aebca"}render(t,e,i){t.translate(-e+this.data.position.x,-i+this.data.position.y),t.rotate(this.data.look),t.fillStyle=this.fill,o.drawCircle(t,0,0,this.data.size),o.drawCircle(t,.8*-this.data.size,.8*-this.data.size,.3*this.data.size),o.drawCircle(t,.8*+this.data.size,.8*-this.data.size,.3*this.data.size),t.setTransform(1,0,0,1,0,0)}}e.PlayerRenderer=r;e.Player=class extends r{constructor(t,e){super(t,e.config),this.game=e}update(t){this.data.update(t)}};class s{constructor(t=n.Vector.zero(),e=0,i){this.position=t,this.look=e,this.game=i,this.size=20,this.speed=200,this.pressedKeys={},document.addEventListener("keydown",t=>{this.pressedKeys[t.keyCode]=!0}),document.addEventListener("keyup",t=>{this.pressedKeys[t.keyCode]=!1}),document.getElementById("display").addEventListener("mousemove",t=>{const e=this.game.camera,i=new n.Vector(t.pageX+e.xView,t.pageY+e.yView);this.look=n.Vector.angle(i,this.position),console.log(`look ${this.look} ${this.position}`)})}get direction(){let t=n.Vector.zero();return Object.keys(s.directions).forEach(e=>{(this.pressedKeys[e]||!1)&&(t=t.add(new n.Vector(...s.directions[e])))}),t}move(t,e=1){this.position=this.position.add(t.multiple(this.speed).multiple(e))}update(t){this.move(this.direction,t)}}s.directions={87:[0,-1],65:[-1,0],83:[0,1],68:[1,0]},e.PlayerData=s},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.drawCircle=function(t,e,i,n,o=!0){t.beginPath(),t.arc(e,i,n,0,2*Math.PI),o?t.fill():t.stroke()}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(11);var o={NONE:"none",HORIZONTAL:"horizontal",VERTICAL:"vertical",BOTH:"both"};e.Camera=class{constructor(t,e,i,r,s,a){this.xView=t||0,this.yView=e||0,this.xDeadZone=0,this.yDeadZone=0,this.wView=i,this.hView=r,this.axis=o.BOTH,this.followed=null,this.viewportRect=new n.Rectangle(this.xView,this.yView,this.wView,this.hView),this.worldRect=new n.Rectangle(0,0,s,a)}follow(t,e,i){this.followed=t,this.xDeadZone=e,this.yDeadZone=i}update(){null!=this.followed&&(this.axis!=o.HORIZONTAL&&this.axis!=o.BOTH||(this.followed.position.x-this.xView+this.xDeadZone>this.wView?this.xView=this.followed.position.x-(this.wView-this.xDeadZone):this.followed.position.x-this.xDeadZone<this.xView&&(this.xView=this.followed.position.x-this.xDeadZone)),this.axis!=o.VERTICAL&&this.axis!=o.BOTH||(this.followed.position.y-this.yView+this.yDeadZone>this.hView?this.yView=this.followed.position.y-(this.hView-this.yDeadZone):this.followed.position.y-this.yDeadZone<this.yView&&(this.yView=this.followed.position.y-this.yDeadZone))),this.viewportRect.set(this.xView,this.yView),this.viewportRect.within(this.worldRect)||(this.viewportRect.left<this.worldRect.left&&(this.xView=this.worldRect.left),this.viewportRect.top<this.worldRect.top&&(this.yView=this.worldRect.top),this.viewportRect.right>this.worldRect.right&&(this.xView=this.worldRect.right-this.wView),this.viewportRect.bottom>this.worldRect.bottom&&(this.yView=this.worldRect.bottom-this.hView))}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Rectangle=class{constructor(t,e,i,n){this.left=t||0,this.top=e||0,this.width=i||0,this.height=n||0,this.right=this.left+this.width,this.bottom=this.top+this.height}set(t,e,i,n){this.left=t,this.top=e,this.width=i||this.width,this.height=n||this.height,this.right=this.left+this.width,this.bottom=this.top+this.height}within(t){return t.left<=this.left&&t.right>=this.right&&t.top<=this.top&&t.bottom>=this.bottom}overlaps(t){return this.left<t.right&&t.left<this.right&&this.top<t.bottom&&t.top<this.bottom}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Map=class{constructor(t,e){this.width=t,this.height=e,this.image=null}generate(){var t=document.createElement("canvas").getContext("2d");t.canvas.width=this.width,t.canvas.height=this.height;var e=1+~~(this.width/44),i=1+~~(this.height/44),n="black";t.save(),t.fillStyle="black";for(var o=0,r=0;r<e;o+=44,r++){t.beginPath();for(var s=0,a=0;a<i;s+=44,a++)t.rect(o,s,42,42);n="#fff",t.fillStyle=n,t.fill(),t.closePath()}t.restore(),this.image=new Image,this.image.src=t.canvas.toDataURL("image/png"),t=null}draw(t,e,i){var n,o,r,s,a,h;n=e,o=i,r=t.canvas.width,s=t.canvas.height,this.image.width-n<r&&(r=this.image.width-n),this.image.height-o<s&&(s=this.image.height-o),a=r,h=s,t.drawImage(this.image,n,o,r,s,0,0,a,h)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Config=class{constructor(){this.game={width:window.innerWidth,height:window.innerHeight},this.world={width:5e3,height:3e3}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,