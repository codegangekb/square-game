!function(t){var e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)i.d(n,o,function(e){return t[e]}.bind(null,o));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=3)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class n{constructor(t,e){this.x=t,this.y=e}add(t){return new n(this.x+t.x,this.y+t.y)}multiple(t,e){return new n(this.x*t,this.y*(null!=e?e:t))}static zero(){return new n(0,0)}static angle(t,e){return Math.atan2(t.x-e.x,-(t.y-e.y))}static distance(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}static clone(t){return new n(t.x,t.y)}static turnAround(t){return new n(-t.x,-t.y)}}e.Vector=n},function(t,e){var i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(i){var n=new Uint8Array(16);t.exports=function(){return i(n),n}}else{var o=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),o[e]=t>>>((3&e)<<3)&255;return o}}},function(t,e){for(var i=[],n=0;n<256;++n)i[n]=(n+256).toString(16).substr(1);t.exports=function(t,e){var n=e||0,o=i;return[o[t[n++]],o[t[n++]],o[t[n++]],o[t[n++]],"-",o[t[n++]],o[t[n++]],"-",o[t[n++]],o[t[n++]],"-",o[t[n++]],o[t[n++]],"-",o[t[n++]],o[t[n++]],o[t[n++]],o[t[n++]],o[t[n++]],o[t[n++]]].join("")}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),i(4);const n=i(9),o=i(20),s=document.createElement("canvas");s.id="display",document.body.style.backgroundColor="#303030";const r=new o.Config;s.width=r.game.width,s.height=r.game.height,s.classList.add("game-display");const a=s.getContext("2d");if(null==a)throw Error("PNH");document.body.appendChild(s);const c=new n.Game(r);let h=performance.now();!function t(){a.clearRect(0,0,s.width,s.height);const e=performance.now(),i=(e-h)/1e3;h=e,c.update(i),c.render(a),requestAnimationFrame(t)}()},function(t,e,i){var n=i(5);"string"==typeof n&&(n=[[t.i,n,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};i(7)(n,o);n.locals&&(t.exports=n.locals)},function(t,e,i){(t.exports=i(6)(!1)).push([t.i,"\n@font-face {\n    font-family: 'Press Start 2P';\n    font-style: normal;\n    font-weight: 400;\n    src: url(https://fonts.gstatic.com/s/pressstart2p/v6/e3t4euO8T-267oIAQAu6jDQyK3nVivNm4I81.woff2) format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\nbody, html {\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    height: 100%;\n    font-family: 'Press Start 2P', SansSerif, Arial;\n}\n\nbody {\n    user-select: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\ncanvas {\n    border: 1px solid black;\n    image-rendering: pixelated;\n    cursor: cell;\n}\n\n.game-display {\n    position: relative;\n}\n\n.game-ui-container {\n    pointer-events: none;\n    position: absolute;\n    width: 800px;\n    height: 600px;\n}\n\n.tower-selector-container {\n    pointer-events: all;\n    position: absolute;\n    box-sizing: border-box;\n    justify-content: space-between;\n    align-items: flex-start;\n    padding: 40px 5px 10px;\n    background: url('/public/images/wall.png') repeat;\n    top: 0;\n    right: 0;\n    width: 145px;\n    height: 600px;\n}\n\n.tower-selector-title {\n    color: gold;\n    opacity: 0.75;\n    position: absolute;\n    right: 0;\n    top: 0;\n    background: url(/public/images/chest.png) no-repeat 10px 10px;\n    background-size: 20px 20px;\n    padding: 10px 0 0 30px ;\n    box-sizing: border-box;\n    width: 145px;\n    text-align: left;\n}\n\n.tower-selector {\n    background: url(/public/images/border.png) no-repeat,rgba(255,255,255,0.7);\n    background-size: 60px 60px;\n    display: inline-block;\n    width: 60px;\n    height: 60px;\n    margin-bottom: 15px;\n}\n\n.tower-selector.active {\n    box-shadow: 0 0 15px gold;\n}\n\n.tower-selector:nth-of-type(2n+1) {\n    margin-right: 15px;\n}\n",""])},function(t,e,i){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var i=function(t,e){var i=t[1]||"",n=t[3];if(!n)return i;if(e&&"function"==typeof btoa){var o=(r=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */"),s=n.sources.map(function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"});return[i].concat(s).concat([o]).join("\n")}var r;return[i].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+i+"}":i}).join("")},e.i=function(t,i){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},o=0;o<this.length;o++){var s=this[o][0];null!=s&&(n[s]=!0)}for(o=0;o<t.length;o++){var r=t[o];null!=r[0]&&n[r[0]]||(i&&!r[2]?r[2]=i:i&&(r[2]="("+r[2]+") and ("+i+")"),e.push(r))}},e}},function(t,e,i){var n,o,s={},r=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=n.apply(this,arguments)),o}),a=function(t){var e={};return function(t,i){if("function"==typeof t)return t();if(void 0===e[t]){var n=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,i);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}}(),c=null,h=0,l=[],d=i(8);function u(t,e){for(var i=0;i<t.length;i++){var n=t[i],o=s[n.id];if(o){o.refs++;for(var r=0;r<o.parts.length;r++)o.parts[r](n.parts[r]);for(;r<n.parts.length;r++)o.parts.push(y(n.parts[r],e))}else{var a=[];for(r=0;r<n.parts.length;r++)a.push(y(n.parts[r],e));s[n.id]={id:n.id,refs:1,parts:a}}}}function p(t,e){for(var i=[],n={},o=0;o<t.length;o++){var s=t[o],r=e.base?s[0]+e.base:s[0],a={css:s[1],media:s[2],sourceMap:s[3]};n[r]?n[r].parts.push(a):i.push(n[r]={id:r,parts:[a]})}return i}function f(t,e){var i=a(t.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=l[l.length-1];if("top"===t.insertAt)n?n.nextSibling?i.insertBefore(e,n.nextSibling):i.appendChild(e):i.insertBefore(e,i.firstChild),l.push(e);else if("bottom"===t.insertAt)i.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=a(t.insertAt.before,i);i.insertBefore(e,o)}}function g(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function w(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var n=function(){0;return i.nc}();n&&(t.attrs.nonce=n)}return m(e,t.attrs),f(t,e),e}function m(t,e){Object.keys(e).forEach(function(i){t.setAttribute(i,e[i])})}function y(t,e){var i,n,o,s;if(e.transform&&t.css){if(!(s="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=s}if(e.singleton){var r=h++;i=c||(c=w(e)),n=x.bind(null,i,r,!1),o=x.bind(null,i,r,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(i=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",m(e,t.attrs),f(t,e),e}(e),n=function(t,e,i){var n=i.css,o=i.sourceMap,s=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||s)&&(n=d(n));o&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var r=new Blob([n],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}.bind(null,i,e),o=function(){g(i),i.href&&URL.revokeObjectURL(i.href)}):(i=w(e),n=function(t,e){var i=e.css,n=e.media;n&&t.setAttribute("media",n);if(t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}.bind(null,i),o=function(){g(i)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=r()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var i=p(t,e);return u(i,e),function(t){for(var n=[],o=0;o<i.length;o++){var r=i[o];(a=s[r.id]).refs--,n.push(a)}t&&u(p(t,e),e);for(o=0;o<n.length;o++){var a;if(0===(a=n[o]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete s[a.id]}}}};var v,b=(v=[],function(t,e){return v[t]=e,v.filter(Boolean).join("\n")});function x(t,e,i,n){var o=i?"":n.css;if(t.styleSheet)t.styleSheet.cssText=b(e,o);else{var s=document.createTextNode(o),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(s,r[e]):t.appendChild(s)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var i=e.protocol+"//"+e.host,n=i+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var o,s=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?t:(o=0===s.indexOf("//")?s:0===s.indexOf("/")?i+s:n+s.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(10),o=i(11),s=i(13),r=i(0),a=i(14),c=i(16);e.Game=class{constructor(t){this.config=t,this.riotPolice=[],this.pizzas=[],this.player=new n.Player(new n.PlayerData(new r.Vector(1850,1250),0,this),this),this.room={width:t.world.width,height:t.world.height,map:new s.Map(t.world.width,t.world.height)},this.createRiotPolice(),this.room.map.generate(),this.camera=new o.Camera(0,0,this.config.game.width,this.config.game.height,this.room.width,this.room.height),this.camera.follow(this.player.data,this.config.game.width/2,this.config.game.height/2)}renderSquare(t){const e=new Image;e.src="public/square.png",t.drawImage(e,-this.camera.xView,-this.camera.yView,e.width/1.8,e.height/1.8)}render(t){this.renderSquare(t),this.player.render(t,this.camera.xView,this.camera.yView),this.renderRiotPolice(t),this.renderPizzas(t)}searchIntersection(){const t=new Map;if(this.pizzas.length&&(this.pizzas.forEach(e=>{this.riotPolice.forEach(i=>{const n=r.Vector.distance(i.data.position,e.data.position);r.Vector.distance(i.data.position,e.data.position)<800&&!e.isWaitingToEating&&!i.data.target&&(t.has(e)?t.get(e).push({kosmonavt:i,distance:n}):t.set(e,[{kosmonavt:i,distance:n}]))})}),t.size))for(let[e,i]of t){const t=i.reduce((t,e)=>e.distance<t?e.distance:t,i[0].distance),{kosmonavt:n}=i.find(e=>e.distance===t);n.data.target=e,e.isWaitingToEating=!0}}update(t){this.player.update(t),this.updateRiotPolice(t),this.camera.update()}renderRiotPolice(t){this.riotPolice.forEach(e=>{e.render(t,this.camera.xView,this.camera.yView)})}updateRiotPolice(t){this.riotPolice.forEach(e=>{e.update(t)})}renderPizzas(t){this.pizzas.forEach(e=>{e.render(t,this.camera.xView-10,this.camera.yView-10)})}createRiotPolice(){Array.from({length:9}).forEach((t,e)=>{this.riotPolice.push(new a.RiotPolice(new a.RiotPoliceData(new r.Vector(2150,900+80*e+1),1.5*Math.PI,this),this))})}eatPizza(t){const e=this.pizzas.findIndex(e=>e.id===t.id);console.log(e),-1!==e&&this.pizzas.splice(e,1)}createPizzaObject(t){this.pizzas.length>=5||(this.pizzas.push(new c.Pizza(new c.PizzaData(new r.Vector(t.x,t.y)),this)),this.searchIntersection())}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(0);class o{constructor(t,e){this.data=t,this.config=e,this.fill="#3aebca"}render(t,e,i){t.translate(-e+this.data.position.x,-i+this.data.position.y),t.rotate(this.data.look);const n=new Image;n.src="public/player.svg",t.drawImage(n,-31,-42,52,75),t.setTransform(1,0,0,1,0,0)}}e.PlayerRenderer=o;e.Player=class extends o{constructor(t,e){super(t,e.config),this.game=e,document.addEventListener("click",t=>{this.createPizza()})}update(t){this.data.update(t)}createPizza(){this.game.createPizzaObject(this.data.position)}};class s{constructor(t=n.Vector.zero(),e=0,i){this.position=t,this.look=e,this.game=i,this.size=20,this.speed=200,this.pressedKeys={},document.addEventListener("keydown",t=>{this.pressedKeys[t.keyCode]=!0}),document.addEventListener("keyup",t=>{this.pressedKeys[t.keyCode]=!1}),document.getElementById("display").addEventListener("mousemove",t=>{this.look=Math.atan2(t.pageX-this.position.x,-(t.pageY-this.position.y));const e=this.game.camera,i=new n.Vector(t.pageX+e.xView,t.pageY+e.yView);this.look=n.Vector.angle(i,this.position)})}get direction(){let t=n.Vector.zero();return Object.keys(s.directions).forEach(e=>{(this.pressedKeys[e]||!1)&&(t=t.add(new n.Vector(...s.directions[e])))}),t}move(t,e=1){this.position=this.position.add(t.multiple(this.speed).multiple(e))}update(t){this.move(this.direction,t)}}s.directions={87:[0,-1],65:[-1,0],83:[0,1],68:[1,0]},e.PlayerData=s},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(12);var o={NONE:"none",HORIZONTAL:"horizontal",VERTICAL:"vertical",BOTH:"both"};e.Camera=class{constructor(t,e,i,s,r,a){this.xView=t||0,this.yView=e||0,this.xDeadZone=0,this.yDeadZone=0,this.wView=i,this.hView=s,this.axis=o.BOTH,this.followed=null,this.viewportRect=new n.Rectangle(this.xView,this.yView,this.wView,this.hView),this.worldRect=new n.Rectangle(0,0,r,a)}follow(t,e,i){this.followed=t,this.xDeadZone=e,this.yDeadZone=i}update(){null!=this.followed&&(this.axis!=o.HORIZONTAL&&this.axis!=o.BOTH||(this.followed.position.x-this.xView+this.xDeadZone>this.wView?this.xView=this.followed.position.x-(this.wView-this.xDeadZone):this.followed.position.x-this.xDeadZone<this.xView&&(this.xView=this.followed.position.x-this.xDeadZone)),this.axis!=o.VERTICAL&&this.axis!=o.BOTH||(this.followed.position.y-this.yView+this.yDeadZone>this.hView?this.yView=this.followed.position.y-(this.hView-this.yDeadZone):this.followed.position.y-this.yDeadZone<this.yView&&(this.yView=this.followed.position.y-this.yDeadZone))),this.viewportRect.set(this.xView,this.yView),this.viewportRect.within(this.worldRect)||(this.viewportRect.left<this.worldRect.left&&(this.xView=this.worldRect.left),this.viewportRect.top<this.worldRect.top&&(this.yView=this.worldRect.top),this.viewportRect.right>this.worldRect.right&&(this.xView=this.worldRect.right-this.wView),this.viewportRect.bottom>this.worldRect.bottom&&(this.yView=this.worldRect.bottom-this.hView))}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Rectangle=class{constructor(t,e,i,n){this.left=t||0,this.top=e||0,this.width=i||0,this.height=n||0,this.right=this.left+this.width,this.bottom=this.top+this.height}set(t,e,i,n){this.left=t,this.top=e,this.width=i||this.width,this.height=n||this.height,this.right=this.left+this.width,this.bottom=this.top+this.height}within(t){return t.left<=this.left&&t.right>=this.right&&t.top<=this.top&&t.bottom>=this.bottom}overlaps(t){return this.left<t.right&&t.left<this.right&&this.top<t.bottom&&t.top<this.bottom}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Map=class{constructor(t,e){this.width=t,this.height=e,this.image=null}generate(){var t=document.createElement("canvas").getContext("2d");t.canvas.width=this.width,t.canvas.height=this.height;var e=1+~~(this.width/44),i=1+~~(this.height/44),n="black";t.save(),t.fillStyle="black";for(var o=0,s=0;s<e;o+=44,s++){t.beginPath();for(var r=0,a=0;a<i;r+=44,a++)t.rect(o,r,42,42);n="#fff",t.fillStyle=n,t.fill(),t.closePath()}t.restore(),this.image=new Image,this.image.src=t.canvas.toDataURL("image/png"),t=null}draw(t,e,i){var n,o,s,r,a,c;n=e,o=i,s=t.canvas.width,r=t.canvas.height,this.image.width-n<s&&(s=this.image.width-n),this.image.height-o<r&&(r=this.image.height-o),a=s,c=r,t.drawImage(this.image,n,o,s,r,0,0,a,c)}}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(0),o=i(15);class s{constructor(t,e){this.data=t,this.config=e,this.fill="brown"}render(t,e,i){t.translate(-e+this.data.position.x,-i+this.data.position.y),t.rotate(this.data.look);const n=new Image;n.src="public/cosmonaut.svg",t.drawImage(n,-41,-52,62,85),t.setTransform(1,0,0,1,0,0)}}e.RiotPoliceRenderer=s;e.RiotPolice=class extends s{constructor(t,e){super(t,e.config),this.game=e}update(t){this.data.update(t)}};class r{constructor(t=n.Vector.zero(),e=0,i){this.position=t,this.look=e,this.game=i,this.size=25,this.speed=o.getRandomBeetwen(.7,1),this.target=null,this.initialPosition=null,this.initialLook=null,this.pressedKeys={},this.initialPosition=n.Vector.clone(this.position),this.initialLook=e}get direction(){let t=n.Vector.zero();const e=this.target&&this.target.data.position||this.initialPosition;return Math.abs(e.x-this.position.x)<=10||Math.abs(e.y-this.position.y)<=10?(this.target&&this.game.eatPizza(this.target),this.target=null,this.look=this.initialLook):(t=new n.Vector(e.x-this.position.x,e.y-this.position.y),this.look=n.Vector.angle(e,this.position)),t}move(t,e=1){this.position=this.position.add(t.multiple(this.speed).multiple(e))}update(t){this.move(this.direction,t)}}r.directions={87:[0,-1],65:[-1,0],83:[0,1],68:[1,0]},e.RiotPoliceData=r},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.drawCircle=function(t,e,i,n,o=!0){t.beginPath(),t.arc(e,i,n,0,2*Math.PI),o?t.fill():t.stroke()},e.drawTriangle=function(t,e,i,n,o=!0){t.beginPath(),t.moveTo(e,i),t.arc(e,i,n,0,Math.PI/3),o?t.fill():t.stroke()},e.getRandomBeetwen=function(t,e){return Math.random()*e+t}},function(t,e,i){"use strict";var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=i(0),s=n(i(17));class r{constructor(t,e){this.data=t,this.config=e,this.fill="brown"}render(t,e,i){t.translate(-e+this.data.position.x,-i+this.data.position.y),t.rotate(this.data.look);const n=new Image;n.src="public/pizza.svg",t.drawImage(n,-30,-30,60,60),t.setTransform(1,0,0,1,0,0)}}e.PizzaRenderer=r;e.Pizza=class extends r{constructor(t,e){super(t,e.config),this.game=e,this.id=s.default(),this.isWaitingToEating=!1}update(t){this.data.update(t)}};class a{constructor(t=o.Vector.zero(),e=0){this.position=t,this.look=e,this.size=25,this.speed=200,this.pressedKeys={}}get direction(){let t=o.Vector.zero();return Object.keys(a.directions).forEach(e=>{(this.pressedKeys[e]||!1)&&(t=t.add(new o.Vector(...a.directions[e])))}),t}move(t,e=1){this.position=this.position.add(t.multiple(this.speed).multiple(e))}update(t){this.move(this.direction,t)}}a.directions={87:[0,-1],65:[-1,0],83:[0,1],68:[1,0]},e.PizzaData=a},function(t,e,i){var n=i(18),o=i(19),s=o;s.v1=n,s.v4=o,t.exports=s},function(t,e,i){var n,o,s=i(1),r=i(2),a=0,c=0;t.exports=function(t,e,i){var h=e&&i||0,l=e||[],d=(t=t||{}).node||n,u=void 0!==t.clockseq?t.clockseq:o;if(null==d||null==u){var p=s();null==d&&(d=n=[1|p[0],p[1],p[2],p[3],p[4],p[5]]),null==u&&(u=o=16383&(p[6]<<8|p[7]))}var f=void 0!==t.msecs?t.msecs:(new Date).getTime(),g=void 0!==t.nsecs?t.nsecs:c+1,w=f-a+(g-c)/1e4;if(w<0&&void 0===t.clockseq&&(u=u+1&16383),(w<0||f>a)&&void 0===t.nsecs&&(g=0),g>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=f,c=g,o=u;var m=(1e4*(268435455&(f+=122192928e5))+g)%4294967296;l[h++]=m>>>24&255,l[h++]=m>>>16&255,l[h++]=m>>>8&255,l[h++]=255&m;var y=f/4294967296*1e4&268435455;l[h++]=y>>>8&255,l[h++]=255&y,l[h++]=y>>>24&15|16,l[h++]=y>>>16&255,l[h++]=u>>>8|128,l[h++]=255&u;for(var v=0;v<6;++v)l[h+v]=d[v];return e||r(l)}},function(t,e,i){var n=i(1),o=i(2);t.exports=function(t,e,i){var s=e&&i||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var r=(t=t||{}).random||(t.rng||n)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e)for(var a=0;a<16;++a)e[s+a]=r[a];return e||o(r)}},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Config=class{constructor(){this.game={width:window.innerWidth,height:window.innerHeight},this.world={width:4444,height:2218}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
