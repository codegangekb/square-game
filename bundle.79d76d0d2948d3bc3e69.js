!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=13)}([function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.GameObject=class{constructor(t,e,s,i){this.transform=t,this.drawer=e,this.collider=s,this.animation=i}render(t,e){this.drawer.draw(t,e)}update(t){this.animation&&this.animation.update(t)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(6);e.Drawer=class{constructor(t){this.transform=t,this.assets=i.Assets.getInstance()}draw(t,e){e.xView-this.transform.position.x>100&&e.yView-this.transform.position.y>100||(t.translate(-e.xView+this.transform.position.x,-e.yView+this.transform.position.y),t.rotate(this.transform.angle),this.render(t),t.setTransform(1,0,0,1,0,0))}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(t,e){this.x=t,this.y=e}add(t){return new i(this.x+t.x,this.y+t.y)}sub(t){return new i(this.x-t.x,this.y-t.y)}multiple(t,e){return new i(this.x*t,this.y*(null!=e?e:t))}normalize(){const t=Math.sqrt(this.x*this.x+this.y*this.y);return t?new i(this.x/t,this.y/t):this}static zero(){return new i(0,0)}static angle(t,e){return Math.atan2(t.x-e.x,-(t.y-e.y))}static distance(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}static clone(t){return new i(t.x,t.y)}static turnAround(t){return new i(-t.x,-t.y)}}e.Vector=i},function(t,e,s){const i=s(21),n=s(23),r=s(10),o=s(24),a=s(8),h=s(9);class c{constructor(){this._bvh=new i}createCircle(t=0,e=0,s=0,i=1,r=0){const o=new n(t,e,s,i,r);return this._bvh.insert(o),o}createPolygon(t=0,e=0,s=[[0,0]],i=0,n=1,o=1,a=0){const h=new r(t,e,s,i,n,o,a);return this._bvh.insert(h),h}createPoint(t=0,e=0,s=0){const i=new o(t,e,s);return this._bvh.insert(i),i}createResult(){return new a}static createResult(){return new a}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,s=null,i=!0){return h(t,e,s,i)}}t.exports={default:c,Collisions:c,Result:a,Circle:n,Polygon:r,Point:o}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(2);class n{constructor(t,e,s,i,n){this._position=t,this._angle=e,this.collider=s,this._scale=i,this._size=n}get position(){return this._position}get angle(){return this._angle}get size(){return this._size}rotate(t){this._angle=t}lookAt(t){this._angle=i.Vector.angle(t,this.position)}setPosition(t){this._position=t}static clone(t){return new n(i.Vector.clone(t.position),t.angle,t._scale,t._size)}}e.Transform=n},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WALL_HEIGHT=42,e.WALL_WIDTH=120,e.WALL_X=2235,e.TOWN_HEIGHT=42,e.TOWN_START=900,e.WALL_START=918,console.log(e.WALL_START)},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});class i{constructor(){this.assetsMap={},this.assetsList=["boss.svg","cosmonaut.svg","ded.svg","deva-vesna.svg","dodo.svg","house.svg","maxim_menailo.svg","mer.svg","naum-blik.svg","pizza.svg","player.svg","rinat.svg","roizman.svg","salsa.svg","shahrin.svg","sheremet.svg","square.png","ten-gubernatora.svg","titushki.svg","town.svg","tsarikov.svg","wall.svg","wall1.svg","wall2.svg","wall3.svg","wall4.svg","wall5.svg","yandex-eda.svg","yandex-eda2.svg","yandex-eda3.svg","devi-u-popa.svg","grupa2.svg","human.svg","we.svg","yandex-eda-tri-parnya.svg"]}static getInstance(){return i.instance||(i.instance=new i),i.instance}get(t){return this.assetsMap[t]}loadOne(t){return new Promise(e=>{const s=new Image;s.src="public/"+t,s.onload=(()=>{this.assetsMap[t]=s,e()})})}load(){return Promise.all(this.assetsList.map(this.loadOne.bind(this)))}}e.Assets=i},function(t,e,s){const i=s(8),n=s(9);t.exports=class{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.padding=s,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=s,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,s=!0){return n(this,t,e,s)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new i}static createResult(){return new i}},t.exports.default=t.exports},function(t,e){t.exports=class{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.b_in_a=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}},t.exports.default=t.exports},function(t,e){function s(t,e,s=null,i=!1){const n=t._coords,r=t._edges,o=t._normals,a=e.x,h=e.y,c=e.radius*e.scale,l=2*c,_=c*c,u=n.length;let d=!0,p=!0,f=null,v=0,m=0;if(2===u){const t=a-n[0],e=h-n[1],i=t*t+e*e;if(i>_)return!1;if(s){const s=Math.sqrt(i);f=c-s,v=t/s,m=e/s,p=!1}}else for(let t=0,e=1;t<u;t+=2,e+=2){const i=a-n[t],b=h-n[e],y=r[t],g=r[e],x=i*y+b*g,w=x<0?-1:x>y*y+g*g?1:0;let O=!1,P=0,j=0,V=0;if(s&&d&&i*i+b*b>_&&(d=!1),w){const e=-1===w,o=e?0===t?u-2:t-2:t===u-2?0:t+2,l=o+1,d=a-n[o],f=h-n[l],v=r[o],m=r[l],y=d*v+f*m;if((y<0?-1:y>v*v+m*m?1:0)===-w){const t=e?i:d,n=e?b:f,r=t*t+n*n;if(r>_)return!1;if(s){const e=Math.sqrt(r);O=!0,P=c-e,j=t/e,V=n/e,p=!1}}}else{const n=o[t],r=o[e],a=i*n+b*r,h=a<0?-a:a;if(a>0&&h>c)return!1;s&&(O=!0,P=c-a,j=n,V=r,(p&&a>=0||P<l)&&(p=!1))}O&&(null===f||f>P)&&(f=P,v=j,m=V)}return s&&(s.a_in_b=i?p:d,s.b_in_a=i?d:p,s.overlap=f,s.overlap_x=i?-v:v,s.overlap_y=i?-m:m),!0}function i(t,e,s,i,n=null){const r=t.length,o=e.length;if(!r||!o)return!0;let a=null,h=null,c=null,l=null;for(let e=0,n=1;e<r;e+=2,n+=2){const r=t[e]*s+t[n]*i;(null===a||a>r)&&(a=r),(null===h||h<r)&&(h=r)}for(let t=0,n=1;t<o;t+=2,n+=2){const r=e[t]*s+e[n]*i;(null===c||c>r)&&(c=r),(null===l||l<r)&&(l=r)}if(a>l||h<c)return!0;if(n){let t=0;if(a<c)if(n.a_in_b=!1,h<l)t=h-c,n.b_in_a=!1;else{const e=h-c,s=l-a;t=e<s?e:-s}else if(n.b_in_a=!1,h>l)t=a-l,n.a_in_b=!1;else{const e=h-c,s=l-a;t=e<s?e:-s}const e=n.overlap,r=t<0?-t:t;if(null===e||e>r){const e=t<0?-1:1;n.overlap=r,n.overlap_x=s*e,n.overlap_y=i*e}}return!1}t.exports=function(t,e,n=null,r=!0){const o=t._polygon,a=e._polygon;let h=!1;return n&&(n.a=t,n.b=e,n.a_in_b=!0,n.b_in_a=!0,n.overlap=null,n.overlap_x=0,n.overlap_y=0),o&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),a&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),r&&!function(t,e){const s=t._polygon,i=s?0:t.x,n=s?0:t.y,r=s?0:t.radius*t.scale,o=s?t._min_x:i-r,a=s?t._min_y:n-r,h=s?t._max_x:i+r,c=s?t._max_y:n+r,l=e._polygon,_=l?0:e.x,u=l?0:e.y,d=l?0:e.radius*e.scale,p=l?e._min_x:_-d,f=l?e._min_y:u-d,v=l?e._max_x:_+d,m=l?e._max_y:u+d;return o<v&&a<m&&h>p&&c>f}(t,e)||(o&&t._dirty_normals&&t._calculateNormals(),a&&e._dirty_normals&&e._calculateNormals(),h=o&&a?function(t,e,s=null){const n=t._coords.length,r=e._coords.length;if(2===n&&2===r){const i=t._coords,n=e._coords;return s&&(s.overlap=0),i[0]===n[0]&&i[1]===n[1]}const o=t._coords,a=e._coords,h=t._normals,c=e._normals;if(n>2)for(let t=0,e=1;t<n;t+=2,e+=2)if(i(o,a,h[t],h[e],s))return!1;if(r>2)for(let t=0,e=1;t<r;t+=2,e+=2)if(i(o,a,c[t],c[e],s))return!1;return!0}(t,e,n):o?s(t,e,n,!1):a?s(e,t,n,!0):function(t,e,s=null){const i=t.radius*t.scale,n=e.radius*e.scale,r=e.x-t.x,o=e.y-t.y,a=i+n,h=r*r+o*o;if(h>a*a)return!1;if(s){const t=Math.sqrt(h);s.a_in_b=i<=n&&t<=n-i,s.b_in_a=n<=i&&t<=i-n,s.overlap=a-t,s.overlap_x=r/t,s.overlap_y=o/t}return!0}(t,e,n)),n&&(n.collision=h),h},t.exports.default=t.exports},function(t,e,s){const i=s(7);class n extends i{constructor(t=0,e=0,s=[],i=0,r=1,o=1,a=0){super(t,e,a),this.angle=i,this.scale_x=r,this.scale_y=o,this._polygon=!0,this._x=t,this._y=e,this._angle=i,this._scale_x=r,this._scale_y=o,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,n.prototype.setPoints.call(this,s)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let s=2;s<e.length;s+=2)t.lineTo(e[s],e[s+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const s=this._points;for(let i=0,n=0,r=1;i<e;++i,n+=2,r+=2){const e=t[i];s[n]=e[0],s[r]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,s=this.angle,i=this.scale_x,n=this.scale_y,r=this._points,o=this._coords,a=r.length;let h,c,l,_;for(let u=0,d=1;u<a;u+=2,d+=2){let a=r[u]*i,p=r[d]*n;if(s){const t=Math.cos(s),e=Math.sin(s),i=a;a=i*t-p*e,p=i*e+p*t}a+=t,p+=e,o[u]=a,o[d]=p,0===u?(h=c=a,l=_=p):(a<h?h=a:a>c&&(c=a),p<l?l=p:p>_&&(_=p))}this._x=t,this._y=e,this._angle=s,this._scale_x=i,this._scale_y=n,this._min_x=h,this._min_y=l,this._max_x=c,this._max_y=_,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,s=this._normals,i=t.length;for(let n=0,r=1;n<i;n+=2,r+=2){const o=n+2<i?n+2:0,a=t[o]-t[n],h=t[o+1]-t[r],c=a||h?Math.sqrt(a*a+h*h):0;e[n]=a,e[r]=h,s[n]=c?h/c:0,s[r]=c?-a/c:0}this._dirty_normals=!1}}t.exports=n,t.exports.default=t.exports},function(t,e){var s="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(s){var i=new Uint8Array(16);t.exports=function(){return s(i),i}}else{var n=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),n[e]=t>>>((3&e)<<3)&255;return n}}},function(t,e){for(var s=[],i=0;i<256;++i)s[i]=(i+256).toString(16).substr(1);t.exports=function(t,e){var i=e||0,n=s;return[n[t[i++]],n[t[i++]],n[t[i++]],n[t[i++]],"-",n[t[i++]],n[t[i++]],"-",n[t[i++]],n[t[i++]],"-",n[t[i++]],n[t[i++]],"-",n[t[i++]],n[t[i++]],n[t[i++]],n[t[i++]],n[t[i++]],n[t[i++]]].join("")}},function(t,e,s){"use strict";var i=this&&this.__awaiter||function(t,e,s,i){return new(s||(s=Promise))(function(n,r){function o(t){try{h(i.next(t))}catch(t){r(t)}}function a(t){try{h(i.throw(t))}catch(t){r(t)}}function h(t){t.done?n(t.value):new s(function(e){e(t.value)}).then(o,a)}h((i=i.apply(t,e||[])).next())})};Object.defineProperty(e,"__esModule",{value:!0}),s(14);const n=s(19),r=s(42),o=s(6),a=document.createElement("canvas");a.id="display",document.body.style.backgroundColor="#303030";const h=new r.Config;a.width=h.game.width,a.height=h.game.height,a.classList.add("game-display");const c=a.getContext("2d");if(null==c)throw Error("PNH");document.body.appendChild(a);const l=o.Assets.getInstance(),_=new n.Game(h);(()=>i(this,void 0,void 0,function*(){yield l.load();let t=performance.now();!function e(){c.clearRect(0,0,a.width,a.height);const s=performance.now(),i=(s-t)/1e3;t=s,_.update(i),_.render(c),requestAnimationFrame(e)}()}))()},function(t,e,s){var i=s(15);"string"==typeof i&&(i=[[t.i,i,""]]);var n={hmr:!0,transform:void 0,insertInto:void 0};s(17)(i,n);i.locals&&(t.exports=i.locals)},function(t,e,s){(t.exports=s(16)(!1)).push([t.i,"\n@font-face {\n    font-family: 'Press Start 2P';\n    font-style: normal;\n    font-weight: 400;\n    src: url(https://fonts.gstatic.com/s/pressstart2p/v6/e3t4euO8T-267oIAQAu6jDQyK3nVivNm4I81.woff2) format('woff2');\n    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n}\n\nbody, html {\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    height: 100%;\n    font-family: 'Press Start 2P', SansSerif, Arial;\n}\n\nbody {\n    user-select: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\ncanvas {\n    border: 1px solid black;\n    image-rendering: pixelated;\n    cursor: cell;\n}\n\n.game-display {\n    position: relative;\n}\n\n.game-ui-container {\n    pointer-events: none;\n    position: absolute;\n    width: 800px;\n    height: 600px;\n}\n\n.tower-selector-container {\n    pointer-events: all;\n    position: absolute;\n    box-sizing: border-box;\n    justify-content: space-between;\n    align-items: flex-start;\n    padding: 40px 5px 10px;\n    background: url('/public/images/wall.png') repeat;\n    top: 0;\n    right: 0;\n    width: 145px;\n    height: 600px;\n}\n\n.tower-selector-title {\n    color: gold;\n    opacity: 0.75;\n    position: absolute;\n    right: 0;\n    top: 0;\n    background: url(/public/images/chest.png) no-repeat 10px 10px;\n    background-size: 20px 20px;\n    padding: 10px 0 0 30px ;\n    box-sizing: border-box;\n    width: 145px;\n    text-align: left;\n}\n\n.tower-selector {\n    background: url(/public/images/border.png) no-repeat,rgba(255,255,255,0.7);\n    background-size: 60px 60px;\n    display: inline-block;\n    width: 60px;\n    height: 60px;\n    margin-bottom: 15px;\n}\n\n.tower-selector.active {\n    box-shadow: 0 0 15px gold;\n}\n\n.tower-selector:nth-of-type(2n+1) {\n    margin-right: 15px;\n}\n",""])},function(t,e,s){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var s=function(t,e){var s=t[1]||"",i=t[3];if(!i)return s;if(e&&"function"==typeof btoa){var n=(o=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),r=i.sources.map(function(t){return"/*# sourceURL="+i.sourceRoot+t+" */"});return[s].concat(r).concat([n]).join("\n")}var o;return[s].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+s+"}":s}).join("")},e.i=function(t,s){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},n=0;n<this.length;n++){var r=this[n][0];null!=r&&(i[r]=!0)}for(n=0;n<t.length;n++){var o=t[n];null!=o[0]&&i[o[0]]||(s&&!o[2]?o[2]=s:s&&(o[2]="("+o[2]+") and ("+s+")"),e.push(o))}},e}},function(t,e,s){var i,n,r={},o=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===n&&(n=i.apply(this,arguments)),n}),a=function(t){var e={};return function(t,s){if("function"==typeof t)return t();if(void 0===e[t]){var i=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,s);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}}(),h=null,c=0,l=[],_=s(18);function u(t,e){for(var s=0;s<t.length;s++){var i=t[s],n=r[i.id];if(n){n.refs++;for(var o=0;o<n.parts.length;o++)n.parts[o](i.parts[o]);for(;o<i.parts.length;o++)n.parts.push(b(i.parts[o],e))}else{var a=[];for(o=0;o<i.parts.length;o++)a.push(b(i.parts[o],e));r[i.id]={id:i.id,refs:1,parts:a}}}}function d(t,e){for(var s=[],i={},n=0;n<t.length;n++){var r=t[n],o=e.base?r[0]+e.base:r[0],a={css:r[1],media:r[2],sourceMap:r[3]};i[o]?i[o].parts.push(a):s.push(i[o]={id:o,parts:[a]})}return s}function p(t,e){var s=a(t.insertInto);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=l[l.length-1];if("top"===t.insertAt)i?i.nextSibling?s.insertBefore(e,i.nextSibling):s.appendChild(e):s.insertBefore(e,s.firstChild),l.push(e);else if("bottom"===t.insertAt)s.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var n=a(t.insertAt.before,s);s.insertBefore(e,n)}}function f(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=l.indexOf(t);e>=0&&l.splice(e,1)}function v(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var i=function(){0;return s.nc}();i&&(t.attrs.nonce=i)}return m(e,t.attrs),p(t,e),e}function m(t,e){Object.keys(e).forEach(function(s){t.setAttribute(s,e[s])})}function b(t,e){var s,i,n,r;if(e.transform&&t.css){if(!(r="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=r}if(e.singleton){var o=c++;s=h||(h=v(e)),i=x.bind(null,s,o,!1),n=x.bind(null,s,o,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(s=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",m(e,t.attrs),p(t,e),e}(e),i=function(t,e,s){var i=s.css,n=s.sourceMap,r=void 0===e.convertToAbsoluteUrls&&n;(e.convertToAbsoluteUrls||r)&&(i=_(i));n&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */");var o=new Blob([i],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(o),a&&URL.revokeObjectURL(a)}.bind(null,s,e),n=function(){f(s),s.href&&URL.revokeObjectURL(s.href)}):(s=v(e),i=function(t,e){var s=e.css,i=e.media;i&&t.setAttribute("media",i);if(t.styleSheet)t.styleSheet.cssText=s;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(s))}}.bind(null,s),n=function(){f(s)});return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else n()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var s=d(t,e);return u(s,e),function(t){for(var i=[],n=0;n<s.length;n++){var o=s[n];(a=r[o.id]).refs--,i.push(a)}t&&u(d(t,e),e);for(n=0;n<i.length;n++){var a;if(0===(a=i[n]).refs){for(var h=0;h<a.parts.length;h++)a.parts[h]();delete r[a.id]}}}};var y,g=(y=[],function(t,e){return y[t]=e,y.filter(Boolean).join("\n")});function x(t,e,s,i){var n=s?"":i.css;if(t.styleSheet)t.styleSheet.cssText=g(e,n);else{var r=document.createTextNode(n),o=t.childNodes;o[e]&&t.removeChild(o[e]),o.length?t.insertBefore(r,o[e]):t.appendChild(r)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var s=e.protocol+"//"+e.host,i=s+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var n,r=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(r)?t:(n=0===r.indexOf("//")?r:0===r.indexOf("/")?s+r:i+r.replace(/^\.\//,""),"url("+JSON.stringify(n)+")")})}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(20),n=s(25),r=s(27),o=s(2),a=s(28),h=s(30),c=s(4),l=s(3),_=s(34),u=s(35),d=s(36),p=s(37),f=s(38),v=s(39),m=s(41),b=s(6);e.Game=class{constructor(t){this.config=t,this.riotPolice=[],this.pizzas=[],this.staticObjects=[],this.system=new l.Collisions,this.player=new i.Player(new c.Transform(new o.Vector(2050,1650),0),this),this.room={width:t.world.width,height:t.world.height,map:new r.Map(t.world.width,t.world.height)},this.createRiotPolice(),this.room.map.generate(),this.camera=new n.Camera(0,0,this.config.game.width,this.config.game.height,this.room.width,this.room.height),this.camera.follow(this.player.transform,this.config.game.width/2,this.config.game.height/2),this.createWalls(),this.createTowns(),this.createStatic(),this.boss=new v.Boss(new c.Transform(new o.Vector(3400,1300),1.5*Math.PI),this),this.house=new m.House(new c.Transform(new o.Vector(3540,1320),0),this),this.assets=b.Assets.getInstance()}renderSquare(t){t.drawImage(this.assets.get("square.png"),-this.camera.xView,-this.camera.yView,this.config.world.width,this.config.world.height)}render(t){this.renderSquare(t),this.player.render(t,this.camera),this.house.render(t,this.camera),this.boss.render(t,this.camera),this.renderRiotPolice(t),this.renderPizzas(t),this.renderWalls(t),this.renderTowns(t),this.renderStatic(t)}searchIntersection(){const t=new Map;if(this.pizzas.length&&(this.pizzas.forEach(e=>{this.riotPolice.forEach(s=>{const i=o.Vector.distance(s.transform.position,e.transform.position);o.Vector.distance(s.transform.position,e.transform.position)<800&&!e.isWaitingToEating&&!s.target&&(t.has(e)?t.get(e).push({cosmonaut:s,distance:i}):t.set(e,[{cosmonaut:s,distance:i}]))})}),t.size))for(let[e,s]of t){const t=s.reduce((t,e)=>e.distance<t?e.distance:t,s[0].distance),{cosmonaut:i}=s.find(e=>e.distance===t);i.target=e,e.isWaitingToEating=!0}}update(t){this.system.update(),this.house.update(t),this.player.update(t),this.boss.update(t),this.updateRiotPolice(t),this.camera.update()}renderRiotPolice(t){this.riotPolice.forEach(e=>{e.render(t,this.camera)})}updateRiotPolice(t){this.riotPolice.forEach(e=>{e.update(t)})}renderPizzas(t){this.pizzas.forEach(e=>{e.render(t,this.camera)})}createRiotPolice(){Array.from({length:24}).forEach((t,e)=>{const s=new c.Transform(new o.Vector(2150,760+40*e+1),1.5*Math.PI),i=new a.Cosmonaut(s,this);this.riotPolice.push(i)}),[{x:700,y:800,rotate:.5*Math.PI}].forEach(t=>{const e=new c.Transform(new o.Vector(t.x,t.y),t.rotate),s=new a.Cosmonaut(e,this);this.riotPolice.push(s)})}eatPizza(t){const e=this.pizzas.findIndex(e=>e.id===t.id);-1!==e&&this.pizzas.splice(e,1)}createPizzaObject(t){this.pizzas.length>=5||(this.pizzas.push(new h.Pizza(new c.Transform(new o.Vector(t.x,t.y),0))),this.searchIntersection())}createWalls(){this.walls=u.WALLS_LIST.map((t,e)=>{const s=new o.Vector(t.x,t.y),i=new c.Transform(s,t.rotate);return new _.Wall(i,this)})}renderWalls(t){this.walls.forEach(e=>e.render(t,this.camera))}createTowns(){this.towns=d.TOWN_LIST.map((t,e)=>{const s=new o.Vector(t.x,t.y),i=new c.Transform(s,t.rotate);return new p.Town(i,this)})}renderTowns(t){this.towns.forEach(e=>e.render(t,this.camera))}createStatic(){this.staticObjects.push(new f.StaticObject("salsa.svg",89,89,1.5*Math.PI,new o.Vector(1550,1250),this)),this.staticObjects.push(new f.StaticObject("dodo.svg",50,70,.4*Math.PI,new o.Vector(1350,1420),this)),this.staticObjects.push(new f.StaticObject("sheremet.svg",120,120,0,new o.Vector(1650,1520),this)),this.staticObjects.push(new f.StaticObject("ten-gubernatora.svg",70,70,0,new o.Vector(1380,1660),this)),this.staticObjects.push(new f.StaticObject("maxim_menailo.svg",90,90,0,new o.Vector(1350,980),this)),this.staticObjects.push(new f.StaticObject("devi-u-popa.svg",50,90,.2*Math.PI,new o.Vector(1396,1020),this)),this.staticObjects.push(new f.StaticObject("roizman.svg",120,120,0,new o.Vector(1280,1520),this)),this.staticObjects.push(new f.StaticObject("mer.svg",160,160,0,new o.Vector(1860,1780),this)),this.staticObjects.push(new f.StaticObject("rinat.svg",70,70,0,new o.Vector(1750,1230),this)),this.staticObjects.push(new f.StaticObject("tsarikov.svg",55,85,0,new o.Vector(1780,1130),this)),this.staticObjects.push(new f.StaticObject("naum-blik.svg",55,85,0,new o.Vector(2040,890),this)),this.staticObjects.push(new f.StaticObject("ded.svg",180,130,0,new o.Vector(1895,1450),this)),this.staticObjects.push(new f.StaticObject("deva-vesna.svg",70,90,0,new o.Vector(1895,1250),this)),this.staticObjects.push(new f.StaticObject("shahrin.svg",90,90,0,new o.Vector(1350,650),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,0,new o.Vector(1350,850),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,0,new o.Vector(850,980),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,0,new o.Vector(1780,1450),this)),this.staticObjects.push(new f.StaticObject("devi-u-popa.svg",50,90,.2*Math.PI,new o.Vector(950,980),this)),this.staticObjects.push(new f.StaticObject("titushki.svg",400,400,1.5*Math.PI,new o.Vector(3550,1300),this,!0)),this.staticObjects.push(new f.StaticObject("we.svg",190,215,1.9*Math.PI,new o.Vector(350,1300),this)),this.staticObjects.push(new f.StaticObject("yandex-eda-tri-parnya.svg",200,85,1.9*Math.PI,new o.Vector(550,1300),this)),this.staticObjects.push(new f.StaticObject("yandex-eda-tri-parnya.svg",200,85,1.9*Math.PI,new o.Vector(690,820),this)),this.staticObjects.push(new f.StaticObject("dodo.svg",50,70,.4*Math.PI,new o.Vector(850,720),this)),this.staticObjects.push(new f.StaticObject("grupa2.svg",150,150,1.15*Math.PI,new o.Vector(940,720),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new o.Vector(940,960),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new o.Vector(1780,1024),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new o.Vector(1880,1144),this)),this.staticObjects.push(new f.StaticObject("human.svg",95,95,0,new o.Vector(750,1300),this))}renderStatic(t){this.staticObjects.forEach(e=>e.render(t,this.camera))}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(2),o=s(3);class a extends n.Drawer{render(t){t.drawImage(this.assets.get("player.svg"),-18,-48,52,63)}}class h extends i.GameObject{constructor(t,e){super(t,new a(t),e.system.createCircle(t.position.x,t.position.y,25)),this.game=e,this.speed=400,this.pressedKeys={},this.damageCollider=e.system.createPolygon(t.position.x,t.position.y,[[-10,-30],[-10,30],[0,0]],t.angle),this.listen()}listen(){document.addEventListener("keydown",t=>{this.pressedKeys[t.keyCode]=!0}),document.addEventListener("keyup",t=>{this.pressedKeys[t.keyCode]=!1}),document.addEventListener("mousemove",t=>{const e=this.game.camera,s=new r.Vector(t.pageX+e.xView,t.pageY+e.yView);this.transform.lookAt(s)}),document.addEventListener("click",t=>{const e=this.game.walls.find(t=>{const e=new o.Result;return this.damageCollider.collides(t.collider,e)});e?e.takeDamage():this.game.createPizzaObject(this.transform.position)})}render(t,e){super.render(t,e),this.damageCollider&&(t.rotate(-this.transform.angle),t.translate(-this.transform.position.x,-this.transform.position.y),t.strokeStyle="red",t.beginPath(),this.damageCollider.draw(t),t.stroke(),t.setTransform(1,0,0,1,0,0))}get direction(){let t=r.Vector.zero();return Object.keys(h.directions).forEach(e=>{(this.pressedKeys[e]||!1)&&(t=t.add(new r.Vector(...h.directions[e])))}),t}update(t){super.update(t);const e=this.direction.multiple(this.speed).multiple(t);this.transform.setPosition(this.transform.position.add(e)),this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y,this.damageCollider.x=this.transform.position.x,this.damageCollider.y=this.transform.position.y,this.damageCollider.angle=this.transform.angle,this.game.riotPolice.forEach(t=>{const e=new o.Result;if(this.collider.collides(t.collider,e)){const t=new r.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}}),this.game.walls.forEach(t=>{const e=new o.Result;if(this.collider.collides(t.collider,e)){if(t.hp<=0)return;const s=new r.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(s))}}),this.game.towns.forEach(t=>{const e=new o.Result;if(this.collider.collides(t.collider,e)){const t=new r.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}}),this.game.staticObjects.forEach(t=>{if(t.offColider)return;const e=new o.Result;if(this.collider.collides(t.static.collider,e)){const t=new r.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}})}}h.directions={87:[0,-1],65:[-1,0],83:[0,1],68:[1,0]},e.Player=h},function(t,e,s){const i=s(22);t.exports=class{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const s=t._polygon,n=t.x,r=t.y;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const o=t._bvh_padding,a=s?0:t.radius*t.scale,h=(s?t._min_x:n-a)-o,c=(s?t._min_y:r-a)-o,l=(s?t._max_x:n+a)+o,_=(s?t._max_y:r+a)+o;t._bvh_min_x=h,t._bvh_min_y=c,t._bvh_max_x=l,t._bvh_max_y=_;let u=this._hierarchy,d=0;if(u)for(;;){if(!u._bvh_branch){const e=u._bvh_parent,s=u._bvh_min_x,n=u._bvh_min_y,r=u._bvh_max_x,o=u._bvh_max_y,a=u._bvh_parent=t._bvh_parent=i.getBranch();a._bvh_parent=e,a._bvh_left=u,a._bvh_right=t,a._bvh_sort=d++,a._bvh_min_x=h<s?h:s,a._bvh_min_y=c<n?c:n,a._bvh_max_x=l>r?l:r,a._bvh_max_y=_>o?_:o,e?e._bvh_left===u?e._bvh_left=a:e._bvh_right=a:this._hierarchy=a;break}{const t=u._bvh_left,e=t._bvh_min_y,s=t._bvh_max_x,i=t._bvh_max_y,n=h<t._bvh_min_x?h:t._bvh_min_x,r=c<e?c:e,o=l>s?l:s,a=_>i?_:i,p=(o-n)*(a-r)-(s-t._bvh_min_x)*(i-e),f=u._bvh_right,v=f._bvh_min_x,m=f._bvh_min_y,b=f._bvh_max_x,y=f._bvh_max_y,g=h<v?h:v,x=c<m?c:m,w=l>b?l:b,O=_>y?_:y,P=(w-g)*(O-x)-(b-v)*(y-m);u._bvh_sort=d++,u._bvh_min_x=n<g?n:g,u._bvh_min_y=r<x?r:x,u._bvh_max_x=o>w?o:w,u._bvh_max_y=a>O?a:O,u=p<=P?t:f}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const s=t._bvh_parent,n=s._bvh_parent,r=s._bvh_left,o=r===t?s._bvh_right:r;if(o._bvh_parent=n,o._bvh_branch&&(o._bvh_sort=s._bvh_sort),n){n._bvh_left===s?n._bvh_left=o:n._bvh_right=o;let t=n;for(;t;){const e=t._bvh_left,s=e._bvh_min_x,i=e._bvh_min_y,n=e._bvh_max_x,r=e._bvh_max_y,o=t._bvh_right,a=o._bvh_min_x,h=o._bvh_min_y,c=o._bvh_max_x,l=o._bvh_max_y;t._bvh_min_x=s<a?s:a,t._bvh_min_y=i<h?i:h,t._bvh_max_x=n>c?n:c,t._bvh_max_y=r>l?r:l,t=t._bvh_parent}}else this._hierarchy=o;i.releaseBranch(s)}update(){const t=this._bodies,e=t.length;for(let s=0;s<e;++s){const e=t[s];let i=!1;if(i||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,i=!0),!i){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const s=e.x,n=e.y,r=t?0:e.radius*e.scale,o=t?e._min_x:s-r,a=t?e._min_y:n-r,h=t?e._max_x:s+r,c=t?e._max_y:n+r;i=o<e._bvh_min_x||a<e._bvh_min_y||h>e._bvh_max_x||c>e._bvh_max_y}i&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],s=t._bvh_min_x,i=t._bvh_min_y,n=t._bvh_max_x,r=t._bvh_max_y;let o=this._hierarchy,a=!0;if(!o||!o._bvh_branch)return e;for(;o;){if(a){a=!1;let t=o._bvh_branch?o._bvh_left:null;for(;t&&t._bvh_max_x>=s&&t._bvh_max_y>=i&&t._bvh_min_x<=n&&t._bvh_min_y<=r;)t=(o=t)._bvh_branch?o._bvh_left:null}const h=o._bvh_branch,c=h?o._bvh_right:null;if(c&&c._bvh_max_x>s&&c._bvh_max_y>i&&c._bvh_min_x<n&&c._bvh_min_y<r)o=c,a=!0;else{h||o===t||e.push(o);let s=o._bvh_parent;if(!s)break;for(;s&&s._bvh_right===o;)s=(o=s)._bvh_parent;o=s}}return e}draw(t){const e=this._bodies,s=e.length;for(let i=0;i<s;++i)e[i].draw(t)}drawBVH(t){let e=this._hierarchy,s=!0;for(;e;){if(s){s=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const i=e._bvh_branch,n=e._bvh_min_x,r=e._bvh_min_y,o=e._bvh_max_x,a=e._bvh_max_y,h=i?e._bvh_right:null;if(t.moveTo(n,r),t.lineTo(o,r),t.lineTo(o,a),t.lineTo(n,a),t.lineTo(n,r),h)e=h,s=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}},t.exports.default=t.exports},function(t,e){const s=[];class i{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return s.length?s.pop():new i}static releaseBranch(t){s.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}t.exports=i,t.exports.default=t.exports},function(t,e,s){const i=s(7);t.exports=class extends i{constructor(t=0,e=0,s=0,i=1,n=0){super(t,e,n),this.radius=s,this.scale=i}draw(t){const e=this.x,s=this.y,i=this.radius*this.scale;t.moveTo(e+i,s),t.arc(e,s,i,0,2*Math.PI)}},t.exports.default=t.exports},function(t,e,s){const i=s(10);class n extends i{constructor(t=0,e=0,s=0){super(t,e,[[0,0]],0,1,1,s),this._point=!0}}n.prototype.setPoints=void 0,t.exports=n,t.exports.default=t.exports},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(26);var n={NONE:"none",HORIZONTAL:"horizontal",VERTICAL:"vertical",BOTH:"both"};e.Camera=class{constructor(t,e,s,r,o,a){this.xView=t||0,this.yView=e||0,this.xDeadZone=0,this.yDeadZone=0,this.wView=s,this.hView=r,this.axis=n.BOTH,this.followed=null,this.viewportRect=new i.Rectangle(this.xView,this.yView,this.wView,this.hView),this.worldRect=new i.Rectangle(0,0,o,a)}follow(t,e,s){this.followed=t,this.xDeadZone=e,this.yDeadZone=s}update(){null!=this.followed&&(this.axis!=n.HORIZONTAL&&this.axis!=n.BOTH||(this.followed.position.x-this.xView+this.xDeadZone>this.wView?this.xView=this.followed.position.x-(this.wView-this.xDeadZone):this.followed.position.x-this.xDeadZone<this.xView&&(this.xView=this.followed.position.x-this.xDeadZone)),this.axis!=n.VERTICAL&&this.axis!=n.BOTH||(this.followed.position.y-this.yView+this.yDeadZone>this.hView?this.yView=this.followed.position.y-(this.hView-this.yDeadZone):this.followed.position.y-this.yDeadZone<this.yView&&(this.yView=this.followed.position.y-this.yDeadZone))),this.viewportRect.set(this.xView,this.yView),this.viewportRect.within(this.worldRect)||(this.viewportRect.left<this.worldRect.left&&(this.xView=this.worldRect.left),this.viewportRect.top<this.worldRect.top&&(this.yView=this.worldRect.top),this.viewportRect.right>this.worldRect.right&&(this.xView=this.worldRect.right-this.wView),this.viewportRect.bottom>this.worldRect.bottom&&(this.yView=this.worldRect.bottom-this.hView))}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Rectangle=class{constructor(t,e,s,i){this.left=t||0,this.top=e||0,this.width=s||0,this.height=i||0,this.right=this.left+this.width,this.bottom=this.top+this.height}set(t,e,s,i){this.left=t,this.top=e,this.width=s||this.width,this.height=i||this.height,this.right=this.left+this.width,this.bottom=this.top+this.height}within(t){return t.left<=this.left&&t.right>=this.right&&t.top<=this.top&&t.bottom>=this.bottom}overlaps(t){return this.left<t.right&&t.left<this.right&&this.top<t.bottom&&t.top<this.bottom}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Map=class{constructor(t,e){this.width=t,this.height=e,this.image=null}generate(){var t=document.createElement("canvas").getContext("2d");t.canvas.width=this.width,t.canvas.height=this.height;var e=1+~~(this.width/44),s=1+~~(this.height/44),i="black";t.save(),t.fillStyle="black";for(var n=0,r=0;r<e;n+=44,r++){t.beginPath();for(var o=0,a=0;a<s;o+=44,a++)t.rect(n,o,42,42);i="#fff",t.fillStyle=i,t.fill(),t.closePath()}t.restore(),this.image=new Image,this.image.src=t.canvas.toDataURL("image/png"),t=null}draw(t,e,s){var i,n,r,o,a,h;i=e,n=s,r=t.canvas.width,o=t.canvas.height,this.image.width-i<r&&(r=this.image.width-i),this.image.height-n<o&&(o=this.image.height-n),a=r,h=o,t.drawImage(this.image,i,n,r,o,0,0,a,h)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(4),o=s(2),a=s(29),h=s(3);class c extends n.Drawer{render(t){t.drawImage(this.assets.get("cosmonaut.svg"),-30,-55,62,85)}}e.Cosmonaut=class extends i.GameObject{constructor(t,e){super(t,new c(t),e.system.createCircle(t.position.x,t.position.y,15)),this.game=e,this.speed=a.getRandomBeetwen(70,100),this.target=null,this._transform=r.Transform.clone(t),window.cosmonaut=this}get direction(){let t=o.Vector.zero();const e=this.target?this.target.transform.position:this._transform.position;return o.Vector.distance(this.transform.position,e)>=5?(t=e.sub(this.transform.position),this.transform.lookAt(e)):(this.target&&(this.game.eatPizza(this.target),this.target=null),this.transform.rotate(this._transform.angle)),t.normalize()}update(t){super.update(t);const e=this.direction.multiple(this.speed*t);this.transform.setPosition(this.transform.position.add(e)),this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y,this.game.walls.forEach(t=>{const e=new h.Result;if(this.collider.collides(t.collider,e)){if(t.hp<=0)return;const s=new o.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y+5);this.transform.setPosition(this.transform.position.add(s))}}),this.game.towns.forEach(t=>{const e=new h.Result;if(this.collider.collides(t.collider,e)){const t=new o.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y+5);this.transform.setPosition(this.transform.position.add(t))}}),this.game.staticObjects.forEach(t=>{const e=new h.Result;if(this.collider.collides(t.static.collider,e)){console.log("COLLAPSE");const t=new o.Vector(-e.overlap*e.overlap_x,-e.overlap*e.overlap_y);this.transform.setPosition(this.transform.position.add(t))}})}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.drawCircle=function(t,e,s,i,n=!0){t.beginPath(),t.arc(e,s,i,0,2*Math.PI),n?t.fill():t.stroke()},e.drawTriangle=function(t,e,s,i,n=!0){t.beginPath(),t.moveTo(e,s),t.arc(e,s,i,0,Math.PI/3),n?t.fill():t.stroke()},e.getRandomBeetwen=function(t,e){return Math.random()*e+t}},function(t,e,s){"use strict";var i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(s(31)),r=s(0),o=s(1);class a extends o.Drawer{render(t){t.drawImage(this.assets.get("pizza.svg"),-15,-15,30,30)}}e.PizzaDrawer=a;e.Pizza=class extends r.GameObject{constructor(t){super(t,new a(t)),this.id=n.default(),this.isWaitingToEating=!1}}},function(t,e,s){var i=s(32),n=s(33),r=n;r.v1=i,r.v4=n,t.exports=r},function(t,e,s){var i,n,r=s(11),o=s(12),a=0,h=0;t.exports=function(t,e,s){var c=e&&s||0,l=e||[],_=(t=t||{}).node||i,u=void 0!==t.clockseq?t.clockseq:n;if(null==_||null==u){var d=r();null==_&&(_=i=[1|d[0],d[1],d[2],d[3],d[4],d[5]]),null==u&&(u=n=16383&(d[6]<<8|d[7]))}var p=void 0!==t.msecs?t.msecs:(new Date).getTime(),f=void 0!==t.nsecs?t.nsecs:h+1,v=p-a+(f-h)/1e4;if(v<0&&void 0===t.clockseq&&(u=u+1&16383),(v<0||p>a)&&void 0===t.nsecs&&(f=0),f>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=p,h=f,n=u;var m=(1e4*(268435455&(p+=122192928e5))+f)%4294967296;l[c++]=m>>>24&255,l[c++]=m>>>16&255,l[c++]=m>>>8&255,l[c++]=255&m;var b=p/4294967296*1e4&268435455;l[c++]=b>>>8&255,l[c++]=255&b,l[c++]=b>>>24&15|16,l[c++]=b>>>16&255,l[c++]=u>>>8|128,l[c++]=255&u;for(var y=0;y<6;++y)l[c+y]=_[y];return e||o(l)}},function(t,e,s){var i=s(11),n=s(12);t.exports=function(t,e,s){var r=e&&s||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var o=(t=t||{}).random||(t.rng||i)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var a=0;a<16;++a)e[r+a]=o[a];return e||n(o)}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(5);class o extends n.Drawer{constructor(){super(...arguments),this.collider=null,this.camera=null,this.hp=o.MAX_HP,this.width=r.WALL_WIDTH,this.height=r.WALL_HEIGHT,this.map={5:"wall.svg",4:"wall1.svg",3:"wall2.svg",2:"wall3.svg",1:"wall4.svg"}}render(t){const e=this.map[this.hp]?this.map[this.hp]:"wall5.svg";t.drawImage(this.assets.get(e),-this.width,-this.height/2,this.width,this.height)}}o.MAX_HP=5;e.Wall=class extends i.GameObject{constructor(t,e){super(t,new o(t),e.system.createPolygon(t.position.x,t.position.y,[[0,-r.WALL_HEIGHT/2],[-r.WALL_WIDTH,-r.WALL_HEIGHT/2]],t.angle)),this.transform=t,this.game=e,this.hp=5,this.drawer.collider=this.collider,this.drawer.camera=this.game.camera}takeDamage(){this.hp--,this.drawer.hp--}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(5);e.WALLS_LIST=(()=>{const t=[{x:i.WALL_X,y:i.WALL_START-1,rotate:1.5*Math.PI}];for(let e=0;e<4;e++)t.push({x:i.WALL_X,y:t[e].y+i.WALL_WIDTH,rotate:1.5*Math.PI});const e=[{x:i.WALL_X+125,y:i.WALL_START-14,rotate:.039}];for(let t=0;t<16;t++)e.push({x:e[t].x+119.5,y:e[t].y+3.6,rotate:.039});const s=[{x:i.WALL_X,y:t[t.length-1].y+140,rotate:1.07*Math.PI}];for(let t=0;t<9;t++)s.push({x:s[t].x+116,y:s[t].y+26,rotate:1.07*Math.PI});const n=[{x:s[s.length-1].x+114,y:s[t.length-1].y+154,rotate:.95*Math.PI}];for(let t=0;t<2;t++)n.push({x:n[t].x+118,y:n[t].y-18,rotate:.95*Math.PI});const r=[{x:n[n.length-1].x+150,y:n[n.length-1].y-30,rotate:.74*Math.PI}];for(let t=0;t<5;t++)r.push({x:r[t].x+82,y:r[t].y-84,rotate:.75*Math.PI});const o=[{x:r[r.length-1].x+96,y:r[r.length-1].y-100,rotate:-1.5*Math.PI},{x:r[r.length-1].x+96,y:r[r.length-1].y-215,rotate:-1.5*Math.PI}];return console.log(o),t.concat(s).concat(n).concat(r).concat(o).concat(e)})()},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(5);e.TOWN_LIST=[{x:i.WALL_X,y:i.TOWN_START,rotate:1.5*Math.PI},{x:i.WALL_X,y:i.TOWN_START+5*i.WALL_WIDTH+36,rotate:1.5*Math.PI},{x:3766,y:1734,rotate:.74*Math.PI},{rotate:.75*Math.PI,x:4281,y:1208},{x:4285,y:960,rotate:1.5*Math.PI}]},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(5);class o extends n.Drawer{constructor(){super(...arguments),this.width=r.TOWN_HEIGHT,this.height=r.TOWN_HEIGHT}render(t){t.drawImage(this.assets.get("town.svg"),-this.width/2,-this.height/2,this.width,this.height)}}e.Town=class extends i.GameObject{constructor(t,e){super(t,new o(t),e.system.createCircle(t.position.x,t.position.y,20)),this.transform=t}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(4);class o extends n.Drawer{constructor(t,e,s,i){super(t),this.imgPath=e,this.w=s,this.h=i}render(t){t.drawImage(this.assets.get(this.imgPath),-this.w/2,-this.h/2,this.w,this.h)}}class a extends i.GameObject{constructor(t,e,s,i,n){super(t,new o(t,e,s,i),n.system.createCircle(t.position.x,t.position.y,(s>i?s:i)/2)),this.transform=t,this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y,console.log(this.collider.x,this.collider.y)}}e.Static=a;e.StaticObject=class{constructor(t,e,s,i,n,o,h=!1){this.offColider=h;const c=new r.Transform(n,i);this.static=new a(c,t,e,s,o)}render(t,e){this.static.render(t,e)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(4),o=s(2),a=s(3);s(40);class h extends n.Drawer{render(t){t.drawImage(this.assets.get("boss.svg"),-30,-55,62,85)}}e.Boss=class extends i.GameObject{constructor(t,e){super(t,new h(t),e.system.createCircle(t.position.x,t.position.y,200)),this.game=e,this.speed=20,this.directionVector=null,this._transform=r.Transform.clone(t),window.cosmonaut=this}get direction(){return o.Vector.zero(),this.directionVector?this.directionVector:o.Vector.zero()}update(t){super.update(t);const e=this.direction.multiple(this.speed*t);this.transform.setPosition(this.transform.position.add(e)),this.collider.x=this.transform.position.x,this.collider.y=this.transform.position.y;const s=new a.Result;if(this.collider.collides(this.game.player.collider,s)){this.directionVector=new o.Vector(0,-5);const t=new o.Vector(-s.overlap*s.overlap_x,-s.overlap*s.overlap_y/2);this.transform.setPosition(this.transform.position.add(t))}}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Animation=class{constructor(t,e,s,i=!1){this.value=t,this.target=e,this.duration=s,this.reverse=i,this.isStopped=!1,this.currentTime=this.timeout,this.startValue=t,this.startTarget=e,this.stepValue=(this.target-this.startValue)/60,this.timeout=this.stepValue/this.duration,this.currentTime=this.timeout,console.log("tm",this.timeout,this.duration)}update(t){this.isStopped||(console.log("ct",this.currentTime,t),this.currentTime-=t,this.currentTime<=0&&(this.currentTime=this.timeout,this.value+=this.value>this.target?-this.stepValue:this.stepValue,this.step()),this.value>=this.target&&(this.reverse?this.target=this.target===this.startTarget?this.startValue:this.startTarget:this.isStopped=!0))}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=s(0),n=s(1),r=s(43);class o extends n.Drawer{constructor(){super(...arguments),this.hide=!1}render(t){this.hide&&(t.globalAlpha=.3);const e=this.assets.get("house.svg");t.drawImage(e,-e.width/2,-e.height/2,e.width,e.height),t.globalAlpha=1}}e.HouseDrawer=o;e.House=class extends i.GameObject{constructor(t,e){super(t,new o(t),e.system.createCircle(t.position.x,t.position.y,200)),this.game=e}update(t){super.update(t);const e=new r.Result;this.drawer.hide=!!this.collider.collides(this.game.player.collider,e)}}},function(t,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Config=class{constructor(){this.game={width:window.innerWidth,height:window.innerHeight},this.world={width:4444,height:2218}}}},function(t,e,s){"use strict";s.r(e);const i=[];class n{constructor(){this._bvh_parent=null,this._bvh_branch=!0,this._bvh_left=null,this._bvh_right=null,this._bvh_sort=0,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}static getBranch(){return i.length?i.pop():new n}static releaseBranch(t){i.push(t)}static sortBranches(t,e){return t.sort>e.sort?-1:1}}class r{constructor(){this._hierarchy=null,this._bodies=[],this._dirty_branches=[]}insert(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=this,this._bodies.push(t)}const s=t._polygon,i=t.x,r=t.y;s&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords();const o=t._bvh_padding,a=s?0:t.radius*t.scale,h=(s?t._min_x:i-a)-o,c=(s?t._min_y:r-a)-o,l=(s?t._max_x:i+a)+o,_=(s?t._max_y:r+a)+o;t._bvh_min_x=h,t._bvh_min_y=c,t._bvh_max_x=l,t._bvh_max_y=_;let u=this._hierarchy,d=0;if(u)for(;;){if(!u._bvh_branch){const e=u._bvh_parent,s=u._bvh_min_x,i=u._bvh_min_y,r=u._bvh_max_x,o=u._bvh_max_y,a=u._bvh_parent=t._bvh_parent=n.getBranch();a._bvh_parent=e,a._bvh_left=u,a._bvh_right=t,a._bvh_sort=d++,a._bvh_min_x=h<s?h:s,a._bvh_min_y=c<i?c:i,a._bvh_max_x=l>r?l:r,a._bvh_max_y=_>o?_:o,e?e._bvh_left===u?e._bvh_left=a:e._bvh_right=a:this._hierarchy=a;break}{const t=u._bvh_left,e=t._bvh_min_y,s=t._bvh_max_x,i=t._bvh_max_y,n=h<t._bvh_min_x?h:t._bvh_min_x,r=c<e?c:e,o=l>s?l:s,a=_>i?_:i,p=(o-n)*(a-r)-(s-t._bvh_min_x)*(i-e),f=u._bvh_right,v=f._bvh_min_x,m=f._bvh_min_y,b=f._bvh_max_x,y=f._bvh_max_y,g=h<v?h:v,x=c<m?c:m,w=l>b?l:b,O=_>y?_:y,P=(w-g)*(O-x)-(b-v)*(y-m);u._bvh_sort=d++,u._bvh_min_x=n<g?n:g,u._bvh_min_y=r<x?r:x,u._bvh_max_x=o>w?o:w,u._bvh_max_y=a>O?a:O,u=p<=P?t:f}}else this._hierarchy=t}remove(t,e=!1){if(!e){const e=t._bvh;if(e&&e!==this)throw new Error("Body belongs to another collision system");t._bvh=null,this._bodies.splice(this._bodies.indexOf(t),1)}if(this._hierarchy===t)return void(this._hierarchy=null);const s=t._bvh_parent,i=s._bvh_parent,r=s._bvh_left,o=r===t?s._bvh_right:r;if(o._bvh_parent=i,o._bvh_branch&&(o._bvh_sort=s._bvh_sort),i){i._bvh_left===s?i._bvh_left=o:i._bvh_right=o;let t=i;for(;t;){const e=t._bvh_left,s=e._bvh_min_x,i=e._bvh_min_y,n=e._bvh_max_x,r=e._bvh_max_y,o=t._bvh_right,a=o._bvh_min_x,h=o._bvh_min_y,c=o._bvh_max_x,l=o._bvh_max_y;t._bvh_min_x=s<a?s:a,t._bvh_min_y=i<h?i:h,t._bvh_max_x=n>c?n:c,t._bvh_max_y=r>l?r:l,t=t._bvh_parent}}else this._hierarchy=o;n.releaseBranch(s)}update(){const t=this._bodies,e=t.length;for(let s=0;s<e;++s){const e=t[s];let i=!1;if(i||e.padding===e._bvh_padding||(e._bvh_padding=e.padding,i=!0),!i){const t=e._polygon;t&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords();const s=e.x,n=e.y,r=t?0:e.radius*e.scale,o=t?e._min_x:s-r,a=t?e._min_y:n-r,h=t?e._max_x:s+r,c=t?e._max_y:n+r;i=o<e._bvh_min_x||a<e._bvh_min_y||h>e._bvh_max_x||c>e._bvh_max_y}i&&(this.remove(e,!0),this.insert(e,!0))}}potentials(t){const e=[],s=t._bvh_min_x,i=t._bvh_min_y,n=t._bvh_max_x,r=t._bvh_max_y;let o=this._hierarchy,a=!0;if(!o||!o._bvh_branch)return e;for(;o;){if(a){a=!1;let t=o._bvh_branch?o._bvh_left:null;for(;t&&t._bvh_max_x>=s&&t._bvh_max_y>=i&&t._bvh_min_x<=n&&t._bvh_min_y<=r;)t=(o=t)._bvh_branch?o._bvh_left:null}const h=o._bvh_branch,c=h?o._bvh_right:null;if(c&&c._bvh_max_x>s&&c._bvh_max_y>i&&c._bvh_min_x<n&&c._bvh_min_y<r)o=c,a=!0;else{h||o===t||e.push(o);let s=o._bvh_parent;if(!s)break;for(;s&&s._bvh_right===o;)s=(o=s)._bvh_parent;o=s}}return e}draw(t){const e=this._bodies,s=e.length;for(let i=0;i<s;++i)e[i].draw(t)}drawBVH(t){let e=this._hierarchy,s=!0;for(;e;){if(s){s=!1;let t=e._bvh_branch?e._bvh_left:null;for(;t;)t=(e=t)._bvh_branch?e._bvh_left:null}const i=e._bvh_branch,n=e._bvh_min_x,r=e._bvh_min_y,o=e._bvh_max_x,a=e._bvh_max_y,h=i?e._bvh_right:null;if(t.moveTo(n,r),t.lineTo(o,r),t.lineTo(o,a),t.lineTo(n,a),t.lineTo(n,r),h)e=h,s=!0;else{let t=e._bvh_parent;if(!t)break;for(;t&&t._bvh_right===e;)t=(e=t)._bvh_parent;e=t}}}}class o{constructor(){this.collision=!1,this.a=null,this.b=null,this.a_in_b=!1,this.a_in_b=!1,this.overlap=0,this.overlap_x=0,this.overlap_y=0}}function a(t,e,s=null,i=!0){const n=t._polygon,r=e._polygon;let o=!1;return s&&(s.a=t,s.b=e,s.a_in_b=!0,s.b_in_a=!0,s.overlap=null,s.overlap_x=0,s.overlap_y=0),n&&(t._dirty_coords||t.x!==t._x||t.y!==t._y||t.angle!==t._angle||t.scale_x!==t._scale_x||t.scale_y!==t._scale_y)&&t._calculateCoords(),r&&(e._dirty_coords||e.x!==e._x||e.y!==e._y||e.angle!==e._angle||e.scale_x!==e._scale_x||e.scale_y!==e._scale_y)&&e._calculateCoords(),i&&!function(t,e){const s=t._polygon,i=s?0:t.x,n=s?0:t.y,r=s?0:t.radius*t.scale,o=s?t._min_x:i-r,a=s?t._min_y:n-r,h=s?t._max_x:i+r,c=s?t._max_y:n+r,l=e._polygon,_=l?0:e.x,u=l?0:e.y,d=l?0:e.radius*e.scale,p=l?e._min_x:_-d,f=l?e._min_y:u-d,v=l?e._max_x:_+d,m=l?e._max_y:u+d;return o<v&&a<m&&h>p&&c>f}(t,e)||(n&&t._dirty_normals&&t._calculateNormals(),r&&e._dirty_normals&&e._calculateNormals(),o=n&&r?function(t,e,s=null){const i=t._coords.length,n=e._coords.length;if(2===i&&2===n){const i=t._coords,n=e._coords;return s&&(s.overlap=0),i[0]===n[0]&&i[1]===n[1]}const r=t._coords,o=e._coords,a=t._normals,h=e._normals;if(i>2)for(let t=0,e=1;t<i;t+=2,e+=2)if(c(r,o,a[t],a[e],s))return!1;if(n>2)for(let t=0,e=1;t<n;t+=2,e+=2)if(c(r,o,h[t],h[e],s))return!1;return!0}(t,e,s):n?h(t,e,s,!1):r?h(e,t,s,!0):function(t,e,s=null){const i=t.radius*t.scale,n=e.radius*e.scale,r=e.x-t.x,o=e.y-t.y,a=i+n,h=r*r+o*o;if(h>a*a)return!1;if(s){const t=Math.sqrt(h);s.a_in_b=i<=n&&t<=n-i,s.b_in_a=n<=i&&t<=i-n,s.overlap=a-t,s.overlap_x=r/t,s.overlap_y=o/t}return!0}(t,e,s)),s&&(s.collision=o),o}function h(t,e,s=null,i=!1){const n=t._coords,r=t._edges,o=t._normals,a=e.x,h=e.y,c=e.radius*e.scale,l=2*c,_=c*c,u=n.length;let d=!0,p=!0,f=null,v=0,m=0;if(2===u){const t=a-n[0],e=h-n[1],i=t*t+e*e;if(i>_)return!1;if(s){const s=Math.sqrt(i);f=c-s,v=t/s,m=e/s,p=!1}}else for(let t=0,e=1;t<u;t+=2,e+=2){const i=a-n[t],b=h-n[e],y=r[t],g=r[e],x=i*y+b*g,w=x<0?-1:x>y*y+g*g?1:0;let O=!1,P=0,j=0,V=0;if(s&&d&&i*i+b*b>_&&(d=!1),w){const e=-1===w,o=e?0===t?u-2:t-2:t===u-2?0:t+2,l=o+1,d=a-n[o],f=h-n[l],v=r[o],m=r[l],y=d*v+f*m;if((y<0?-1:y>v*v+m*m?1:0)===-w){const t=e?i:d,n=e?b:f,r=t*t+n*n;if(r>_)return!1;if(s){const e=Math.sqrt(r);O=!0,P=c-e,j=t/e,V=n/e,p=!1}}}else{const n=o[t],r=o[e],a=i*n+b*r,h=a<0?-a:a;if(a>0&&h>c)return!1;s&&(O=!0,P=c-a,j=n,V=r,(p&&a>=0||P<l)&&(p=!1))}O&&(null===f||f>P)&&(f=P,v=j,m=V)}return s&&(s.a_in_b=i?p:d,s.b_in_a=i?d:p,s.overlap=f,s.overlap_x=i?-v:v,s.overlap_y=i?-m:m),!0}function c(t,e,s,i,n=null){const r=t.length,o=e.length;if(!r||!o)return!0;let a=null,h=null,c=null,l=null;for(let e=0,n=1;e<r;e+=2,n+=2){const r=t[e]*s+t[n]*i;(null===a||a>r)&&(a=r),(null===h||h<r)&&(h=r)}for(let t=0,n=1;t<o;t+=2,n+=2){const r=e[t]*s+e[n]*i;(null===c||c>r)&&(c=r),(null===l||l<r)&&(l=r)}if(a>l||h<c)return!0;if(n){let t=0;if(a<c)if(n.a_in_b=!1,h<l)t=h-c,n.b_in_a=!1;else{const e=h-c,s=l-a;t=e<s?e:-s}else if(n.b_in_a=!1,h>l)t=a-l,n.a_in_b=!1;else{const e=h-c,s=l-a;t=e<s?e:-s}const e=n.overlap,r=t<0?-t:t;if(null===e||e>r){const e=t<0?-1:1;n.overlap=r,n.overlap_x=s*e,n.overlap_y=i*e}}return!1}class l{constructor(t=0,e=0,s=0){this.x=t,this.y=e,this.padding=s,this._circle=!1,this._polygon=!1,this._point=!1,this._bvh=null,this._bvh_parent=null,this._bvh_branch=!1,this._bvh_padding=s,this._bvh_min_x=0,this._bvh_min_y=0,this._bvh_max_x=0,this._bvh_max_y=0}collides(t,e=null,s=!0){return a(this,t,e,s)}potentials(){const t=this._bvh;if(null===t)throw new Error("Body does not belong to a collision system");return t.potentials(this)}remove(){const t=this._bvh;t&&t.remove(this,!1)}createResult(){return new o}static createResult(){return new o}}class _ extends l{constructor(t=0,e=0,s=0,i=1,n=0){super(t,e,n),this.radius=s,this.scale=i}draw(t){const e=this.x,s=this.y,i=this.radius*this.scale;t.moveTo(e+i,s),t.arc(e,s,i,0,2*Math.PI)}}class u extends l{constructor(t=0,e=0,s=[],i=0,n=1,r=1,o=0){super(t,e,o),this.angle=i,this.scale_x=n,this.scale_y=r,this._polygon=!0,this._x=t,this._y=e,this._angle=i,this._scale_x=n,this._scale_y=r,this._min_x=0,this._min_y=0,this._max_x=0,this._max_y=0,this._points=null,this._coords=null,this._edges=null,this._normals=null,this._dirty_coords=!0,this._dirty_normals=!0,u.prototype.setPoints.call(this,s)}draw(t){(this._dirty_coords||this.x!==this._x||this.y!==this._y||this.angle!==this._angle||this.scale_x!==this._scale_x||this.scale_y!==this._scale_y)&&this._calculateCoords();const e=this._coords;if(2===e.length)t.moveTo(e[0],e[1]),t.arc(e[0],e[1],1,0,2*Math.PI);else{t.moveTo(e[0],e[1]);for(let s=2;s<e.length;s+=2)t.lineTo(e[s],e[s+1]);e.length>4&&t.lineTo(e[0],e[1])}}setPoints(t){const e=t.length;this._points=new Float64Array(2*e),this._coords=new Float64Array(2*e),this._edges=new Float64Array(2*e),this._normals=new Float64Array(2*e);const s=this._points;for(let i=0,n=0,r=1;i<e;++i,n+=2,r+=2){const e=t[i];s[n]=e[0],s[r]=e[1]}this._dirty_coords=!0}_calculateCoords(){const t=this.x,e=this.y,s=this.angle,i=this.scale_x,n=this.scale_y,r=this._points,o=this._coords,a=r.length;let h,c,l,_;for(let u=0,d=1;u<a;u+=2,d+=2){let a=r[u]*i,p=r[d]*n;if(s){const t=Math.cos(s),e=Math.sin(s),i=a;a=i*t-p*e,p=i*e+p*t}a+=t,p+=e,o[u]=a,o[d]=p,0===u?(h=c=a,l=_=p):(a<h?h=a:a>c&&(c=a),p<l?l=p:p>_&&(_=p))}this._x=t,this._y=e,this._angle=s,this._scale_x=i,this._scale_y=n,this._min_x=h,this._min_y=l,this._max_x=c,this._max_y=_,this._dirty_coords=!1,this._dirty_normals=!0}_calculateNormals(){const t=this._coords,e=this._edges,s=this._normals,i=t.length;for(let n=0,r=1;n<i;n+=2,r+=2){const o=n+2<i?n+2:0,a=t[o]-t[n],h=t[o+1]-t[r],c=a||h?Math.sqrt(a*a+h*h):0;e[n]=a,e[r]=h,s[n]=c?h/c:0,s[r]=c?-a/c:0}this._dirty_normals=!1}}class d extends u{constructor(t=0,e=0,s=0){super(t,e,[[0,0]],0,1,1,s),this._point=!0}}d.prototype.setPoints=void 0,s.d(e,"default",function(){return p}),s.d(e,"Collisions",function(){return p}),s.d(e,"Result",function(){return o}),s.d(e,"Circle",function(){return _}),s.d(e,"Polygon",function(){return u}),s.d(e,"Point",function(){return d});class p{constructor(){this._bvh=new r}createCircle(t=0,e=0,s=0,i=1,n=0){const r=new _(t,e,s,i,n);return this._bvh.insert(r),r}createPolygon(t=0,e=0,s=[[0,0]],i=0,n=1,r=1,o=0){const a=new u(t,e,s,i,n,r,o);return this._bvh.insert(a),a}createPoint(t=0,e=0,s=0){const i=new d(t,e,s);return this._bvh.insert(i),i}createResult(){return new o}static createResult(){return new o}insert(...t){for(const e of t)this._bvh.insert(e,!1);return this}remove(...t){for(const e of t)this._bvh.remove(e,!1);return this}update(){return this._bvh.update(),this}draw(t){return this._bvh.draw(t)}drawBVH(t){return this._bvh.drawBVH(t)}potentials(t){return this._bvh.potentials(t)}collides(t,e,s=null,i=!0){return a(t,e,s,i)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,